#pragma once
/// This file is generated by gen_ir_def.py
#include <type_traits>
#include <luisa/ir_v2/ir_v2_fwd.h>
namespace luisa::compute::ir_v2 {
struct Func {
public:
    typedef FuncTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }

    [[nodiscard]] virtual bool has_side_effects() const noexcept = 0;
};
struct LC_IR_API Zero : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ZERO;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API One : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ONE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Assume : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASSUME;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string msg;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Unreachable : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::UNREACHABLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string msg;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ThreadId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::THREAD_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BlockId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BLOCK_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpLaneId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_LANE_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DispatchId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISPATCH_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DispatchSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISPATCH_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PropagateGradient : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PROPAGATE_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API OutputGradient : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::OUTPUT_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RequiresGradient : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REQUIRES_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Backward : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BACKWARD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Gradient : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AccGrad : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACC_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Detach : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DETACH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceTransform : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_TRANSFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceVisibilityMask : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_VISIBILITY_MASK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceUserId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_USER_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingSetInstanceTransform : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_TRANSFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceOpacity : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_OPACITY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceVisibility : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_VISIBILITY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceUserId : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_USER_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingTraceClosest : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_TRACE_CLOSEST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingTraceAny : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_TRACE_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingQueryAll : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_QUERY_ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingQueryAny : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_QUERY_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryWorldSpaceRay : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_WORLD_SPACE_RAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryProceduralCandidateHit : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_PROCEDURAL_CANDIDATE_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryTriangleCandidateHit : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_TRIANGLE_CANDIDATE_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryCommittedHit : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMITTED_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryCommitTriangle : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMIT_TRIANGLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayQueryCommitdProcedural : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMITD_PROCEDURAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayQueryTerminate : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_TERMINATE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Load : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Store : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::STORE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Cast : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CAST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitCast : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_CAST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Add : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Sub : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mul : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MUL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Div : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DIV;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Rem : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitAnd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitOr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitXor : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Shl : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Shr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RotRight : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROT_RIGHT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RotLeft : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROT_LEFT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Eq : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EQ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Ne : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Lt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Le : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Gt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Ge : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MatCompMul : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT_COMP_MUL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Neg : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NEG;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Not : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitNot : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_NOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API All : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Any : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Select : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SELECT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Clamp : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CLAMP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Lerp : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LERP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Step : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::STEP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Saturate : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SATURATE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SmoothStep : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SMOOTH_STEP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Abs : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ABS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Min : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Max : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceSum : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceProd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_PROD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceMin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceMax : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Clz : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CLZ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Ctz : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CTZ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PopCount : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POP_COUNT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Reverse : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REVERSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API IsInf : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IS_INF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API IsNan : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IS_NAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Acos : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACOS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Acosh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACOSH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Asin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Asinh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASINH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Atan : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Atan2 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATAN2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Atanh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATANH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Cos : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Cosh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COSH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Sin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Sinh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SINH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Tan : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Tanh : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TANH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Exp : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Exp2 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Exp10 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP10;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Log : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Log2 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Log10 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG10;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Powi : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POWI;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Powf : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POWF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Sqrt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SQRT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Rsqrt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RSQRT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Ceil : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CEIL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Floor : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FLOOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Fract : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FRACT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Trunc : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TRUNC;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Round : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROUND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Fma : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FMA;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Copysign : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COPYSIGN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Cross : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CROSS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Dot : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API OuterProduct : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::OUTER_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Length : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LENGTH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LengthSquared : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LENGTH_SQUARED;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Normalize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NORMALIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Faceforward : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FACEFORWARD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Distance : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISTANCE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Reflect : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REFLECT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Determinant : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DETERMINANT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Transpose : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TRANSPOSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Inverse : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::INVERSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpIsFirstActiveLane : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_IS_FIRST_ACTIVE_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpFirstActiveLane : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_FIRST_ACTIVE_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveAllEqual : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ALL_EQUAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveBitAnd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveBitOr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveBitXor : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveCountBits : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_COUNT_BITS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveMax : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveMin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveProduct : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveSum : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveAll : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveAny : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpActiveBitMask : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_MASK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpPrefixCountBits : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_COUNT_BITS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpPrefixSum : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpPrefixProduct : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpReadLaneAt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_READ_LANE_AT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpReadFirstLane : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_READ_FIRST_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SynchronizeBlock : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SYNCHRONIZE_BLOCK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AtomicExchange : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicCompareExchange : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_COMPARE_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchAdd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchSub : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchAnd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchOr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchXor : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchMin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchMax : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BufferWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BufferRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BufferSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ByteBufferWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API ByteBufferRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ByteBufferSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture2dRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture2dWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Texture2dSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture3dRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture3dWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Texture3dSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSample : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleGrad : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleGradLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSizeLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SIZE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSample : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleGrad : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleGradLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSizeLevel : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SIZE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessBufferWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessBufferRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessBufferSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessByteBufferWrite : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessByteBufferRead : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessByteBufferSize : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec2 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec3 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC3;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec4 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC4;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Permute : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PERMUTE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API GetElementPtr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GET_ELEMENT_PTR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ExtractElement : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXTRACT_ELEMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API InsertElement : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::INSERT_ELEMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Array : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ARRAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Struct : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::STRUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MatFull : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT_FULL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat2 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat3 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT3;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat4 : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT4;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessAtomicExchange : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicCompareExchange : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_COMPARE_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchAdd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchSub : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchAnd : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchOr : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchXor : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchMin : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchMax : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Callable : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CALLABLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::shared_ptr<CallableModule> module;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CpuExt : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CPU_EXT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CpuExternFn f;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ShaderExecutionReorder : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHADER_EXECUTION_REORDER;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct Instruction {
public:
    typedef InstructionTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }
};
struct LC_IR_API Buffer : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Texture2d : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Texture3d : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API BindlessArray : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ARRAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Accel : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACCEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Shared : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHARED;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Uniform : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::UNIFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Argument : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ARGUMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    bool by_value;
};
struct LC_IR_API Const : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CONST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    luisa::vector<uint8_t> value;
};
struct LC_IR_API Call : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Func *func;
    luisa::vector<Node *> args;
    Call(const Func *func, luisa::vector<Node *> args) noexcept {
        this->func = std::move(func);
        this->args = std::move(args);
    }
};
struct LC_IR_API Phi : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PHI;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::vector<PhiIncoming> incomings;
};
struct LC_IR_API BasicBlockSentinel : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BASIC_BLOCK_SENTINEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API If : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *cond;
    BasicBlock *true_branch;
    BasicBlock *false_branch;
    If(Node *cond, BasicBlock *true_branch, BasicBlock *false_branch) noexcept {
        this->cond = cond;
        this->true_branch = true_branch;
        this->false_branch = false_branch;
    }
};
struct LC_IR_API GenericLoop : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GENERIC_LOOP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BasicBlock *prepare;
    Node *cond;
    BasicBlock *body;
    BasicBlock *update;
    GenericLoop(BasicBlock *prepare, Node *cond, BasicBlock *body, BasicBlock *update) noexcept {
        this->prepare = prepare;
        this->cond = cond;
        this->body = body;
        this->update = update;
    }
};
struct LC_IR_API Switch : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SWITCH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *value;
    luisa::vector<SwitchCase> cases;
    BasicBlock *default_;
    Switch(Node *value, luisa::vector<SwitchCase> cases, BasicBlock *default_) noexcept {
        this->value = value;
        this->cases = std::move(cases);
        this->default_ = default_;
    }
};
struct LC_IR_API Local : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOCAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *init;
    Local(Node *init) noexcept {
        this->init = init;
    }
};
struct LC_IR_API Break : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BREAK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Continue : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CONTINUE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
};
struct LC_IR_API Return : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RETURN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *value;
    Return(Node *value) noexcept {
        this->value = value;
    }
};
struct LC_IR_API Print : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PRINT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string fmt;
    luisa::vector<Node *> args;
    Print(luisa::string fmt, luisa::vector<Node *> args) noexcept {
        this->fmt = std::move(fmt);
        this->args = std::move(args);
    }
};
struct Binding {
public:
    typedef BindingTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }
};
struct LC_IR_API BufferBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    uint64_t offset;
    uint64_t size;
};
struct LC_IR_API TextureBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    uint64_t level;
};
struct LC_IR_API BindlessArrayBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ARRAY_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
};
struct LC_IR_API AccelBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACCEL_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
};
}// namespace luisa::compute::ir_v2
