#pragma once
/// This file is generated by gen_ir_def.py
#include <type_traits>
#include <luisa/ir_v2/ir_v2_fwd.h>
namespace luisa::compute::ir_v2 {
struct Func {
public:
    typedef FuncTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Func, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }

    [[nodiscard]] virtual bool has_side_effects() const noexcept = 0;
};
struct LC_IR_API ZeroFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ZERO;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ZeroFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API OneFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ONE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    OneFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AssumeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASSUME;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string msg;
    AssumeFn() = default;
    AssumeFn(luisa::string msg) : msg(msg) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API UnreachableFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::UNREACHABLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string msg;
    UnreachableFn() = default;
    UnreachableFn(luisa::string msg) : msg(msg) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ThreadIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::THREAD_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ThreadIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BlockIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BLOCK_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BlockIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpLaneIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_LANE_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpLaneIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DispatchIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISPATCH_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DispatchIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DispatchSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISPATCH_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DispatchSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PropagateGradientFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PROPAGATE_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    PropagateGradientFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API OutputGradientFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::OUTPUT_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    OutputGradientFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RequiresGradientFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REQUIRES_GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RequiresGradientFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BackwardFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BACKWARD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BackwardFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API GradientFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GRADIENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    GradientFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AccGradFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACC_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AccGradFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API DetachFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DETACH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DetachFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceTransformFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_TRANSFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingInstanceTransformFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceVisibilityMaskFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_VISIBILITY_MASK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingInstanceVisibilityMaskFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingInstanceUserIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_INSTANCE_USER_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingInstanceUserIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingSetInstanceTransformFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_TRANSFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingSetInstanceTransformFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceOpacityFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_OPACITY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingSetInstanceOpacityFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceVisibilityFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_VISIBILITY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingSetInstanceVisibilityFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingSetInstanceUserIdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_SET_INSTANCE_USER_ID;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingSetInstanceUserIdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayTracingTraceClosestFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_TRACE_CLOSEST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingTraceClosestFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingTraceAnyFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_TRACE_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingTraceAnyFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingQueryAllFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_QUERY_ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingQueryAllFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayTracingQueryAnyFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_TRACING_QUERY_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayTracingQueryAnyFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryWorldSpaceRayFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_WORLD_SPACE_RAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryWorldSpaceRayFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryProceduralCandidateHitFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_PROCEDURAL_CANDIDATE_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryProceduralCandidateHitFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryTriangleCandidateHitFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_TRIANGLE_CANDIDATE_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryTriangleCandidateHitFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryCommittedHitFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMITTED_HIT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryCommittedHitFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RayQueryCommitTriangleFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMIT_TRIANGLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryCommitTriangleFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayQueryCommitdProceduralFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_COMMITD_PROCEDURAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryCommitdProceduralFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API RayQueryTerminateFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY_TERMINATE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RayQueryTerminateFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API LoadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LoadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CastFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CAST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CastFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitCastFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_CAST;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BitCastFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AddFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AddFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SubFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SubFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MulFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MUL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    MulFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DivFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DIV;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DivFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RemFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RemFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitAndFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BitAndFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitOrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BitOrFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitXorFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BitXorFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ShlFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ShlFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ShrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ShrFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RotRightFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROT_RIGHT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RotRightFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RotLeftFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROT_LEFT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RotLeftFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API EqFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EQ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    EqFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API NeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    NeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LtFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API GtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    GtFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API GeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    GeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MatCompMulFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT_COMP_MUL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    MatCompMulFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API NegFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NEG;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    NegFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API NotFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    NotFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BitNotFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BIT_NOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BitNotFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AllFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AllFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AnyFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AnyFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SelectFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SELECT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SelectFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ClampFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CLAMP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ClampFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LerpFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LERP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LerpFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API StepFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::STEP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    StepFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SaturateFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SATURATE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SaturateFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SmoothStepFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SMOOTH_STEP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SmoothStepFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AbsFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ABS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AbsFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    MinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MaxFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    MaxFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceSumFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReduceSumFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceProdFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_PROD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReduceProdFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceMinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReduceMinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReduceMaxFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REDUCE_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReduceMaxFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ClzFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CLZ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ClzFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CtzFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CTZ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CtzFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PopCountFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POP_COUNT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    PopCountFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReverseFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REVERSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReverseFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API IsInfFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IS_INF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    IsInfFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API IsNanFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IS_NAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    IsNanFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AcosFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACOS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AcosFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AcoshFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACOSH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AcoshFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AsinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AsinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AsinhFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ASINH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AsinhFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AtanFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtanFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Atan2Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATAN2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Atan2Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API AtanhFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATANH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtanhFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CosFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CosFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CoshFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COSH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CoshFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SinhFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SINH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SinhFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API TanFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TAN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    TanFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API TanhFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TANH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    TanhFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ExpFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ExpFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Exp2Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Exp2Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Exp10Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXP10;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Exp10Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LogFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LogFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Log2Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Log2Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Log10Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOG10;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Log10Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PowiFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POWI;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    PowiFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PowfFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::POWF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    PowfFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API SqrtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SQRT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SqrtFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RsqrtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RSQRT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RsqrtFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CeilFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CEIL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CeilFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API FloorFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FLOOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    FloorFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API FractFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FRACT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    FractFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API TruncFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TRUNC;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    TruncFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API RoundFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ROUND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    RoundFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API FmaFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FMA;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    FmaFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CopysignFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::COPYSIGN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CopysignFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CrossFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CROSS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CrossFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DotFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DOT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DotFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API OuterProductFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::OUTER_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    OuterProductFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LengthFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LENGTH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LengthFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API LengthSquaredFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LENGTH_SQUARED;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    LengthSquaredFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API NormalizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::NORMALIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    NormalizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API FaceforwardFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FACEFORWARD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    FaceforwardFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DistanceFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DISTANCE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DistanceFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ReflectFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REFLECT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ReflectFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API DeterminantFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::DETERMINANT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    DeterminantFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API TransposeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TRANSPOSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    TransposeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API InverseFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::INVERSE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    InverseFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API WarpIsFirstActiveLaneFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_IS_FIRST_ACTIVE_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpIsFirstActiveLaneFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpFirstActiveLaneFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_FIRST_ACTIVE_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpFirstActiveLaneFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveAllEqualFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ALL_EQUAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveAllEqualFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveBitAndFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveBitAndFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveBitOrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveBitOrFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveBitXorFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveBitXorFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveCountBitsFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_COUNT_BITS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveCountBitsFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveMaxFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveMaxFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveMinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveMinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveProductFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveProductFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveSumFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveSumFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveAllFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveAllFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveAnyFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_ANY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveAnyFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpActiveBitMaskFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_ACTIVE_BIT_MASK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpActiveBitMaskFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpPrefixCountBitsFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_COUNT_BITS;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpPrefixCountBitsFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpPrefixSumFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_SUM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpPrefixSumFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpPrefixProductFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_PREFIX_PRODUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpPrefixProductFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpReadLaneAtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_READ_LANE_AT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpReadLaneAtFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API WarpReadFirstLaneFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::WARP_READ_FIRST_LANE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    WarpReadFirstLaneFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API SynchronizeBlockFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SYNCHRONIZE_BLOCK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SynchronizeBlockFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicExchangeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicExchangeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicCompareExchangeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_COMPARE_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicCompareExchangeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchAddFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchAddFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchSubFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchSubFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchAndFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchAndFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchOrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchOrFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchXorFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchXorFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchMinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchMinFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API AtomicFetchMaxFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ATOMIC_FETCH_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AtomicFetchMaxFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BufferWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BufferWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BufferReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BufferReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BufferSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BufferSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ByteBufferWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ByteBufferWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API ByteBufferReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ByteBufferReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ByteBufferSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BYTE_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ByteBufferSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture2dReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture2dReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture2dWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture2dWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Texture2dSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture2dSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture3dReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture3dReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Texture3dWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture3dWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API Texture3dSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture3dSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSampleFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSampleLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleGradFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSampleGradFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSampleGradLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSampleGradLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture2dSizeLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE2D_SIZE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture2dSizeLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSampleFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSampleLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleGradFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_GRAD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSampleGradFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSampleGradLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSampleGradLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessTexture3dSizeLevelFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_TEXTURE3D_SIZE_LEVEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessTexture3dSizeLevelFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessBufferWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessBufferWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessBufferReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessBufferReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessBufferSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessBufferSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessByteBufferWriteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_WRITE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessByteBufferWriteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessByteBufferReadFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_READ;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessByteBufferReadFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessByteBufferSizeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_BYTE_BUFFER_SIZE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessByteBufferSizeFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API VecFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    VecFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec2Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Vec2Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec3Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC3;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Vec3Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Vec4Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::VEC4;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Vec4Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API PermuteFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PERMUTE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    PermuteFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API GetElementPtrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GET_ELEMENT_PTR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    GetElementPtrFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ExtractElementFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::EXTRACT_ELEMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ExtractElementFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API InsertElementFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::INSERT_ELEMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    InsertElementFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ArrayFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ARRAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ArrayFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API StructFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::STRUCT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    StructFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API MatFullFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT_FULL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    MatFullFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat2Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT2;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Mat2Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat3Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT3;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Mat3Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API Mat4Fn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::MAT4;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Mat4Fn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API BindlessAtomicExchangeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicExchangeFn() = default;
    BindlessAtomicExchangeFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicCompareExchangeFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_COMPARE_EXCHANGE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicCompareExchangeFn() = default;
    BindlessAtomicCompareExchangeFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchAddFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_ADD;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchAddFn() = default;
    BindlessAtomicFetchAddFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchSubFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_SUB;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchSubFn() = default;
    BindlessAtomicFetchSubFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchAndFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_AND;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchAndFn() = default;
    BindlessAtomicFetchAndFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchOrFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_OR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchOrFn() = default;
    BindlessAtomicFetchOrFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchXorFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_XOR;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchXorFn() = default;
    BindlessAtomicFetchXorFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchMinFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_MIN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchMinFn() = default;
    BindlessAtomicFetchMinFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API BindlessAtomicFetchMaxFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ATOMIC_FETCH_MAX;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    BindlessAtomicFetchMaxFn() = default;
    BindlessAtomicFetchMaxFn(const Type *ty) : ty(ty) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return true;
    }
};
struct LC_IR_API CallableFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CALLABLE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::shared_ptr<CallableModule> module;
    CallableFn() = default;
    CallableFn(luisa::shared_ptr<CallableModule> module) : module(module) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API CpuExtFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CPU_EXT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    CpuExternFn f;
    CpuExtFn() = default;
    CpuExtFn(CpuExternFn f) : f(f) {}
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct LC_IR_API ShaderExecutionReorderFn : public Func {
public:
    using Func::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHADER_EXECUTION_REORDER;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ShaderExecutionReorderFn() = default;
    [[nodiscard]] constexpr bool has_side_effects() const noexcept override {
        return false;
    }
};
struct Instruction {
public:
    typedef InstructionTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Instruction, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }
};
struct LC_IR_API BufferInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BufferInst() = default;
};
struct LC_IR_API Texture2dInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE2D;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture2dInst() = default;
};
struct LC_IR_API Texture3dInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE3D;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Texture3dInst() = default;
};
struct LC_IR_API BindlessArrayInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ARRAY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BindlessArrayInst() = default;
};
struct LC_IR_API AccelInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACCEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    AccelInst() = default;
};
struct LC_IR_API SharedInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SHARED;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    SharedInst() = default;
};
struct LC_IR_API UniformInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::UNIFORM;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    UniformInst() = default;
};
struct LC_IR_API ArgumentInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ARGUMENT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    bool by_value;
    ArgumentInst() = default;
    ArgumentInst(bool by_value) : by_value(by_value) {}
};
struct LC_IR_API ConstantInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CONSTANT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Type *ty;
    luisa::vector<uint8_t> value;
    ConstantInst() = default;
    ConstantInst(const Type *ty, luisa::vector<uint8_t> value) : ty(ty), value(value) {}
};
struct LC_IR_API CallInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CALL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    const Func *func;
    luisa::vector<Node *> args;
    CallInst() = default;
    CallInst(const Func *func, luisa::vector<Node *> args) : func(func), args(args) {}
};
struct LC_IR_API PhiInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PHI;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::vector<PhiIncoming> incomings;
    PhiInst() = default;
    PhiInst(luisa::vector<PhiIncoming> incomings) : incomings(incomings) {}
};
struct LC_IR_API BasicBlockSentinelInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BASIC_BLOCK_SENTINEL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BasicBlockSentinelInst() = default;
};
struct LC_IR_API IfInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::IF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *cond;
    BasicBlock *true_branch;
    BasicBlock *false_branch;
    IfInst() = default;
    IfInst(Node *cond, BasicBlock *true_branch, BasicBlock *false_branch) : cond(cond), true_branch(true_branch), false_branch(false_branch) {}
};
struct LC_IR_API GenericLoopInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::GENERIC_LOOP;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BasicBlock *prepare;
    Node *cond;
    BasicBlock *body;
    BasicBlock *update;
    GenericLoopInst() = default;
    GenericLoopInst(BasicBlock *prepare, Node *cond, BasicBlock *body, BasicBlock *update) : prepare(prepare), cond(cond), body(body), update(update) {}
};
struct LC_IR_API SwitchInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::SWITCH;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *value;
    luisa::vector<SwitchCase> cases;
    BasicBlock *default_;
    SwitchInst() = default;
    SwitchInst(Node *value, luisa::vector<SwitchCase> cases, BasicBlock *default_) : value(value), cases(cases), default_(default_) {}
};
struct LC_IR_API LocalInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::LOCAL;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *init;
    LocalInst() = default;
    LocalInst(Node *init) : init(init) {}
};
struct LC_IR_API BreakInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BREAK;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BreakInst() = default;
};
struct LC_IR_API ContinueInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::CONTINUE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    ContinueInst() = default;
};
struct LC_IR_API ReturnInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RETURN;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *value;
    ReturnInst() = default;
    ReturnInst(Node *value) : value(value) {}
};
struct LC_IR_API PrintInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::PRINT;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    luisa::string fmt;
    luisa::vector<Node *> args;
    PrintInst() = default;
    PrintInst(luisa::string fmt, luisa::vector<Node *> args) : fmt(fmt), args(args) {}
};
struct LC_IR_API UpdateInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::UPDATE;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *var;
    Node *value;
    UpdateInst() = default;
    UpdateInst(Node *var, Node *value) : var(var), value(value) {}
};
struct LC_IR_API RayQueryInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::RAY_QUERY;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    Node *query;
    BasicBlock *on_triangle_hit;
    BasicBlock *on_procedural_hit;
    RayQueryInst() = default;
    RayQueryInst(Node *query, BasicBlock *on_triangle_hit, BasicBlock *on_procedural_hit) : query(query), on_triangle_hit(on_triangle_hit), on_procedural_hit(on_procedural_hit) {}
};
struct LC_IR_API RevAutodiffInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::REV_AUTODIFF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BasicBlock *body;
    RevAutodiffInst() = default;
    RevAutodiffInst(BasicBlock *body) : body(body) {}
};
struct LC_IR_API FwdAutodiffInst : public Instruction {
public:
    using Instruction::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::FWD_AUTODIFF;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    BasicBlock *body;
    FwdAutodiffInst() = default;
    FwdAutodiffInst(BasicBlock *body) : body(body) {}
};
LC_IR_API Func *create_func_from_tag(Pool &pool, FuncTag tag);
struct Binding {
public:
    typedef BindingTag Tag;
    [[nodiscard]] virtual Tag tag() const noexcept = 0;
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] bool isa() const noexcept {
        return tag() == T::static_tag();
    }
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] T *as() {
        return isa<T>() ? static_cast<T *>(this) : nullptr;
    }
    template<class T>
        requires std::is_base_of_v<Binding, T>
    [[nodiscard]] const T *as() const {
        return isa<T>() ? static_cast<const T *>(this) : nullptr;
    }
};
struct LC_IR_API BufferBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BUFFER_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    uint64_t offset;
    uint64_t size;
    BufferBinding() = default;
    BufferBinding(uint64_t handle, uint64_t offset, uint64_t size) : handle(handle), offset(offset), size(size) {}
};
struct LC_IR_API TextureBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::TEXTURE_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    uint64_t level;
    TextureBinding() = default;
    TextureBinding(uint64_t handle, uint64_t level) : handle(handle), level(level) {}
};
struct LC_IR_API BindlessArrayBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::BINDLESS_ARRAY_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    BindlessArrayBinding() = default;
    BindlessArrayBinding(uint64_t handle) : handle(handle) {}
};
struct LC_IR_API AccelBinding : public Binding {
public:
    using Binding::Tag;
    static constexpr Tag static_tag() noexcept {
        return Tag::ACCEL_BINDING;
    }
    [[nodiscard]] Tag tag() const noexcept override {
        return static_tag();
    }
public:
    uint64_t handle;
    AccelBinding() = default;
    AccelBinding(uint64_t handle) : handle(handle) {}
};
}// namespace luisa::compute::ir_v2
