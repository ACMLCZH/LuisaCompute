name: build-cmake

on: [ push, pull_request ]

jobs:
  build-linux:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04 ]
        compiler: [ gcc, clang ]
        config: [ Release, Debug ]
        include:
          - compiler: gcc
            compiler_version: [ 11, 12 ]
          - compiler: clang
            compiler_version: [ 14, 15, 16 ]
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}-${{ matrix.compiler_version }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get -y install cmake
          sudo apt-get -y install build-essential ninja-build git file libopencv-dev uuid-dev libglfw3-dev libxinerama-dev libxcursor-dev libxi-dev
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get -y install gcc-${{ matrix.compiler_version }} g++-${{ matrix.compiler_version }}
          else
            wget https://apt.llvm.org/llvm.sh
            chmod +x llvm.sh
            sudo ./llvm.sh ${{ matrix.compiler_version }}
            sudo apt-get -y install libc++-${{ matrix.compiler_version }}-dev libc++abi-${{ matrix.compiler_version }}-dev
          fi
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Setup CUDA"
        uses: Jimver/cuda-toolkit@v0.2.8
        with:
          linux-local-args: '["--toolkit"]'
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export LUISA_CC=gcc-${{ matrix.compiler_version }}
            export LUISA_CXX=g++-${{ matrix.compiler_version }}
            export LUISA_FLAGS=""
          else
            export LUISA_CC=clang-${{ matrix.compiler_version }}
            export LUISA_CXX=clang++-${{ matrix.compiler_version }}
            export LUISA_FLAGS="-stdlib=libc++"
          fi
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=${LUISA_CC} -D CMAKE_CXX_COMPILER=${LUISA_CXX} -D CMAKE_CXX_FLAGS="${LUISA_FLAGS}"
          cmake --build build
      - name: "Install"
        run: |
          sudo cmake --install build --prefix dist -v

  build-macos:
    strategy:
      fail-fast: false
      matrix:
        os: [ macos-11, macos-12 ]
        compiler: [ homebrew-clang, system-clang ]
        config: [ Release, Debug ]
        exclude:
          - os: macos-11
            compiler: system-clang
    name: ${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Install Dependencies"
        run: |
          brew install cmake ninja opencv llvm sccache glfw
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Configure and Build"
        run: |
          if [ "${{ matrix.compiler }}" = "homebrew-clang" ]; then
            export PATH=/usr/local/opt/llvm/bin:$PATH
          fi
          cmake -S . -B build -G Ninja -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER=clang -D CMAKE_CXX_COMPILER=clang++
          cmake --build build
      - name: "Install"
        run: |
          sudo cmake --install build --prefix dist -v

  build-windows:
    strategy:
      fail-fast: false
      matrix:
        os: [ 2019, 2022 ]
        config: [ Release, Debug ]
        compiler: [ cl, clang, clang-cl ]
    name: windows-${{ matrix.os }} / ${{ matrix.config }} / ${{ matrix.compiler }}
    runs-on: windows-${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: "Setup CUDA"
        uses: Jimver/cuda-toolkit@v0.2.8
      - name: "Setup Ninja"
        uses: ashutoshvarma/setup-ninja@master
        with:
          version: 1.10.2
      - name: "Setup Vulkan SDK"
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: latest
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true
      - name: "Configure and Build"
        shell: cmd
        run: |
          if "${{ matrix.os }}" == "2019" (
            call "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.os }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            call "C:\Program Files\Microsoft Visual Studio\${{ matrix.os }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          )
          cmake -S . -G Ninja -B build -D CMAKE_BUILD_TYPE=${{ matrix.config }} -D CMAKE_C_COMPILER:FILEPATH=${{ matrix.compiler }}.exe -D CMAKE_CXX_COMPILER:FILEPATH=${{ matrix.compiler }}.exe
          cmake --build build
      - name: "Install"
        run: |
          cmake --install build --prefix dist -v
