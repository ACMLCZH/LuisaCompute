add_library(luisa-compute-ext INTERFACE)

if (LUISA_COMPUTE_ENABLE_MIMALLOC)
    set(MI_OVERRIDE OFF CACHE BOOL "" FORCE)
    set(MI_XMALLOC ON CACHE BOOL "" FORCE)
    set(MI_USE_CXX OFF CACHE BOOL "" FORCE)
    set(MI_OSX_ZONE ON CACHE BOOL "" FORCE)
    set(MI_BUILD_STATIC ON CACHE BOOL "" FORCE)
    set(MI_BUILD_SHARED OFF CACHE BOOL "" FORCE)
    set(MI_BUILD_OBJECT OFF CACHE BOOL "" FORCE)
    set(MI_BUILD_TESTS OFF CACHE BOOL "" FORCE)
    add_subdirectory(mimalloc)
endif ()

set(SPDLOG_ENABLE_PCH ON CACHE BOOL "" FORCE)
set(SPDLOG_BUILD_SHARED ON CACHE BOOL "" FORCE)
set(SPDLOG_NO_EXCEPTIONS ON CACHE BOOL "" FORCE)
add_subdirectory(spdlog)
target_compile_definitions(spdlog INTERFACE FMT_CONSTEVAL=inline)
set_target_properties(spdlog PROPERTIES UNITY_BUILD ON)
target_link_libraries(luisa-compute-ext INTERFACE spdlog)

add_library(xxhash INTERFACE)
target_include_directories(xxhash INTERFACE xxHash)
target_compile_definitions(xxhash INTERFACE XXH_INLINE_ALL)
target_link_libraries(luisa-compute-ext INTERFACE xxhash)

add_library(stduuid INTERFACE)
target_include_directories(stduuid INTERFACE stduuid/include)
target_compile_definitions(stduuid INTERFACE UUID_SYSTEM_GENERATOR=1)
if (WIN32)
elseif (APPLE)
    target_link_libraries(stduuid INTERFACE "-framework CoreFoundation")
else ()
    find_library(LibUUID_LIBRARY NAMES uuid)
    find_path(LibUUID_INCLUDE_DIR NAMES uuid/uuid.h)
    target_include_directories(stduuid INTERFACE "${LibUUID_INCLUDE_DIR}")
    target_link_libraries(stduuid INTERFACE "${LibUUID_LIBRARY}")
endif ()
target_link_libraries(luisa-compute-ext INTERFACE stduuid)

add_library(asio SHARED asio/asio/src/asio.cpp)
target_include_directories(asio PUBLIC asio/asio/include)
target_compile_definitions(asio PUBLIC ASIO_STANDALONE=1 ASIO_DYN_LINK=1 ASIO_HAS_STD_INVOKE_RESULT=1)
target_link_libraries(luisa-compute-ext INTERFACE asio)
