#include "Include/Sampler.cginc"
#include "Include/Half.cginc"
cbuffer Params : register(b0){
    uint4 _Resolution;
    uint3 _PixelOffset;
}
#if defined(INT_4)
    #define TEX_TYPE uint4
#elif defined(INT_2)
    #define TEX_TYPE uint2
#elif defined(INT_1)
    #define TEX_TYPE uint
#elif defined(FLOAT_4)
    #define TEX_TYPE float4
#elif defined(FLOAT_2)
    #define TEX_TYPE float2
#elif defined(FLOAT_1)
    #define TEX_TYPE float
#endif

RWTexture2D<TEX_TYPE> _Tex2D : register(u0);
RWTexture3D<TEX_TYPE> _Tex3D : register(u1);

Texture2D<TEX_TYPE> _Read_Tex2D : register(t0);
Texture3D<TEX_TYPE> _Read_Tex3D : register(t1);

#if defined(WRITE_4)
    #define TEX_RATE 4
    #define BUFFER_TYPE uint
#elif defined(WRITE_2)
    #define TEX_RATE 2
    #define BUFFER_TYPE uint
#else
    #define TEX_RATE 1
    #if defined(READ_4)
        #define BUFFER_TYPE uint4
    #elif defined(READ_2)
        #define BUFFER_TYPE uint2
    #else
        #define BUFFER_TYPE uint
    #endif
#endif
StructuredBuffer<BUFFER_TYPE> _Buffer : register(t2);
RWStructuredBuffer<BUFFER_TYPE> _Write_Buffer : register(u2);
#if defined (DIMENSION_2D)
    #define UVType uint2
    #define THREAD_X 8
    #define THREAD_Y 8
    #define THREAD_Z 1

    inline UVType GetNextPixel(UVType current){
        UVType nextType = UVType(current.x + 1, current.y);
        if(nextType.x >= _Resolution.x){
            nextType.x = 0;
            nextType.y += 1;
        }
        return nextType;
    }
    #ifdef DOWNLOAD
        #define _Tex _Read_Tex2D
    #else
        #define _Tex _Tex2D
    #endif
    inline uint DownDimension(UVType current){
        return current.x + current.y * _Resolution.x;
    }
    inline UVType UpDimension(uint id){
        uint y = id / _Resolution.x;
        return UVType(id - y * _Resolution.x, y);
    }
    #define DISP_COUNT (_Resolution.xy)
    #define PIXEL_OFFSET (_PixelOffset.xy)
#elif defined (DIMENSION_3D)
    #define THREAD_X 4
    #define THREAD_Y 4
    #define THREAD_Z 4
    #define UVType uint3
    UVType GetNextPixel(UVType current){
        UVType nextType = UVType(current.x + 1, current.yz);
        if(nextType.x >= _Resolution.x){
            nextType.x = 0;
            nextType.y += 1;
        }
        if(nextType.y >= _Resolution.y){
            nextType.y = 0;
            nextType.z += 1;
        }
        return nextType;
    }
    #ifdef DOWNLOAD
        #define _Tex _Read_Tex3D
    #else
        #define _Tex _Tex3D
    #endif
    inline uint DownDimension(UVType current){
        return current.x + current.y * _Resolution.x + current.z * _Resolution.x * _Resolution.y;
    }
    inline UVType UpDimension(uint id){
        uint res = _Resolution.x * _Resolution.y;
        uint z = id / res;
        id -= z * res;
        uint y = id / _Resolution.x;
        return UVType(id - y * _Resolution.x, y, z);
    }
    #define DISP_COUNT (_Resolution.xyz)
    #define PIXEL_OFFSET (_PixelOffset.xyz)
#endif
#ifdef DOWNLOAD
    void ReadPixel(UVType id, uint bufferOffset);
#else
    void WritePixel(UVType id, uint bufferOffset);
#endif
[numthreads(THREAD_X,THREAD_Y,THREAD_Z)]
void Copy(UVType id : SV_DISPATCHTHREADID){
    if(any(id >= DISP_COUNT)) return;
    #if (TEX_RATE != 1)
        uint pixelID = DownDimension(id);
        pixelID *= TEX_RATE;
        UVType pixelIndex = UpDimension(pixelID);
    #else
        UVType pixelIndex = id;
    #endif
    #ifdef DOWNLOAD
        ReadPixel(pixelIndex + PIXEL_OFFSET, DownDimension(id));
    #else
        WritePixel(pixelIndex + PIXEL_OFFSET, DownDimension(id));
    #endif
}


#ifdef DOWNLOAD
    inline uint PackByte(uint4 v){
        uint result = v.x;
        result <<= 8;
        result |= v.y;
        result <<= 8;
        result |= v.z;
        result <<= 8;
        result |= v.w;
        return result;
    }
    inline uint PackShort(uint2 value){
        uint result = value.x;
        result <<= 16;
        result |= value.y;
        return result;
    }
    inline uint2 PackShort(uint4 value){
        uint2 result = value.xz;
        result <<= 16;
        result |= value.yw;
        return result;
    }
    #if defined(R8SInt) || defined(R8UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            uint4 v;
            v.x = _Tex[id];
            id = GetNextPixel(id);
            v.y = _Tex[id];
            id = GetNextPixel(id);
            v.z = _Tex[id];
            id = GetNextPixel(id);
            v.w = _Tex[id];
            _Write_Buffer[bufferOffset] = PackByte(v);
        }
    #endif
    #ifdef R8UNorm
        void ReadPixel(UVType id, uint bufferOffset){
            float4 v;
            v.x = _Tex[id];
            id = GetNextPixel(id);
            v.y = _Tex[id];
            id = GetNextPixel(id);
            v.z = _Tex[id];
            id = GetNextPixel(id);
            v.w = _Tex[id];
            _Write_Buffer[bufferOffset] = asuint(PackByte((uint4)(v * 255)));
        }
    #endif
    #if defined(RG8SInt) || defined(RG8UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            uint4 v ;//= GetByte();
            v.xy = _Tex[id];
            id = GetNextPixel(id);
            v.zw = _Tex[id];
            _Write_Buffer[bufferOffset] = PackByte(v);
        }
    #endif
    #ifdef RG8UNorm
        void ReadPixel(UVType id, uint bufferOffset){
            float4 v ;//= GetByte();
            v.xy = _Tex[id];
            id = GetNextPixel(id);
            v.zw = _Tex[id];
            _Write_Buffer[bufferOffset] = asuint(PackByte((uint4)(v * 255)));
        }
    #endif
    #if defined(RGBA8SInt) || defined(RGBA8UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            uint4 v = _Tex[id];
            _Write_Buffer[bufferOffset] = PackByte(v);
            
        }
    #endif
    #ifdef RGBA8UNorm
        void ReadPixel(UVType id, uint bufferOffset){
            float4 v = _Tex[id];
            _Write_Buffer[bufferOffset] = asuint(PackByte((uint4)(v * 255)));
        }
    #endif
    #if defined(R16SInt) || defined(R16UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            uint2 v;
            v.x = _Tex[id];
            id = GetNextPixel(id);
            v.y = _Tex[id];
            _Write_Buffer[bufferOffset] = PackShort(v);
        }
    #endif
    #ifdef R16UNorm
        void ReadPixel(UVType id, uint bufferOffset){
            float2 v;
            v.x = _Tex[id];
            id = GetNextPixel(id);
            v.y = _Tex[id];
            _Write_Buffer[bufferOffset] = PackShort((uint2)(v * 65535));
        }
    #endif

    #if defined(RGBA16SInt) || defined(RGBA16UInt) || defined(RG16SInt) || defined(RG16UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            _Write_Buffer[bufferOffset] = PackShort(_Tex[id]);
        }
    #endif
    #if defined(RGBA16UNorm) || defined(RG16UNorm)
        void ReadPixel(UVType id, uint bufferOffset){
            _Write_Buffer[bufferOffset] = PackShort(_Tex[id] * 65535);
        }
    #endif

    #if defined(R32SInt) || defined(R32UInt) || defined(RG32SInt) || defined(RG32UInt) || defined(RGBA32SInt) || defined(RGBA32UInt)
        void ReadPixel(UVType id, uint bufferOffset){
            _Write_Buffer[bufferOffset] = _Tex[id];
        }
    #endif

    #ifdef R16F
        void ReadPixel(UVType id, uint bufferOffset){
            uint2 v;
            v.x = f32tof16(_Tex[id]);
            id = GetNextPixel(id);
            v.y = f32tof16(_Tex[id]);
            _Write_Buffer[bufferOffset] = PackShort(v);
        }
    #endif
    #if defined(RG16F) || defined(RGBA16F) 
        void ReadPixel(UVType id, uint bufferOffset){
            _Write_Buffer[bufferOffset] = PackShort(f16tof32(_Tex[id]));
        }
    #endif
    #if defined(R32F) || defined(RGBA32F) || defined(RG32F)
        void ReadPixel(UVType id, uint bufferOffset){
            _Write_Buffer[bufferOffset] = f16tof32(_Tex[id]);
        }
    #endif
#else
    inline uint4 GetByte(uint value){
        uint4 r;
        r.w = value & 255;
        value >>= 8;
        r.z = value & 255;
        value >>= 8;
        r.y = value & 255;
        value >>= 8;
        r.x = value;
        return r;
    }
    inline uint2 GetShort(uint value){
        uint2 r;
        r.y = value & 65535;
        value >>= 16;
        r.x = value;
        return r;
    }
    inline uint4 GetShort(uint2 value){
        uint4 r;
        r.yw = value & 65535;
        value >>= 16;
        r.xz = value;
        return r;
    }
    #if defined(R8SInt) || defined(R8UInt)
        void WritePixel(UVType id, uint bufferOffset){
            uint4 v = GetByte(_Buffer[bufferOffset]);
            _Tex[id] = v.x;
            id = GetNextPixel(id);
            _Tex[id] = v.y;
            id = GetNextPixel(id);
            _Tex[id] = v.z;
            id = GetNextPixel(id);
            _Tex[id] = v.w;
        }
    #endif
    #ifdef R8UNorm
        void WritePixel(UVType id, uint bufferOffset){
            float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
            _Tex[id] = v.x;
            id = GetNextPixel(id);
            _Tex[id] = v.y;
            id = GetNextPixel(id);
            _Tex[id] = v.z;
            id = GetNextPixel(id);
            _Tex[id] = v.w;
        }
    #endif
    #if defined(RG8SInt) || defined(RG8UInt)
        void WritePixel(UVType id, uint bufferOffset){
            uint4 v = GetByte(_Buffer[bufferOffset]);
            _Tex[id] = v.xy;
            id = GetNextPixel(id);
            _Tex[id] = v.zw;
        }
    #endif
    #ifdef RG8UNorm
        void WritePixel(UVType id, uint bufferOffset){
            float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
            _Tex[id] = v.xy;
            id = GetNextPixel(id);
            _Tex[id] = v.zw;
        }
    #endif
    #if defined(RGBA8SInt) || defined(RGBA8UInt)
        void WritePixel(UVType id, uint bufferOffset){
            uint4 v = GetByte(_Buffer[bufferOffset]);
            _Tex[id] = v;
        }
    #endif
    #ifdef RGBA8UNorm
        void WritePixel(UVType id, uint bufferOffset){
            float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
            _Tex[id] = v;
        }
    #endif
    #if defined(R16SInt) || defined(R16UInt)
        void WritePixel(UVType id, uint bufferOffset){
            uint2 v = GetShort(_Buffer[bufferOffset]);
            _Tex[id] = v.x;
            id = GetNextPixel(id);
            _Tex[id] = v.y;
        }
    #endif
    #ifdef R16UNorm
        void WritePixel(UVType id, uint bufferOffset){
            float2 v = GetShort(_Buffer[bufferOffset]) / 65535.0;
            _Tex[id] = v.x;
            id = GetNextPixel(id);
            _Tex[id] = v.y;
        }
    #endif

    #if defined(RGBA16SInt) || defined(RGBA16UInt) || defined(RG16SInt) || defined(RG16UInt)
        void WritePixel(UVType id, uint bufferOffset){
            _Tex[id] = GetShort(_Buffer[bufferOffset]);
        }
    #endif
    #if defined(RGBA16UNorm) || defined(RG16UNorm)
        void WritePixel(UVType id, uint bufferOffset){
            _Tex[id] = GetShort(_Buffer[bufferOffset]) / 65535.0;
        }
    #endif

    #if defined(R32SInt) || defined(R32UInt) || defined(RG32SInt) || defined(RG32UInt) || defined(RGBA32SInt) || defined(RGBA32UInt)
        void WritePixel(UVType id, uint bufferOffset){
            _Tex[id] =  _Buffer[bufferOffset];
        }
    #endif

    #ifdef R16F
        void WritePixel(UVType id, uint bufferOffset){
            uint2 v = GetShort(_Buffer[bufferOffset]);
            _Tex[id] = f16tof32(v.x);
            id = GetNextPixel(id);
            _Tex[id] = f16tof32(v.y);
        }
    #endif
    #if defined(RG16F) || defined(RGBA16F) 
        void WritePixel(UVType id, uint bufferOffset){
            _Tex[id] = f16tof32(GetShort(_Buffer[bufferOffset]));
        }
    #endif
    #if defined(R32F) || defined(RGBA32F) || defined(RG32F)
        void WritePixel(UVType id, uint bufferOffset){
            _Tex[id] = asfloat(_Buffer[bufferOffset]);
        }
    #endif
#endif