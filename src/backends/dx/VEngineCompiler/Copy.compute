#include "Include/Sampler.cginc"
#include "Include/Half.cginc"
cbuffer Params : register(b0){
    uint4 _Resolution;
    uint3 _PixelOffset;
    uint _BufferOffset;
}
StructuredBuffer<uint> _Buffer : register(t0);
#if defined(INT_4)
    #define TEX_TYPE uint4
#elif defined(INT_2)
    #define TEX_TYPE uint2
#elif defined(INT_1)
    #define TEX_TYPE uint
#elif defined(FLOAT_4)
    #define TEX_TYPE float4
#elif defined(FLOAT_2)
    #define TEX_TYPE float2
#elif defined(FLOAT_1)
    #define TEX_TYPE float
#endif

RWTexture2D<TEX_TYPE> _Tex2D : register(u0);
RWTexture3D<TEX_TYPE> _Tex3D : register(u1);

#if defined(WRITE_4)
    #define TEX_RATE 4
    #define BUFFER_RATE 1
#elif defined(WRITE_2)
    #define TEX_RATE 2
    #define BUFFER_RATE 1
#else
    #define TEX_RATE 1
    #if defined(READ_4)
        #define BUFFER_RATE 4
    #elif defined(READ_2)
        #define BUFFER_RATE 2
    #else
        #define BUFFER_RATE 1
    #endif
#endif

#if defined (DIMENSION_2D)
    #define UVType uint2
    #define THREAD_X 8
    #define THREAD_Y 8
    #define THREAD_Z 1

    inline UVType GetNextPixel(UVType current){
        UVType nextType = UVType(current.x + 1, current.y);
        if(nextType.x >= _Resolution.x){
            nextType.x = 0;
            nextType.y += 1;
        }
        return nextType;
    }
    #define _Tex _Tex2D
    inline uint DownDimension(UVType current){
        return current.x + current.y * _Resolution.x;
    }
    inline UVType UpDimension(uint id){
        uint y = id / _Resolution.x;
        return UVType(id - y * _Resolution.x, y);
    }
    inline uint2 GetDispatchCount(){
        return _Resolution.xy;
    }
    inline uint2 GetPixelOffset(){
        return _PixelOffset.xy;
    }
#elif defined (DIMENSION_3D)
    #define THREAD_X 4
    #define THREAD_Y 4
    #define THREAD_Z 4
    #define UVType uint3
    UVType GetNextPixel(UVType current){
        UVType nextType = UVType(current.x + 1, current.yz);
        if(nextType.x >= _Resolution.x){
            nextType.x = 0;
            nextType.y += 1;
        }
        if(nextType.y >= _Resolution.y){
            nextType.y = 0;
            nextType.z += 1;
        }
        return nextType;
    }
    #define _Tex _Tex3D
    inline uint DownDimension(UVType current){
        return current.x + current.y * _Resolution.x + current.z * _Resolution.x * _Resolution.y;
    }
    inline UVType UpDimension(uint id){
        uint res = _Resolution.x * _Resolution.y;
        uint z = id / res;
        id -= z * res;
        uint y = id / _Resolution.x;
        return UVType(id - y * _Resolution.x, y, z);
    }
    inline uint3 GetDispatchCount(){
        return _Resolution.xyz;
    }
    inline uint3 GetPixelOffset(){
        return _PixelOffset.xyz;
    }
#endif

void WritePixel(UVType id, uint bufferOffset);
[numthreads(THREAD_X,THREAD_Y,THREAD_Z)]
void Copy(UVType id : SV_DISPATCHTHREADID){
    if(any(id >= GetDispatchCount())) return;
    #if (TEX_RATE != 1)
        uint pixelID = DownDimension(id);
        pixelID *= TEX_RATE;
        UVType pixelIndex = UpDimension(pixelID);
    #else
        UVType pixelIndex = id;
    #endif
    WritePixel(pixelIndex + GetPixelOffset(), DownDimension(id) * BUFFER_RATE + _BufferOffset);
}

inline uint4 GetByte(uint value){
    uint4 r;
    r.w = value & 255;
    value >>= 8;
    r.z = value & 255;
    value >>= 8;
    r.y = value & 255;
    value >>= 8;
    r.x = value;
    return r;
}
inline uint2 GetShort(uint value){
    uint2 r;
    r.y = value & 65535;
    value >>= 16;
    r.x = value;
    return r;
}
#if defined(R8SInt) || defined(R8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _Tex[id] = v.x;
        id = GetNextPixel(id);
        _Tex[id] = v.y;
        id = GetNextPixel(id);
        _Tex[id] = v.z;
        id = GetNextPixel(id);
        _Tex[id] = v.w;
    }
#endif
#ifdef R8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _Tex[id] = v.x;
        id = GetNextPixel(id);
        _Tex[id] = v.y;
        id = GetNextPixel(id);
        _Tex[id] = v.z;
        id = GetNextPixel(id);
        _Tex[id] = v.w;
    }
#endif
#if defined(RG8SInt) || defined(RG8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _Tex[id] = v.xy;
        id = GetNextPixel(id);
        _Tex[id] = v.zw;
    }
#endif
#ifdef RG8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _Tex[id] = v.xy;
        id = GetNextPixel(id);
        _Tex[id] = v.zw;
    }
#endif
#if defined(RGBA8SInt) || defined(RGBA8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _Tex[id] = v;
    }
#endif
#ifdef RGBA8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _Tex[id] = v;
    }
#endif
#if defined(R16SInt) || defined(R16UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint2 v = GetShort(_Buffer[bufferOffset]);
        _Tex[id] = v.x;
        id = GetNextPixel(id);
        _Tex[id] = v.y;
    }
#endif
#ifdef R16UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float2 v = GetShort(_Buffer[bufferOffset]) / 65535.0;
        _Tex[id] = v.x;
        id = GetNextPixel(id);
        _Tex[id] = v.y;
    }
#endif
#if defined(RG16SInt) || defined(RG16UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint2 v = GetShort(_Buffer[bufferOffset]);
        _Tex[id] = v;
    }
#endif
#ifdef RG16UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float2 v = GetShort(_Buffer[bufferOffset]) / 65535.0;
        _Tex[id] = v;
    }
#endif
#if defined(RGBA16SInt) || defined(RGBA16UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint2 v = GetShort(_Buffer[bufferOffset]);
        uint2 v1 = GetShort(_Buffer[bufferOffset + 1]);
        _Tex[id] = uint4(v, v1);
    }
#endif
#ifdef RGBA16UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float2 v = GetShort(_Buffer[bufferOffset]) / 65535.0;
        float2 v1 = GetShort(_Buffer[bufferOffset + 1]) / 65535.0;
        _Tex[id] = uint4(v, v1);
    }
#endif

#if defined(R32SInt) || defined(R32UInt)
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = _Buffer[bufferOffset];
    }
#endif
#if defined(RG32SInt) || defined(RG32UInt)
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = uint2(_Buffer[bufferOffset], _Buffer[bufferOffset + 1]);
    }
#endif
#if defined(RGBA32SInt) || defined(RGBA32UInt)
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = uint4(
        _Buffer[bufferOffset], _Buffer[bufferOffset + 1],
        _Buffer[bufferOffset + 2], _Buffer[bufferOffset + 3]);
    }
#endif

#ifdef R16F
    void WritePixel(UVType id, uint bufferOffset){
        uint2 v = GetShort(_Buffer[bufferOffset]);
        _Tex[id] = f16tof32(v.x);
        id = GetNextPixel(id);
        _Tex[id] = f16tof32(v.y);
    }
#endif
#ifdef RG16F
    void WritePixel(UVType id, uint bufferOffset){
        uint2 v = GetShort(_Buffer[bufferOffset]);
        _Tex[id] = f16tof32(v.xy);
    }
#endif
#ifdef RGBA16F
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = uint4(
        GetShort(_Buffer[bufferOffset]),
        GetShort(_Buffer[bufferOffset + 1]));
        _Tex[id] = f16tof32(v);
    }
#endif
#ifdef R32F
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = asfloat(_Buffer[bufferOffset]);
    }
#endif
#ifdef RG32F
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = asfloat(uint2(
        _Buffer[bufferOffset],
        _Buffer[bufferOffset + 1]
        ));
    }
#endif
#ifdef RGBA32F
    void WritePixel(UVType id, uint bufferOffset){
        _Tex[id] = asfloat(uint4(
        _Buffer[bufferOffset],
        _Buffer[bufferOffset + 1],
        _Buffer[bufferOffset + 2],
        _Buffer[bufferOffset + 3]
        ));
    }
#endif
