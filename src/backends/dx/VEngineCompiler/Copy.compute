#include "Include/Sampler.cginc"
cbuffer Params{
    
}
StructuredBuffer<uint> _Buffer;

RWTexture2D<float4> _Float2DTex;
RWTexture2D<uint4> _Int2DTex;
RWTexture3D<float4> _Float3DTex;
RWTexture3D<uint4> _Int3DTex;

#if defined (DIMENSION_2D)
    #define UVType uint2
    #define THREAD_X 8
    #define THREAD_Y 8
    #define THREAD_Z 1

    UVType GetNextPixel(UVType current){
        return 0;
        //TODO
    }
    #define _FloatTex _Float2DTex
    #define _IntTex _Int2DTex
#elif defined (DIMENSION_3D)
    #define THREAD_X 4
    #define THREAD_Y 4
    #define THREAD_Z 4
    #define UVType uint3
    UVType GetNextPixel(UVType current){
        return 0;
        //TODO
    }
    #define _FloatTex _Float3DTex
    #define _IntTex _Int3DTex
#endif

void WritePixel(UVType id, uint bufferOffset);
[numthreads(THREAD_X,THREAD_Y,THREAD_Z)]
void Copy(UVType id : SV_DISPATCHTHREADID){
    //TODO : write pixel
    WritePixel(id, 0);
}

inline uint4 GetByte(uint value){
    uint4 r;
    r.w = value & 255;
    value >>= 8;
    r.z = value & 255;
    value >>= 8;
    r.y = value & 255;
    value >>= 8;
    r.x = value;
    return r;
}
#if defined(R8SInt) || defined(R8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _IntTex[id] = uint4(v.x,0,0,0);
        id = GetNextPixel(id);
        _IntTex[id] = uint4(v.y,0,0,0);
        id = GetNextPixel(id);
        _IntTex[id] = uint4(v.z,0,0,0);
        id = GetNextPixel(id);
        _IntTex[id] = uint4(v.w,0,0,0);
    }
#endif
#ifdef R8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _FloatTex[id] = float4(v.x,0,0,0);
        id = GetNextPixel(id);
        _FloatTex[id] = float4(v.y,0,0,0);
        id = GetNextPixel(id);
        _FloatTex[id] = float4(v.z,0,0,0);
        id = GetNextPixel(id);
        _FloatTex[id] = float4(v.w,0,0,0);
    }
#endif
#if defined(RG8SInt) || defined(RG8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _IntTex[id] = uint4(v.xy,0,0);
        id = GetNextPixel(id);
        _IntTex[id] = uint4(v.zw,0,0);
    }
#endif
#ifdef RG8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _FloatTex[id] = float4(v.xy,0,0);
        id = GetNextPixel(id);
        _FloatTex[id] = float4(v.zw,0,0);
    }
#endif
#if defined(RGBA8SInt) || defined(RGBA8UInt)
    void WritePixel(UVType id, uint bufferOffset){
        uint4 v = GetByte(_Buffer[bufferOffset]);
        _IntTex[id] = v;
    }
#endif
#ifdef RGBA8UNorm
    void WritePixel(UVType id, uint bufferOffset){
        float4 v = GetByte(_Buffer[bufferOffset]) / 255.0;
        _IntTex[id] = v;
    }
#endif
#if defined(R16SInt) || defined(R16UInt)

#endif
#ifdef R16UNorm

#endif
#if defined(RG16SInt) || defined(RG16UInt)

#endif
#ifdef RG16UNorm

#endif
#if defined(RGBA16SInt) || defined(RGBA16UInt)

#endif
#ifdef RGBA16UNorm

#endif

#if defined(R32SInt) || defined(R32UInt)

#endif
#if defined(RG32SInt) || defined(RG32UInt)

#endif
#if defined(RGBA32SInt) || defined(RGBA32UInt)

#endif

#ifdef R16F

#endif
#ifdef RG16F

#endif
#ifdef RGBA16F

#endif
#ifdef R32F

#endif
#ifdef RG32F

#endif
#ifdef RGBA32F

#endif
