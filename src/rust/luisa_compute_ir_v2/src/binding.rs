/* automatically generated by rust-bindgen 0.68.1 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202305;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 1;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 1;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 167] = b"Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this error.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_hardware_interference_size: u32 = 201703;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_hypot: u32 = 201603;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_launder: u32 = 201606;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const __cpp_lib_sample: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_string_view: u32 = 201803;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_execution: u32 = 201603;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN7: u32 = 1537;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1537;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasicBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallableModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KernelModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pool {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhiIncoming {
    pub block: *mut BasicBlock,
    pub value: *mut Node,
}
#[test]
fn bindgen_test_layout_PhiIncoming() {
    const UNINIT: ::std::mem::MaybeUninit<PhiIncoming> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhiIncoming>(),
        16usize,
        concat!("Size of: ", stringify!(PhiIncoming))
    );
    assert_eq!(
        ::std::mem::align_of::<PhiIncoming>(),
        8usize,
        concat!("Alignment of ", stringify!(PhiIncoming))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwitchCase {
    pub value: i32,
    pub block: *mut BasicBlock,
}
#[test]
fn bindgen_test_layout_SwitchCase() {
    const UNINIT: ::std::mem::MaybeUninit<SwitchCase> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SwitchCase>(),
        16usize,
        concat!("Size of: ", stringify!(SwitchCase))
    );
    assert_eq!(
        ::std::mem::align_of::<SwitchCase>(),
        8usize,
        concat!("Alignment of ", stringify!(SwitchCase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuExternFn {
    pub data: *mut ::std::os::raw::c_void,
    pub func: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, args: *mut ::std::os::raw::c_void),
    >,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    pub arg_ty: *const Type,
}
#[test]
fn bindgen_test_layout_CpuExternFn() {
    const UNINIT: ::std::mem::MaybeUninit<CpuExternFn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CpuExternFn>(),
        32usize,
        concat!("Size of: ", stringify!(CpuExternFn))
    );
    assert_eq!(
        ::std::mem::align_of::<CpuExternFn>(),
        8usize,
        concat!("Alignment of ", stringify!(CpuExternFn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_ty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(arg_ty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Func {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZeroFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OneFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AssumeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnreachableFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ThreadIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BlockIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpLaneIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropagateGradientFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OutputGradientFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RequiresGradientFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BackwardFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GradientFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccGradFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DetachFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceTransformFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceVisibilityMaskFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceUserIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceTransformFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceOpacityFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceVisibilityFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceUserIdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingTraceClosestFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingTraceAnyFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingQueryAllFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingQueryAnyFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryWorldSpaceRayFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryProceduralCandidateHitFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryTriangleCandidateHitFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommittedHitFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommitTriangleFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommitdProceduralFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryTerminateFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LoadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CastFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitCastFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AddFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SubFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MulFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DivFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RemFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitAndFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitOrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitXorFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShlFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RotRightFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RotLeftFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EqFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatCompMulFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NegFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NotFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitNotFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AllFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SelectFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClampFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LerpFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StepFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SaturateFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmoothStepFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AbsFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MaxFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceSumFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceProdFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceMinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceMaxFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ClzFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CtzFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PopCountFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReverseFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IsInfFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IsNanFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AcosFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AcoshFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AsinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AsinhFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtanFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Atan2Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtanhFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CosFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CoshFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SinhFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TanFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TanhFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Exp2Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Exp10Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LogFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log2Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log10Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PowiFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PowfFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SqrtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RsqrtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CeilFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FloorFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FractFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TruncFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RoundFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FmaFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CopysignFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CrossFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DotFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OuterProductFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LengthFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LengthSquaredFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NormalizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FaceforwardFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DistanceFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReflectFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeterminantFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransposeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InverseFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpIsFirstActiveLaneFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpFirstActiveLaneFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAllEqualFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitAndFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitOrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitXorFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveCountBitsFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveMaxFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveMinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveProductFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveSumFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAllFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAnyFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitMaskFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixCountBitsFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixSumFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixProductFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpReadLaneAtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpReadFirstLaneFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SynchronizeBlockFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicExchangeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicCompareExchangeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchAddFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchSubFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchAndFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchOrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchXorFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchMinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchMaxFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleGradFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleGradLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSizeLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleGradFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleGradLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSizeLevelFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferWriteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferReadFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferSizeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VecFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec2Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec3Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec4Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PermuteFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GetElementPtrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtractElementFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InsertElementFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrayFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StructFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatFullFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat2Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat3Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat4Fn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicExchangeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicCompareExchangeFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAddFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchSubFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAndFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchOrFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchXorFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMinFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMaxFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallableFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuExtFn {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderExecutionReorderFn {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FuncTag {
    ZERO = 0,
    ONE = 1,
    ASSUME = 2,
    UNREACHABLE = 3,
    THREAD_ID = 4,
    BLOCK_ID = 5,
    WARP_SIZE = 6,
    WARP_LANE_ID = 7,
    DISPATCH_ID = 8,
    DISPATCH_SIZE = 9,
    PROPAGATE_GRADIENT = 10,
    OUTPUT_GRADIENT = 11,
    REQUIRES_GRADIENT = 12,
    BACKWARD = 13,
    GRADIENT = 14,
    ACC_GRAD = 15,
    DETACH = 16,
    RAY_TRACING_INSTANCE_TRANSFORM = 17,
    RAY_TRACING_INSTANCE_VISIBILITY_MASK = 18,
    RAY_TRACING_INSTANCE_USER_ID = 19,
    RAY_TRACING_SET_INSTANCE_TRANSFORM = 20,
    RAY_TRACING_SET_INSTANCE_OPACITY = 21,
    RAY_TRACING_SET_INSTANCE_VISIBILITY = 22,
    RAY_TRACING_SET_INSTANCE_USER_ID = 23,
    RAY_TRACING_TRACE_CLOSEST = 24,
    RAY_TRACING_TRACE_ANY = 25,
    RAY_TRACING_QUERY_ALL = 26,
    RAY_TRACING_QUERY_ANY = 27,
    RAY_QUERY_WORLD_SPACE_RAY = 28,
    RAY_QUERY_PROCEDURAL_CANDIDATE_HIT = 29,
    RAY_QUERY_TRIANGLE_CANDIDATE_HIT = 30,
    RAY_QUERY_COMMITTED_HIT = 31,
    RAY_QUERY_COMMIT_TRIANGLE = 32,
    RAY_QUERY_COMMITD_PROCEDURAL = 33,
    RAY_QUERY_TERMINATE = 34,
    LOAD = 35,
    CAST = 36,
    BIT_CAST = 37,
    ADD = 38,
    SUB = 39,
    MUL = 40,
    DIV = 41,
    REM = 42,
    BIT_AND = 43,
    BIT_OR = 44,
    BIT_XOR = 45,
    SHL = 46,
    SHR = 47,
    ROT_RIGHT = 48,
    ROT_LEFT = 49,
    EQ = 50,
    NE = 51,
    LT = 52,
    LE = 53,
    GT = 54,
    GE = 55,
    MAT_COMP_MUL = 56,
    NEG = 57,
    NOT = 58,
    BIT_NOT = 59,
    ALL = 60,
    ANY = 61,
    SELECT = 62,
    CLAMP = 63,
    LERP = 64,
    STEP = 65,
    SATURATE = 66,
    SMOOTH_STEP = 67,
    ABS = 68,
    MIN = 69,
    MAX = 70,
    REDUCE_SUM = 71,
    REDUCE_PROD = 72,
    REDUCE_MIN = 73,
    REDUCE_MAX = 74,
    CLZ = 75,
    CTZ = 76,
    POP_COUNT = 77,
    REVERSE = 78,
    IS_INF = 79,
    IS_NAN = 80,
    ACOS = 81,
    ACOSH = 82,
    ASIN = 83,
    ASINH = 84,
    ATAN = 85,
    ATAN2 = 86,
    ATANH = 87,
    COS = 88,
    COSH = 89,
    SIN = 90,
    SINH = 91,
    TAN = 92,
    TANH = 93,
    EXP = 94,
    EXP2 = 95,
    EXP10 = 96,
    LOG = 97,
    LOG2 = 98,
    LOG10 = 99,
    POWI = 100,
    POWF = 101,
    SQRT = 102,
    RSQRT = 103,
    CEIL = 104,
    FLOOR = 105,
    FRACT = 106,
    TRUNC = 107,
    ROUND = 108,
    FMA = 109,
    COPYSIGN = 110,
    CROSS = 111,
    DOT = 112,
    OUTER_PRODUCT = 113,
    LENGTH = 114,
    LENGTH_SQUARED = 115,
    NORMALIZE = 116,
    FACEFORWARD = 117,
    DISTANCE = 118,
    REFLECT = 119,
    DETERMINANT = 120,
    TRANSPOSE = 121,
    INVERSE = 122,
    WARP_IS_FIRST_ACTIVE_LANE = 123,
    WARP_FIRST_ACTIVE_LANE = 124,
    WARP_ACTIVE_ALL_EQUAL = 125,
    WARP_ACTIVE_BIT_AND = 126,
    WARP_ACTIVE_BIT_OR = 127,
    WARP_ACTIVE_BIT_XOR = 128,
    WARP_ACTIVE_COUNT_BITS = 129,
    WARP_ACTIVE_MAX = 130,
    WARP_ACTIVE_MIN = 131,
    WARP_ACTIVE_PRODUCT = 132,
    WARP_ACTIVE_SUM = 133,
    WARP_ACTIVE_ALL = 134,
    WARP_ACTIVE_ANY = 135,
    WARP_ACTIVE_BIT_MASK = 136,
    WARP_PREFIX_COUNT_BITS = 137,
    WARP_PREFIX_SUM = 138,
    WARP_PREFIX_PRODUCT = 139,
    WARP_READ_LANE_AT = 140,
    WARP_READ_FIRST_LANE = 141,
    SYNCHRONIZE_BLOCK = 142,
    ATOMIC_EXCHANGE = 143,
    ATOMIC_COMPARE_EXCHANGE = 144,
    ATOMIC_FETCH_ADD = 145,
    ATOMIC_FETCH_SUB = 146,
    ATOMIC_FETCH_AND = 147,
    ATOMIC_FETCH_OR = 148,
    ATOMIC_FETCH_XOR = 149,
    ATOMIC_FETCH_MIN = 150,
    ATOMIC_FETCH_MAX = 151,
    BUFFER_WRITE = 152,
    BUFFER_READ = 153,
    BUFFER_SIZE = 154,
    BYTE_BUFFER_WRITE = 155,
    BYTE_BUFFER_READ = 156,
    BYTE_BUFFER_SIZE = 157,
    TEXTURE2D_READ = 158,
    TEXTURE2D_WRITE = 159,
    TEXTURE2D_SIZE = 160,
    TEXTURE3D_READ = 161,
    TEXTURE3D_WRITE = 162,
    TEXTURE3D_SIZE = 163,
    BINDLESS_TEXTURE2D_SAMPLE = 164,
    BINDLESS_TEXTURE2D_SAMPLE_LEVEL = 165,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD = 166,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL = 167,
    BINDLESS_TEXTURE2D_READ = 168,
    BINDLESS_TEXTURE2D_SIZE = 169,
    BINDLESS_TEXTURE2D_SIZE_LEVEL = 170,
    BINDLESS_TEXTURE3D_SAMPLE = 171,
    BINDLESS_TEXTURE3D_SAMPLE_LEVEL = 172,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD = 173,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL = 174,
    BINDLESS_TEXTURE3D_READ = 175,
    BINDLESS_TEXTURE3D_SIZE = 176,
    BINDLESS_TEXTURE3D_SIZE_LEVEL = 177,
    BINDLESS_BUFFER_WRITE = 178,
    BINDLESS_BUFFER_READ = 179,
    BINDLESS_BUFFER_SIZE = 180,
    BINDLESS_BYTE_BUFFER_WRITE = 181,
    BINDLESS_BYTE_BUFFER_READ = 182,
    BINDLESS_BYTE_BUFFER_SIZE = 183,
    VEC = 184,
    VEC2 = 185,
    VEC3 = 186,
    VEC4 = 187,
    PERMUTE = 188,
    GET_ELEMENT_PTR = 189,
    EXTRACT_ELEMENT = 190,
    INSERT_ELEMENT = 191,
    ARRAY = 192,
    STRUCT = 193,
    MAT_FULL = 194,
    MAT2 = 195,
    MAT3 = 196,
    MAT4 = 197,
    BINDLESS_ATOMIC_EXCHANGE = 198,
    BINDLESS_ATOMIC_COMPARE_EXCHANGE = 199,
    BINDLESS_ATOMIC_FETCH_ADD = 200,
    BINDLESS_ATOMIC_FETCH_SUB = 201,
    BINDLESS_ATOMIC_FETCH_AND = 202,
    BINDLESS_ATOMIC_FETCH_OR = 203,
    BINDLESS_ATOMIC_FETCH_XOR = 204,
    BINDLESS_ATOMIC_FETCH_MIN = 205,
    BINDLESS_ATOMIC_FETCH_MAX = 206,
    CALLABLE = 207,
    CPU_EXT = 208,
    SHADER_EXECUTION_REORDER = 209,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Instruction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessArrayInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SharedInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UniformInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArgumentInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConstantInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhiInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasicBlockSentinelInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IfInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GenericLoopInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwitchInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocalInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BreakInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ContinueInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReturnInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrintInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UpdateInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RevAutodiffInst {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FwdAutodiffInst {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InstructionTag {
    BUFFER = 0,
    TEXTURE2D = 1,
    TEXTURE3D = 2,
    BINDLESS_ARRAY = 3,
    ACCEL = 4,
    SHARED = 5,
    UNIFORM = 6,
    ARGUMENT = 7,
    CONSTANT = 8,
    CALL = 9,
    PHI = 10,
    BASIC_BLOCK_SENTINEL = 11,
    IF = 12,
    GENERIC_LOOP = 13,
    SWITCH = 14,
    LOCAL = 15,
    BREAK = 16,
    CONTINUE = 17,
    RETURN = 18,
    PRINT = 19,
    UPDATE = 20,
    RAY_QUERY = 21,
    REV_AUTODIFF = 22,
    FWD_AUTODIFF = 23,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Binding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextureBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessArrayBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelBinding {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BindingTag {
    BUFFER_BINDING = 0,
    TEXTURE_BINDING = 1,
    BINDLESS_ARRAY_BINDING = 2,
    ACCEL_BINDING = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slice<T> {
    pub data: *mut T,
    pub len: usize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IrV2BindingTable {
    pub Func_as_ZeroFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ZeroFn>,
    pub Func_as_OneFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut OneFn>,
    pub Func_as_AssumeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AssumeFn>,
    pub Func_as_UnreachableFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut UnreachableFn>,
    pub Func_as_ThreadIdFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ThreadIdFn>,
    pub Func_as_BlockIdFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BlockIdFn>,
    pub Func_as_WarpSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpSizeFn>,
    pub Func_as_WarpLaneIdFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpLaneIdFn>,
    pub Func_as_DispatchIdFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DispatchIdFn>,
    pub Func_as_DispatchSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DispatchSizeFn>,
    pub Func_as_PropagateGradientFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PropagateGradientFn>,
    pub Func_as_OutputGradientFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut OutputGradientFn>,
    pub Func_as_RequiresGradientFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RequiresGradientFn>,
    pub Func_as_BackwardFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BackwardFn>,
    pub Func_as_GradientFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut GradientFn>,
    pub Func_as_AccGradFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AccGradFn>,
    pub Func_as_DetachFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DetachFn>,
    pub Func_as_RayTracingInstanceTransformFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceTransformFn,
    >,
    pub Func_as_RayTracingInstanceVisibilityMaskFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceVisibilityMaskFn,
    >,
    pub Func_as_RayTracingInstanceUserIdFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceUserIdFn,
    >,
    pub Func_as_RayTracingSetInstanceTransformFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceTransformFn,
    >,
    pub Func_as_RayTracingSetInstanceOpacityFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceOpacityFn,
    >,
    pub Func_as_RayTracingSetInstanceVisibilityFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceVisibilityFn,
    >,
    pub Func_as_RayTracingSetInstanceUserIdFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceUserIdFn,
    >,
    pub Func_as_RayTracingTraceClosestFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingTraceClosestFn,
    >,
    pub Func_as_RayTracingTraceAnyFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingTraceAnyFn>,
    pub Func_as_RayTracingQueryAllFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingQueryAllFn>,
    pub Func_as_RayTracingQueryAnyFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingQueryAnyFn>,
    pub Func_as_RayQueryWorldSpaceRayFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryWorldSpaceRayFn,
    >,
    pub Func_as_RayQueryProceduralCandidateHitFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryProceduralCandidateHitFn,
    >,
    pub Func_as_RayQueryTriangleCandidateHitFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryTriangleCandidateHitFn,
    >,
    pub Func_as_RayQueryCommittedHitFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommittedHitFn,
    >,
    pub Func_as_RayQueryCommitTriangleFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommitTriangleFn,
    >,
    pub Func_as_RayQueryCommitdProceduralFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommitdProceduralFn,
    >,
    pub Func_as_RayQueryTerminateFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryTerminateFn>,
    pub Func_as_LoadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LoadFn>,
    pub Func_as_CastFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CastFn>,
    pub Func_as_BitCastFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitCastFn>,
    pub Func_as_AddFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AddFn>,
    pub Func_as_SubFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SubFn>,
    pub Func_as_MulFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MulFn>,
    pub Func_as_DivFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DivFn>,
    pub Func_as_RemFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RemFn>,
    pub Func_as_BitAndFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitAndFn>,
    pub Func_as_BitOrFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitOrFn>,
    pub Func_as_BitXorFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitXorFn>,
    pub Func_as_ShlFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ShlFn>,
    pub Func_as_ShrFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ShrFn>,
    pub Func_as_RotRightFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RotRightFn>,
    pub Func_as_RotLeftFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RotLeftFn>,
    pub Func_as_EqFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut EqFn>,
    pub Func_as_NeFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut NeFn>,
    pub Func_as_LtFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LtFn>,
    pub Func_as_LeFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LeFn>,
    pub Func_as_GtFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut GtFn>,
    pub Func_as_GeFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut GeFn>,
    pub Func_as_MatCompMulFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MatCompMulFn>,
    pub Func_as_NegFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut NegFn>,
    pub Func_as_NotFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut NotFn>,
    pub Func_as_BitNotFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitNotFn>,
    pub Func_as_AllFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AllFn>,
    pub Func_as_AnyFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AnyFn>,
    pub Func_as_SelectFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SelectFn>,
    pub Func_as_ClampFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ClampFn>,
    pub Func_as_LerpFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LerpFn>,
    pub Func_as_StepFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut StepFn>,
    pub Func_as_SaturateFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SaturateFn>,
    pub Func_as_SmoothStepFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SmoothStepFn>,
    pub Func_as_AbsFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AbsFn>,
    pub Func_as_MinFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MinFn>,
    pub Func_as_MaxFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MaxFn>,
    pub Func_as_ReduceSumFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceSumFn>,
    pub Func_as_ReduceProdFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceProdFn>,
    pub Func_as_ReduceMinFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceMinFn>,
    pub Func_as_ReduceMaxFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceMaxFn>,
    pub Func_as_ClzFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ClzFn>,
    pub Func_as_CtzFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CtzFn>,
    pub Func_as_PopCountFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PopCountFn>,
    pub Func_as_ReverseFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReverseFn>,
    pub Func_as_IsInfFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut IsInfFn>,
    pub Func_as_IsNanFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut IsNanFn>,
    pub Func_as_AcosFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AcosFn>,
    pub Func_as_AcoshFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AcoshFn>,
    pub Func_as_AsinFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AsinFn>,
    pub Func_as_AsinhFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AsinhFn>,
    pub Func_as_AtanFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtanFn>,
    pub Func_as_Atan2Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Atan2Fn>,
    pub Func_as_AtanhFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtanhFn>,
    pub Func_as_CosFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CosFn>,
    pub Func_as_CoshFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CoshFn>,
    pub Func_as_SinFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SinFn>,
    pub Func_as_SinhFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SinhFn>,
    pub Func_as_TanFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut TanFn>,
    pub Func_as_TanhFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut TanhFn>,
    pub Func_as_ExpFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ExpFn>,
    pub Func_as_Exp2Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Exp2Fn>,
    pub Func_as_Exp10Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Exp10Fn>,
    pub Func_as_LogFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LogFn>,
    pub Func_as_Log2Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Log2Fn>,
    pub Func_as_Log10Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Log10Fn>,
    pub Func_as_PowiFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PowiFn>,
    pub Func_as_PowfFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PowfFn>,
    pub Func_as_SqrtFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SqrtFn>,
    pub Func_as_RsqrtFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RsqrtFn>,
    pub Func_as_CeilFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CeilFn>,
    pub Func_as_FloorFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut FloorFn>,
    pub Func_as_FractFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut FractFn>,
    pub Func_as_TruncFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut TruncFn>,
    pub Func_as_RoundFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RoundFn>,
    pub Func_as_FmaFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut FmaFn>,
    pub Func_as_CopysignFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CopysignFn>,
    pub Func_as_CrossFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CrossFn>,
    pub Func_as_DotFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DotFn>,
    pub Func_as_OuterProductFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut OuterProductFn>,
    pub Func_as_LengthFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LengthFn>,
    pub Func_as_LengthSquaredFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LengthSquaredFn>,
    pub Func_as_NormalizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut NormalizeFn>,
    pub Func_as_FaceforwardFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut FaceforwardFn>,
    pub Func_as_DistanceFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DistanceFn>,
    pub Func_as_ReflectFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReflectFn>,
    pub Func_as_DeterminantFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DeterminantFn>,
    pub Func_as_TransposeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut TransposeFn>,
    pub Func_as_InverseFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut InverseFn>,
    pub Func_as_WarpIsFirstActiveLaneFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut WarpIsFirstActiveLaneFn,
    >,
    pub Func_as_WarpFirstActiveLaneFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpFirstActiveLaneFn>,
    pub Func_as_WarpActiveAllEqualFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAllEqualFn>,
    pub Func_as_WarpActiveBitAndFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitAndFn>,
    pub Func_as_WarpActiveBitOrFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitOrFn>,
    pub Func_as_WarpActiveBitXorFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitXorFn>,
    pub Func_as_WarpActiveCountBitsFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveCountBitsFn>,
    pub Func_as_WarpActiveMaxFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveMaxFn>,
    pub Func_as_WarpActiveMinFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveMinFn>,
    pub Func_as_WarpActiveProductFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveProductFn>,
    pub Func_as_WarpActiveSumFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveSumFn>,
    pub Func_as_WarpActiveAllFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAllFn>,
    pub Func_as_WarpActiveAnyFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAnyFn>,
    pub Func_as_WarpActiveBitMaskFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitMaskFn>,
    pub Func_as_WarpPrefixCountBitsFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixCountBitsFn>,
    pub Func_as_WarpPrefixSumFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixSumFn>,
    pub Func_as_WarpPrefixProductFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixProductFn>,
    pub Func_as_WarpReadLaneAtFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpReadLaneAtFn>,
    pub Func_as_WarpReadFirstLaneFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpReadFirstLaneFn>,
    pub Func_as_SynchronizeBlockFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SynchronizeBlockFn>,
    pub Func_as_AtomicExchangeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicExchangeFn>,
    pub Func_as_AtomicCompareExchangeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicCompareExchangeFn,
    >,
    pub Func_as_AtomicFetchAddFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchAddFn>,
    pub Func_as_AtomicFetchSubFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchSubFn>,
    pub Func_as_AtomicFetchAndFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchAndFn>,
    pub Func_as_AtomicFetchOrFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchOrFn>,
    pub Func_as_AtomicFetchXorFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchXorFn>,
    pub Func_as_AtomicFetchMinFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchMinFn>,
    pub Func_as_AtomicFetchMaxFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchMaxFn>,
    pub Func_as_BufferWriteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferWriteFn>,
    pub Func_as_BufferReadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferReadFn>,
    pub Func_as_BufferSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferSizeFn>,
    pub Func_as_ByteBufferWriteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferWriteFn>,
    pub Func_as_ByteBufferReadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferReadFn>,
    pub Func_as_ByteBufferSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferSizeFn>,
    pub Func_as_Texture2dReadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dReadFn>,
    pub Func_as_Texture2dWriteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dWriteFn>,
    pub Func_as_Texture2dSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dSizeFn>,
    pub Func_as_Texture3dReadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dReadFn>,
    pub Func_as_Texture3dWriteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dWriteFn>,
    pub Func_as_Texture3dSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dSizeFn>,
    pub Func_as_BindlessTexture2dSampleFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleFn,
    >,
    pub Func_as_BindlessTexture2dSampleLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleLevelFn,
    >,
    pub Func_as_BindlessTexture2dSampleGradFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleGradFn,
    >,
    pub Func_as_BindlessTexture2dSampleGradLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleGradLevelFn,
    >,
    pub Func_as_BindlessTexture2dReadFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dReadFn,
    >,
    pub Func_as_BindlessTexture2dSizeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSizeFn,
    >,
    pub Func_as_BindlessTexture2dSizeLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSizeLevelFn,
    >,
    pub Func_as_BindlessTexture3dSampleFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleFn,
    >,
    pub Func_as_BindlessTexture3dSampleLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleLevelFn,
    >,
    pub Func_as_BindlessTexture3dSampleGradFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleGradFn,
    >,
    pub Func_as_BindlessTexture3dSampleGradLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleGradLevelFn,
    >,
    pub Func_as_BindlessTexture3dReadFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dReadFn,
    >,
    pub Func_as_BindlessTexture3dSizeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSizeFn,
    >,
    pub Func_as_BindlessTexture3dSizeLevelFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSizeLevelFn,
    >,
    pub Func_as_BindlessBufferWriteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferWriteFn>,
    pub Func_as_BindlessBufferReadFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferReadFn>,
    pub Func_as_BindlessBufferSizeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferSizeFn>,
    pub Func_as_BindlessByteBufferWriteFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferWriteFn,
    >,
    pub Func_as_BindlessByteBufferReadFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferReadFn,
    >,
    pub Func_as_BindlessByteBufferSizeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferSizeFn,
    >,
    pub Func_as_VecFn: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut VecFn>,
    pub Func_as_Vec2Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec2Fn>,
    pub Func_as_Vec3Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec3Fn>,
    pub Func_as_Vec4Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec4Fn>,
    pub Func_as_PermuteFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PermuteFn>,
    pub Func_as_GetElementPtrFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut GetElementPtrFn>,
    pub Func_as_ExtractElementFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ExtractElementFn>,
    pub Func_as_InsertElementFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut InsertElementFn>,
    pub Func_as_ArrayFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ArrayFn>,
    pub Func_as_StructFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut StructFn>,
    pub Func_as_MatFullFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MatFullFn>,
    pub Func_as_Mat2Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat2Fn>,
    pub Func_as_Mat3Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat3Fn>,
    pub Func_as_Mat4Fn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat4Fn>,
    pub Func_as_BindlessAtomicExchangeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicExchangeFn,
    >,
    pub Func_as_BindlessAtomicCompareExchangeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicCompareExchangeFn,
    >,
    pub Func_as_BindlessAtomicFetchAddFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchAddFn,
    >,
    pub Func_as_BindlessAtomicFetchSubFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchSubFn,
    >,
    pub Func_as_BindlessAtomicFetchAndFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchAndFn,
    >,
    pub Func_as_BindlessAtomicFetchOrFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchOrFn,
    >,
    pub Func_as_BindlessAtomicFetchXorFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchXorFn,
    >,
    pub Func_as_BindlessAtomicFetchMinFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchMinFn,
    >,
    pub Func_as_BindlessAtomicFetchMaxFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchMaxFn,
    >,
    pub Func_as_CallableFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CallableFn>,
    pub Func_as_CpuExtFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CpuExtFn>,
    pub Func_as_ShaderExecutionReorderFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut ShaderExecutionReorderFn,
    >,
    pub Func_tag: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> FuncTag>,
    pub ZeroFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ZeroFn>,
    pub OneFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut OneFn>,
    pub AssumeFn_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut AssumeFn) -> Slice<::std::os::raw::c_char>,
    >,
    pub AssumeFn_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut AssumeFn, value: Slice<::std::os::raw::c_char>),
    >,
    pub AssumeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, msg: Slice<::std::os::raw::c_char>) -> *mut AssumeFn,
    >,
    pub UnreachableFn_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut UnreachableFn) -> Slice<::std::os::raw::c_char>,
    >,
    pub UnreachableFn_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut UnreachableFn, value: Slice<::std::os::raw::c_char>),
    >,
    pub UnreachableFn_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            msg: Slice<::std::os::raw::c_char>,
        ) -> *mut UnreachableFn,
    >,
    pub ThreadIdFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ThreadIdFn>,
    pub BlockIdFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BlockIdFn>,
    pub WarpSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpSizeFn>,
    pub WarpLaneIdFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpLaneIdFn>,
    pub DispatchIdFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DispatchIdFn>,
    pub DispatchSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DispatchSizeFn>,
    pub PropagateGradientFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut PropagateGradientFn>,
    pub OutputGradientFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut OutputGradientFn>,
    pub RequiresGradientFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RequiresGradientFn>,
    pub BackwardFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BackwardFn>,
    pub GradientFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut GradientFn>,
    pub AccGradFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AccGradFn>,
    pub DetachFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DetachFn>,
    pub RayTracingInstanceTransformFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingInstanceTransformFn,
    >,
    pub RayTracingInstanceVisibilityMaskFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingInstanceVisibilityMaskFn,
    >,
    pub RayTracingInstanceUserIdFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingInstanceUserIdFn,
    >,
    pub RayTracingSetInstanceTransformFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingSetInstanceTransformFn,
    >,
    pub RayTracingSetInstanceOpacityFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingSetInstanceOpacityFn,
    >,
    pub RayTracingSetInstanceVisibilityFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingSetInstanceVisibilityFn,
    >,
    pub RayTracingSetInstanceUserIdFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingSetInstanceUserIdFn,
    >,
    pub RayTracingTraceClosestFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingTraceClosestFn,
    >,
    pub RayTracingTraceAnyFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingTraceAnyFn>,
    pub RayTracingQueryAllFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingQueryAllFn>,
    pub RayTracingQueryAnyFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RayTracingQueryAnyFn>,
    pub RayQueryWorldSpaceRayFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryWorldSpaceRayFn,
    >,
    pub RayQueryProceduralCandidateHitFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryProceduralCandidateHitFn,
    >,
    pub RayQueryTriangleCandidateHitFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryTriangleCandidateHitFn,
    >,
    pub RayQueryCommittedHitFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryCommittedHitFn>,
    pub RayQueryCommitTriangleFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryCommitTriangleFn,
    >,
    pub RayQueryCommitdProceduralFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryCommitdProceduralFn,
    >,
    pub RayQueryTerminateFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RayQueryTerminateFn>,
    pub LoadFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LoadFn>,
    pub CastFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CastFn>,
    pub BitCastFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BitCastFn>,
    pub AddFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AddFn>,
    pub SubFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SubFn>,
    pub MulFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut MulFn>,
    pub DivFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DivFn>,
    pub RemFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RemFn>,
    pub BitAndFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BitAndFn>,
    pub BitOrFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BitOrFn>,
    pub BitXorFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BitXorFn>,
    pub ShlFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ShlFn>,
    pub ShrFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ShrFn>,
    pub RotRightFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RotRightFn>,
    pub RotLeftFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RotLeftFn>,
    pub EqFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut EqFn>,
    pub NeFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut NeFn>,
    pub LtFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LtFn>,
    pub LeFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LeFn>,
    pub GtFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut GtFn>,
    pub GeFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut GeFn>,
    pub MatCompMulFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut MatCompMulFn>,
    pub NegFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut NegFn>,
    pub NotFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut NotFn>,
    pub BitNotFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BitNotFn>,
    pub AllFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AllFn>,
    pub AnyFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AnyFn>,
    pub SelectFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SelectFn>,
    pub ClampFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ClampFn>,
    pub LerpFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LerpFn>,
    pub StepFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut StepFn>,
    pub SaturateFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SaturateFn>,
    pub SmoothStepFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SmoothStepFn>,
    pub AbsFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AbsFn>,
    pub MinFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut MinFn>,
    pub MaxFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut MaxFn>,
    pub ReduceSumFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReduceSumFn>,
    pub ReduceProdFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReduceProdFn>,
    pub ReduceMinFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReduceMinFn>,
    pub ReduceMaxFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReduceMaxFn>,
    pub ClzFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ClzFn>,
    pub CtzFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CtzFn>,
    pub PopCountFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut PopCountFn>,
    pub ReverseFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReverseFn>,
    pub IsInfFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut IsInfFn>,
    pub IsNanFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut IsNanFn>,
    pub AcosFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AcosFn>,
    pub AcoshFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AcoshFn>,
    pub AsinFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AsinFn>,
    pub AsinhFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AsinhFn>,
    pub AtanFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtanFn>,
    pub Atan2Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Atan2Fn>,
    pub AtanhFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtanhFn>,
    pub CosFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CosFn>,
    pub CoshFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CoshFn>,
    pub SinFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SinFn>,
    pub SinhFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SinhFn>,
    pub TanFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut TanFn>,
    pub TanhFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut TanhFn>,
    pub ExpFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ExpFn>,
    pub Exp2Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Exp2Fn>,
    pub Exp10Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Exp10Fn>,
    pub LogFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LogFn>,
    pub Log2Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Log2Fn>,
    pub Log10Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Log10Fn>,
    pub PowiFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut PowiFn>,
    pub PowfFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut PowfFn>,
    pub SqrtFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SqrtFn>,
    pub RsqrtFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RsqrtFn>,
    pub CeilFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CeilFn>,
    pub FloorFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut FloorFn>,
    pub FractFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut FractFn>,
    pub TruncFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut TruncFn>,
    pub RoundFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut RoundFn>,
    pub FmaFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut FmaFn>,
    pub CopysignFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CopysignFn>,
    pub CrossFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut CrossFn>,
    pub DotFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DotFn>,
    pub OuterProductFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut OuterProductFn>,
    pub LengthFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LengthFn>,
    pub LengthSquaredFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut LengthSquaredFn>,
    pub NormalizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut NormalizeFn>,
    pub FaceforwardFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut FaceforwardFn>,
    pub DistanceFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DistanceFn>,
    pub ReflectFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ReflectFn>,
    pub DeterminantFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut DeterminantFn>,
    pub TransposeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut TransposeFn>,
    pub InverseFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut InverseFn>,
    pub WarpIsFirstActiveLaneFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpIsFirstActiveLaneFn,
    >,
    pub WarpFirstActiveLaneFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpFirstActiveLaneFn>,
    pub WarpActiveAllEqualFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveAllEqualFn>,
    pub WarpActiveBitAndFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveBitAndFn>,
    pub WarpActiveBitOrFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveBitOrFn>,
    pub WarpActiveBitXorFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveBitXorFn>,
    pub WarpActiveCountBitsFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveCountBitsFn>,
    pub WarpActiveMaxFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveMaxFn>,
    pub WarpActiveMinFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveMinFn>,
    pub WarpActiveProductFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveProductFn>,
    pub WarpActiveSumFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveSumFn>,
    pub WarpActiveAllFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveAllFn>,
    pub WarpActiveAnyFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveAnyFn>,
    pub WarpActiveBitMaskFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpActiveBitMaskFn>,
    pub WarpPrefixCountBitsFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpPrefixCountBitsFn>,
    pub WarpPrefixSumFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpPrefixSumFn>,
    pub WarpPrefixProductFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpPrefixProductFn>,
    pub WarpReadLaneAtFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpReadLaneAtFn>,
    pub WarpReadFirstLaneFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut WarpReadFirstLaneFn>,
    pub SynchronizeBlockFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SynchronizeBlockFn>,
    pub AtomicExchangeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicExchangeFn>,
    pub AtomicCompareExchangeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicCompareExchangeFn,
    >,
    pub AtomicFetchAddFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchAddFn>,
    pub AtomicFetchSubFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchSubFn>,
    pub AtomicFetchAndFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchAndFn>,
    pub AtomicFetchOrFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchOrFn>,
    pub AtomicFetchXorFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchXorFn>,
    pub AtomicFetchMinFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchMinFn>,
    pub AtomicFetchMaxFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AtomicFetchMaxFn>,
    pub BufferWriteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BufferWriteFn>,
    pub BufferReadFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BufferReadFn>,
    pub BufferSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BufferSizeFn>,
    pub ByteBufferWriteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ByteBufferWriteFn>,
    pub ByteBufferReadFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ByteBufferReadFn>,
    pub ByteBufferSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ByteBufferSizeFn>,
    pub Texture2dReadFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture2dReadFn>,
    pub Texture2dWriteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture2dWriteFn>,
    pub Texture2dSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture2dSizeFn>,
    pub Texture3dReadFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture3dReadFn>,
    pub Texture3dWriteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture3dWriteFn>,
    pub Texture3dSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture3dSizeFn>,
    pub BindlessTexture2dSampleFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSampleFn,
    >,
    pub BindlessTexture2dSampleLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSampleLevelFn,
    >,
    pub BindlessTexture2dSampleGradFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSampleGradFn,
    >,
    pub BindlessTexture2dSampleGradLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSampleGradLevelFn,
    >,
    pub BindlessTexture2dReadFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dReadFn,
    >,
    pub BindlessTexture2dSizeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSizeFn,
    >,
    pub BindlessTexture2dSizeLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture2dSizeLevelFn,
    >,
    pub BindlessTexture3dSampleFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSampleFn,
    >,
    pub BindlessTexture3dSampleLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSampleLevelFn,
    >,
    pub BindlessTexture3dSampleGradFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSampleGradFn,
    >,
    pub BindlessTexture3dSampleGradLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSampleGradLevelFn,
    >,
    pub BindlessTexture3dReadFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dReadFn,
    >,
    pub BindlessTexture3dSizeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSizeFn,
    >,
    pub BindlessTexture3dSizeLevelFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessTexture3dSizeLevelFn,
    >,
    pub BindlessBufferWriteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessBufferWriteFn>,
    pub BindlessBufferReadFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessBufferReadFn>,
    pub BindlessBufferSizeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessBufferSizeFn>,
    pub BindlessByteBufferWriteFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessByteBufferWriteFn,
    >,
    pub BindlessByteBufferReadFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessByteBufferReadFn,
    >,
    pub BindlessByteBufferSizeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessByteBufferSizeFn,
    >,
    pub VecFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut VecFn>,
    pub Vec2Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Vec2Fn>,
    pub Vec3Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Vec3Fn>,
    pub Vec4Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Vec4Fn>,
    pub PermuteFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut PermuteFn>,
    pub GetElementPtrFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut GetElementPtrFn>,
    pub ExtractElementFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ExtractElementFn>,
    pub InsertElementFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut InsertElementFn>,
    pub ArrayFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ArrayFn>,
    pub StructFn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut StructFn>,
    pub MatFullFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut MatFullFn>,
    pub Mat2Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Mat2Fn>,
    pub Mat3Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Mat3Fn>,
    pub Mat4Fn_new: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Mat4Fn>,
    pub BindlessAtomicExchangeFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchangeFn) -> *const Type,
    >,
    pub BindlessAtomicExchangeFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchangeFn, value: *const Type),
    >,
    pub BindlessAtomicExchangeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicExchangeFn,
    >,
    pub BindlessAtomicCompareExchangeFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchangeFn) -> *const Type,
    >,
    pub BindlessAtomicCompareExchangeFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchangeFn, value: *const Type),
    >,
    pub BindlessAtomicCompareExchangeFn_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            ty: *const Type,
        ) -> *mut BindlessAtomicCompareExchangeFn,
    >,
    pub BindlessAtomicFetchAddFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAddFn) -> *const Type,
    >,
    pub BindlessAtomicFetchAddFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAddFn, value: *const Type),
    >,
    pub BindlessAtomicFetchAddFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchAddFn,
    >,
    pub BindlessAtomicFetchSubFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSubFn) -> *const Type,
    >,
    pub BindlessAtomicFetchSubFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSubFn, value: *const Type),
    >,
    pub BindlessAtomicFetchSubFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchSubFn,
    >,
    pub BindlessAtomicFetchAndFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAndFn) -> *const Type,
    >,
    pub BindlessAtomicFetchAndFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAndFn, value: *const Type),
    >,
    pub BindlessAtomicFetchAndFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchAndFn,
    >,
    pub BindlessAtomicFetchOrFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOrFn) -> *const Type,
    >,
    pub BindlessAtomicFetchOrFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOrFn, value: *const Type),
    >,
    pub BindlessAtomicFetchOrFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchOrFn,
    >,
    pub BindlessAtomicFetchXorFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXorFn) -> *const Type,
    >,
    pub BindlessAtomicFetchXorFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXorFn, value: *const Type),
    >,
    pub BindlessAtomicFetchXorFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchXorFn,
    >,
    pub BindlessAtomicFetchMinFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMinFn) -> *const Type,
    >,
    pub BindlessAtomicFetchMinFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMinFn, value: *const Type),
    >,
    pub BindlessAtomicFetchMinFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchMinFn,
    >,
    pub BindlessAtomicFetchMaxFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMaxFn) -> *const Type,
    >,
    pub BindlessAtomicFetchMaxFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMaxFn, value: *const Type),
    >,
    pub BindlessAtomicFetchMaxFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> *mut BindlessAtomicFetchMaxFn,
    >,
    pub CallableFn_module:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallableFn) -> *mut CallableModule>,
    pub CallableFn_set_module: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CallableFn, value: *mut CallableModule),
    >,
    pub CallableFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, module: *mut CallableModule) -> *mut CallableFn,
    >,
    pub CpuExtFn_f:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExtFn) -> CpuExternFn>,
    pub CpuExtFn_set_f:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExtFn, value: CpuExternFn)>,
    pub CpuExtFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, f: CpuExternFn) -> *mut CpuExtFn,
    >,
    pub ShaderExecutionReorderFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool) -> *mut ShaderExecutionReorderFn,
    >,
    pub Instruction_as_BufferInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut BufferInst>,
    pub Instruction_as_Texture2dInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Texture2dInst>,
    pub Instruction_as_Texture3dInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Texture3dInst>,
    pub Instruction_as_BindlessArrayInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut BindlessArrayInst,
    >,
    pub Instruction_as_AccelInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut AccelInst>,
    pub Instruction_as_SharedInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut SharedInst>,
    pub Instruction_as_UniformInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut UniformInst>,
    pub Instruction_as_ArgumentInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut ArgumentInst>,
    pub Instruction_as_ConstantInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut ConstantInst>,
    pub Instruction_as_CallInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut CallInst>,
    pub Instruction_as_PhiInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut PhiInst>,
    pub Instruction_as_BasicBlockSentinelInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut BasicBlockSentinelInst,
    >,
    pub Instruction_as_IfInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut IfInst>,
    pub Instruction_as_GenericLoopInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut GenericLoopInst,
    >,
    pub Instruction_as_SwitchInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut SwitchInst>,
    pub Instruction_as_LocalInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut LocalInst>,
    pub Instruction_as_BreakInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut BreakInst>,
    pub Instruction_as_ContinueInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut ContinueInst>,
    pub Instruction_as_ReturnInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut ReturnInst>,
    pub Instruction_as_PrintInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut PrintInst>,
    pub Instruction_as_UpdateInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut UpdateInst>,
    pub Instruction_as_RayQueryInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut RayQueryInst>,
    pub Instruction_as_RevAutodiffInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut RevAutodiffInst,
    >,
    pub Instruction_as_FwdAutodiffInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut FwdAutodiffInst,
    >,
    pub Instruction_tag:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> InstructionTag>,
    pub BufferInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BufferInst>,
    pub Texture2dInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture2dInst>,
    pub Texture3dInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Texture3dInst>,
    pub BindlessArrayInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BindlessArrayInst>,
    pub AccelInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut AccelInst>,
    pub SharedInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut SharedInst>,
    pub UniformInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut UniformInst>,
    pub ArgumentInst_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ArgumentInst) -> bool>,
    pub ArgumentInst_set_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ArgumentInst, value: bool)>,
    pub ArgumentInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, by_value: bool) -> *mut ArgumentInst,
    >,
    pub ConstantInst_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst) -> *const Type>,
    pub ConstantInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst) -> Slice<u8>>,
    pub ConstantInst_set_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst, value: *const Type)>,
    pub ConstantInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst, value: Slice<u8>)>,
    pub ConstantInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            ty: *const Type,
            value: Slice<u8>,
        ) -> *mut ConstantInst,
    >,
    pub CallInst_func:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst) -> *const Func>,
    pub CallInst_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst) -> Slice<*mut Node>>,
    pub CallInst_set_func:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst, value: *const Func)>,
    pub CallInst_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst, value: Slice<*mut Node>)>,
    pub CallInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            func: *const Func,
            args: Slice<*mut Node>,
        ) -> *mut CallInst,
    >,
    pub PhiInst_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PhiInst) -> Slice<PhiIncoming>>,
    pub PhiInst_set_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PhiInst, value: Slice<PhiIncoming>)>,
    pub PhiInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, incomings: Slice<PhiIncoming>) -> *mut PhiInst,
    >,
    pub BasicBlockSentinelInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BasicBlockSentinelInst>,
    pub IfInst_cond: ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *mut Node>,
    pub IfInst_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *mut BasicBlock>,
    pub IfInst_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *mut BasicBlock>,
    pub IfInst_set_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *mut Node)>,
    pub IfInst_set_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *mut BasicBlock)>,
    pub IfInst_set_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *mut BasicBlock)>,
    pub IfInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            cond: *mut Node,
            true_branch: *mut BasicBlock,
            false_branch: *mut BasicBlock,
        ) -> *mut IfInst,
    >,
    pub GenericLoopInst_prepare:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *mut BasicBlock>,
    pub GenericLoopInst_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *mut Node>,
    pub GenericLoopInst_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *mut BasicBlock>,
    pub GenericLoopInst_update:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *mut BasicBlock>,
    pub GenericLoopInst_set_prepare: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *mut BasicBlock),
    >,
    pub GenericLoopInst_set_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *mut Node)>,
    pub GenericLoopInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *mut BasicBlock),
    >,
    pub GenericLoopInst_set_update: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *mut BasicBlock),
    >,
    pub GenericLoopInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            prepare: *mut BasicBlock,
            cond: *mut Node,
            body: *mut BasicBlock,
            update: *mut BasicBlock,
        ) -> *mut GenericLoopInst,
    >,
    pub SwitchInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> *mut Node>,
    pub SwitchInst_cases:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> Slice<SwitchCase>>,
    pub SwitchInst_default_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> *mut BasicBlock>,
    pub SwitchInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst, value: *mut Node)>,
    pub SwitchInst_set_cases: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut SwitchInst, value: Slice<SwitchCase>),
    >,
    pub SwitchInst_set_default_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst, value: *mut BasicBlock)>,
    pub SwitchInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            value: *mut Node,
            cases: Slice<SwitchCase>,
            default_: *mut BasicBlock,
        ) -> *mut SwitchInst,
    >,
    pub LocalInst_init:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LocalInst) -> *mut Node>,
    pub LocalInst_set_init:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LocalInst, value: *mut Node)>,
    pub LocalInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, init: *mut Node) -> *mut LocalInst,
    >,
    pub BreakInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut BreakInst>,
    pub ContinueInst_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut ContinueInst>,
    pub ReturnInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ReturnInst) -> *mut Node>,
    pub ReturnInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ReturnInst, value: *mut Node)>,
    pub ReturnInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, value: *mut Node) -> *mut ReturnInst,
    >,
    pub PrintInst_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut PrintInst) -> Slice<::std::os::raw::c_char>,
    >,
    pub PrintInst_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PrintInst) -> Slice<*mut Node>>,
    pub PrintInst_set_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut PrintInst, value: Slice<::std::os::raw::c_char>),
    >,
    pub PrintInst_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PrintInst, value: Slice<*mut Node>)>,
    pub PrintInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            fmt: Slice<::std::os::raw::c_char>,
            args: Slice<*mut Node>,
        ) -> *mut PrintInst,
    >,
    pub UpdateInst_var:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst) -> *mut Node>,
    pub UpdateInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst) -> *mut Node>,
    pub UpdateInst_set_var:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst, value: *mut Node)>,
    pub UpdateInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst, value: *mut Node)>,
    pub UpdateInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, var: *mut Node, value: *mut Node) -> *mut UpdateInst,
    >,
    pub RayQueryInst_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *mut Node>,
    pub RayQueryInst_on_triangle_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *mut BasicBlock>,
    pub RayQueryInst_on_procedural_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *mut BasicBlock>,
    pub RayQueryInst_set_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst, value: *mut Node)>,
    pub RayQueryInst_set_on_triangle_hit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RayQueryInst, value: *mut BasicBlock),
    >,
    pub RayQueryInst_set_on_procedural_hit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RayQueryInst, value: *mut BasicBlock),
    >,
    pub RayQueryInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            query: *mut Node,
            on_triangle_hit: *mut BasicBlock,
            on_procedural_hit: *mut BasicBlock,
        ) -> *mut RayQueryInst,
    >,
    pub RevAutodiffInst_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RevAutodiffInst) -> *mut BasicBlock>,
    pub RevAutodiffInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RevAutodiffInst, value: *mut BasicBlock),
    >,
    pub RevAutodiffInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, body: *mut BasicBlock) -> *mut RevAutodiffInst,
    >,
    pub FwdAutodiffInst_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FwdAutodiffInst) -> *mut BasicBlock>,
    pub FwdAutodiffInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FwdAutodiffInst, value: *mut BasicBlock),
    >,
    pub FwdAutodiffInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, body: *mut BasicBlock) -> *mut FwdAutodiffInst,
    >,
    pub Binding_as_BufferBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut BufferBinding>,
    pub Binding_as_TextureBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut TextureBinding>,
    pub Binding_as_BindlessArrayBinding: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Binding) -> *mut BindlessArrayBinding,
    >,
    pub Binding_as_AccelBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut AccelBinding>,
    pub Binding_tag: ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> BindingTag>,
    pub BufferBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            handle: u64,
            offset: u64,
            size: u64,
        ) -> *mut BufferBinding,
    >,
    pub TextureBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub TextureBinding_set_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub TextureBinding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, handle: u64, level: u64) -> *mut TextureBinding,
    >,
    pub BindlessArrayBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding) -> u64>,
    pub BindlessArrayBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding, value: u64)>,
    pub BindlessArrayBinding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, handle: u64) -> *mut BindlessArrayBinding,
    >,
    pub AccelBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding) -> u64>,
    pub AccelBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding, value: u64)>,
    pub AccelBinding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, handle: u64) -> *mut AccelBinding,
    >,
}
#[test]
fn bindgen_test_layout_IrV2BindingTable() {
    const UNINIT: ::std::mem::MaybeUninit<IrV2BindingTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IrV2BindingTable>(),
        4584usize,
        concat!("Size of: ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IrV2BindingTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ZeroFn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ZeroFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_OneFn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_OneFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AssumeFn) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AssumeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_UnreachableFn) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_UnreachableFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ThreadIdFn) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ThreadIdFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BlockIdFn) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BlockIdFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpSizeFn) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpLaneIdFn) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpLaneIdFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DispatchIdFn) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DispatchIdFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DispatchSizeFn) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DispatchSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PropagateGradientFn) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PropagateGradientFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_OutputGradientFn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_OutputGradientFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RequiresGradientFn) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RequiresGradientFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BackwardFn) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BackwardFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_GradientFn) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_GradientFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AccGradFn) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AccGradFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DetachFn) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DetachFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceTransformFn) as usize
                - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceTransformFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceVisibilityMaskFn) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceVisibilityMaskFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceUserIdFn) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceUserIdFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceTransformFn) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceTransformFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceOpacityFn) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceOpacityFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceVisibilityFn) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceVisibilityFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceUserIdFn) as usize
                - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceUserIdFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingTraceClosestFn) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingTraceClosestFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingTraceAnyFn) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingTraceAnyFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingQueryAllFn) as usize - ptr as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingQueryAllFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingQueryAnyFn) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingQueryAnyFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryWorldSpaceRayFn) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryWorldSpaceRayFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryProceduralCandidateHitFn) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryProceduralCandidateHitFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryTriangleCandidateHitFn) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryTriangleCandidateHitFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommittedHitFn) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommittedHitFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommitTriangleFn) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommitTriangleFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommitdProceduralFn) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommitdProceduralFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RayQueryTerminateFn) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryTerminateFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LoadFn) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LoadFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CastFn) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CastFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitCastFn) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitCastFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AddFn) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AddFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SubFn) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SubFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MulFn) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MulFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DivFn) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DivFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RemFn) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RemFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitAndFn) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitAndFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitOrFn) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitOrFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitXorFn) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitXorFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ShlFn) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ShlFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ShrFn) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ShrFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RotRightFn) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RotRightFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RotLeftFn) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RotLeftFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_EqFn) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_EqFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_NeFn) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_NeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LtFn) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LeFn) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_GtFn) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_GtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_GeFn) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_GeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MatCompMulFn) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MatCompMulFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_NegFn) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_NegFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_NotFn) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_NotFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitNotFn) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitNotFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AllFn) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AllFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AnyFn) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AnyFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SelectFn) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SelectFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ClampFn) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ClampFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LerpFn) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LerpFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_StepFn) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_StepFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SaturateFn) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SaturateFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SmoothStepFn) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SmoothStepFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AbsFn) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AbsFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MinFn) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MaxFn) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceSumFn) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceSumFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceProdFn) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceProdFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceMinFn) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceMinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceMaxFn) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceMaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ClzFn) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ClzFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CtzFn) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CtzFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PopCountFn) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PopCountFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReverseFn) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReverseFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_IsInfFn) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_IsInfFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_IsNanFn) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_IsNanFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AcosFn) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AcosFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AcoshFn) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AcoshFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AsinFn) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AsinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AsinhFn) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AsinhFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtanFn) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtanFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Atan2Fn) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Atan2Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtanhFn) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtanhFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CosFn) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CosFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CoshFn) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CoshFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SinFn) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SinhFn) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SinhFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_TanFn) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_TanFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_TanhFn) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_TanhFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ExpFn) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ExpFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Exp2Fn) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Exp2Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Exp10Fn) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Exp10Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LogFn) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LogFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Log2Fn) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Log2Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Log10Fn) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Log10Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PowiFn) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PowiFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PowfFn) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PowfFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SqrtFn) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SqrtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RsqrtFn) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RsqrtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CeilFn) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CeilFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_FloorFn) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_FloorFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_FractFn) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_FractFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_TruncFn) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_TruncFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RoundFn) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RoundFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_FmaFn) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_FmaFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CopysignFn) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CopysignFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CrossFn) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CrossFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DotFn) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DotFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_OuterProductFn) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_OuterProductFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LengthFn) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LengthFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LengthSquaredFn) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LengthSquaredFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_NormalizeFn) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_NormalizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_FaceforwardFn) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_FaceforwardFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DistanceFn) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DistanceFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReflectFn) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReflectFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DeterminantFn) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DeterminantFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_TransposeFn) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_TransposeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_InverseFn) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_InverseFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpIsFirstActiveLaneFn) as usize - ptr as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpIsFirstActiveLaneFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpFirstActiveLaneFn) as usize - ptr as usize
        },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpFirstActiveLaneFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAllEqualFn) as usize - ptr as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAllEqualFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitAndFn) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitAndFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitOrFn) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitOrFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitXorFn) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitXorFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveCountBitsFn) as usize - ptr as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveCountBitsFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveMaxFn) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveMaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveMinFn) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveMinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveProductFn) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveProductFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveSumFn) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveSumFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAllFn) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAllFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAnyFn) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAnyFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitMaskFn) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitMaskFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixCountBitsFn) as usize - ptr as usize
        },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixCountBitsFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixSumFn) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixSumFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixProductFn) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixProductFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpReadLaneAtFn) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpReadLaneAtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpReadFirstLaneFn) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpReadFirstLaneFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SynchronizeBlockFn) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SynchronizeBlockFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicExchangeFn) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicExchangeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_AtomicCompareExchangeFn) as usize - ptr as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicCompareExchangeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchAddFn) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchAddFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchSubFn) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchSubFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchAndFn) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchAndFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchOrFn) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchOrFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchXorFn) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchXorFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchMinFn) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchMinFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchMaxFn) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchMaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferWriteFn) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferWriteFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferReadFn) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferReadFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferSizeFn) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferWriteFn) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferWriteFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferReadFn) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferReadFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferSizeFn) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dReadFn) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dReadFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dWriteFn) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dWriteFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dSizeFn) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dReadFn) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dReadFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dWriteFn) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dWriteFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dSizeFn) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dSizeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleFn) as usize - ptr as usize
        },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleLevelFn) as usize
                - ptr as usize
        },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleGradFn) as usize
                - ptr as usize
        },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleGradFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleGradLevelFn) as usize
                - ptr as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleGradLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dReadFn) as usize - ptr as usize
        },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dReadFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSizeFn) as usize - ptr as usize
        },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSizeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSizeLevelFn) as usize
                - ptr as usize
        },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSizeLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleFn) as usize - ptr as usize
        },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleLevelFn) as usize
                - ptr as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleGradFn) as usize
                - ptr as usize
        },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleGradFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleGradLevelFn) as usize
                - ptr as usize
        },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleGradLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dReadFn) as usize - ptr as usize
        },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dReadFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSizeFn) as usize - ptr as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSizeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSizeLevelFn) as usize
                - ptr as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSizeLevelFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferWriteFn) as usize - ptr as usize
        },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferWriteFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferReadFn) as usize - ptr as usize
        },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferReadFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferSizeFn) as usize - ptr as usize
        },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferSizeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferWriteFn) as usize - ptr as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferWriteFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferReadFn) as usize - ptr as usize
        },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferReadFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferSizeFn) as usize - ptr as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferSizeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_VecFn) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_VecFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec2Fn) as usize - ptr as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec2Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec3Fn) as usize - ptr as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec3Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec4Fn) as usize - ptr as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec4Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PermuteFn) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PermuteFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_GetElementPtrFn) as usize - ptr as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_GetElementPtrFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ExtractElementFn) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ExtractElementFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_InsertElementFn) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_InsertElementFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ArrayFn) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ArrayFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_StructFn) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_StructFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MatFullFn) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MatFullFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat2Fn) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat2Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat3Fn) as usize - ptr as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat3Fn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat4Fn) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat4Fn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicExchangeFn) as usize - ptr as usize
        },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicExchangeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicCompareExchangeFn) as usize
                - ptr as usize
        },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicCompareExchangeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAddFn) as usize - ptr as usize
        },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAddFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchSubFn) as usize - ptr as usize
        },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchSubFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAndFn) as usize - ptr as usize
        },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAndFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchOrFn) as usize - ptr as usize
        },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchOrFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchXorFn) as usize - ptr as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchXorFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMinFn) as usize - ptr as usize
        },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMinFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMaxFn) as usize - ptr as usize
        },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CallableFn) as usize - ptr as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CallableFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CpuExtFn) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CpuExtFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_ShaderExecutionReorderFn) as usize - ptr as usize
        },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ShaderExecutionReorderFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_tag) as usize - ptr as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ZeroFn_new) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ZeroFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OneFn_new) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(OneFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_msg) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_set_msg) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_new) as usize - ptr as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_msg) as usize - ptr as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_set_msg) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_new) as usize - ptr as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ThreadIdFn_new) as usize - ptr as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ThreadIdFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BlockIdFn_new) as usize - ptr as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BlockIdFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpSizeFn_new) as usize - ptr as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpLaneIdFn_new) as usize - ptr as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpLaneIdFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DispatchIdFn_new) as usize - ptr as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DispatchIdFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DispatchSizeFn_new) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DispatchSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PropagateGradientFn_new) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PropagateGradientFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OutputGradientFn_new) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(OutputGradientFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RequiresGradientFn_new) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RequiresGradientFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BackwardFn_new) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BackwardFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GradientFn_new) as usize - ptr as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GradientFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccGradFn_new) as usize - ptr as usize },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccGradFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DetachFn_new) as usize - ptr as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DetachFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingInstanceTransformFn_new) as usize - ptr as usize
        },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingInstanceTransformFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingInstanceVisibilityMaskFn_new) as usize
                - ptr as usize
        },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingInstanceVisibilityMaskFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingInstanceUserIdFn_new) as usize - ptr as usize
        },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingInstanceUserIdFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingSetInstanceTransformFn_new) as usize
                - ptr as usize
        },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingSetInstanceTransformFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingSetInstanceOpacityFn_new) as usize - ptr as usize
        },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingSetInstanceOpacityFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingSetInstanceVisibilityFn_new) as usize
                - ptr as usize
        },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingSetInstanceVisibilityFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingSetInstanceUserIdFn_new) as usize - ptr as usize
        },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingSetInstanceUserIdFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayTracingTraceClosestFn_new) as usize - ptr as usize
        },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingTraceClosestFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayTracingTraceAnyFn_new) as usize - ptr as usize },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingTraceAnyFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayTracingQueryAllFn_new) as usize - ptr as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingQueryAllFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayTracingQueryAnyFn_new) as usize - ptr as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayTracingQueryAnyFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryWorldSpaceRayFn_new) as usize - ptr as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryWorldSpaceRayFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryProceduralCandidateHitFn_new) as usize
                - ptr as usize
        },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryProceduralCandidateHitFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryTriangleCandidateHitFn_new) as usize - ptr as usize
        },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryTriangleCandidateHitFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryCommittedHitFn_new) as usize - ptr as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryCommittedHitFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryCommitTriangleFn_new) as usize - ptr as usize
        },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryCommitTriangleFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryCommitdProceduralFn_new) as usize - ptr as usize
        },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryCommitdProceduralFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryTerminateFn_new) as usize - ptr as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryTerminateFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LoadFn_new) as usize - ptr as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LoadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CastFn_new) as usize - ptr as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CastFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitCastFn_new) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BitCastFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AddFn_new) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AddFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SubFn_new) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SubFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MulFn_new) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(MulFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DivFn_new) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DivFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RemFn_new) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RemFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitAndFn_new) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BitAndFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitOrFn_new) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BitOrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitXorFn_new) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BitXorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShlFn_new) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ShlFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShrFn_new) as usize - ptr as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ShrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RotRightFn_new) as usize - ptr as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RotRightFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RotLeftFn_new) as usize - ptr as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RotLeftFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).EqFn_new) as usize - ptr as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(EqFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NeFn_new) as usize - ptr as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(NeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LtFn_new) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LeFn_new) as usize - ptr as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GtFn_new) as usize - ptr as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GeFn_new) as usize - ptr as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MatCompMulFn_new) as usize - ptr as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(MatCompMulFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NegFn_new) as usize - ptr as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(NegFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NotFn_new) as usize - ptr as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(NotFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BitNotFn_new) as usize - ptr as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BitNotFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllFn_new) as usize - ptr as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AllFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnyFn_new) as usize - ptr as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AnyFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectFn_new) as usize - ptr as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SelectFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClampFn_new) as usize - ptr as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ClampFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LerpFn_new) as usize - ptr as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LerpFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StepFn_new) as usize - ptr as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(StepFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SaturateFn_new) as usize - ptr as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SaturateFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SmoothStepFn_new) as usize - ptr as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SmoothStepFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AbsFn_new) as usize - ptr as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AbsFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinFn_new) as usize - ptr as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(MinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxFn_new) as usize - ptr as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(MaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReduceSumFn_new) as usize - ptr as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReduceSumFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReduceProdFn_new) as usize - ptr as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReduceProdFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReduceMinFn_new) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReduceMinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReduceMaxFn_new) as usize - ptr as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReduceMaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ClzFn_new) as usize - ptr as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ClzFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CtzFn_new) as usize - ptr as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CtzFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PopCountFn_new) as usize - ptr as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PopCountFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReverseFn_new) as usize - ptr as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReverseFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsInfFn_new) as usize - ptr as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IsInfFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsNanFn_new) as usize - ptr as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IsNanFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcosFn_new) as usize - ptr as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AcosFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcoshFn_new) as usize - ptr as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AcoshFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AsinFn_new) as usize - ptr as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AsinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AsinhFn_new) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AsinhFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtanFn_new) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtanFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Atan2Fn_new) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Atan2Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtanhFn_new) as usize - ptr as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtanhFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CosFn_new) as usize - ptr as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CosFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CoshFn_new) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CoshFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SinFn_new) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SinhFn_new) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SinhFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TanFn_new) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TanFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TanhFn_new) as usize - ptr as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TanhFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExpFn_new) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ExpFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Exp2Fn_new) as usize - ptr as usize },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Exp2Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Exp10Fn_new) as usize - ptr as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Exp10Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LogFn_new) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LogFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Log2Fn_new) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Log2Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Log10Fn_new) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Log10Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PowiFn_new) as usize - ptr as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PowiFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PowfFn_new) as usize - ptr as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PowfFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SqrtFn_new) as usize - ptr as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SqrtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RsqrtFn_new) as usize - ptr as usize },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RsqrtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CeilFn_new) as usize - ptr as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CeilFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FloorFn_new) as usize - ptr as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FloorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FractFn_new) as usize - ptr as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FractFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TruncFn_new) as usize - ptr as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TruncFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RoundFn_new) as usize - ptr as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RoundFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FmaFn_new) as usize - ptr as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FmaFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CopysignFn_new) as usize - ptr as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CopysignFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CrossFn_new) as usize - ptr as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CrossFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DotFn_new) as usize - ptr as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DotFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OuterProductFn_new) as usize - ptr as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(OuterProductFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LengthFn_new) as usize - ptr as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LengthFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LengthSquaredFn_new) as usize - ptr as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LengthSquaredFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NormalizeFn_new) as usize - ptr as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(NormalizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FaceforwardFn_new) as usize - ptr as usize },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FaceforwardFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DistanceFn_new) as usize - ptr as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DistanceFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReflectFn_new) as usize - ptr as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReflectFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DeterminantFn_new) as usize - ptr as usize },
        2680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(DeterminantFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransposeFn_new) as usize - ptr as usize },
        2688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TransposeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InverseFn_new) as usize - ptr as usize },
        2696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(InverseFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpIsFirstActiveLaneFn_new) as usize - ptr as usize },
        2704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpIsFirstActiveLaneFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpFirstActiveLaneFn_new) as usize - ptr as usize },
        2712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpFirstActiveLaneFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveAllEqualFn_new) as usize - ptr as usize },
        2720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveAllEqualFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveBitAndFn_new) as usize - ptr as usize },
        2728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveBitAndFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveBitOrFn_new) as usize - ptr as usize },
        2736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveBitOrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveBitXorFn_new) as usize - ptr as usize },
        2744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveBitXorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveCountBitsFn_new) as usize - ptr as usize },
        2752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveCountBitsFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveMaxFn_new) as usize - ptr as usize },
        2760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveMaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveMinFn_new) as usize - ptr as usize },
        2768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveMinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveProductFn_new) as usize - ptr as usize },
        2776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveProductFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveSumFn_new) as usize - ptr as usize },
        2784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveSumFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveAllFn_new) as usize - ptr as usize },
        2792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveAllFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveAnyFn_new) as usize - ptr as usize },
        2800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveAnyFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpActiveBitMaskFn_new) as usize - ptr as usize },
        2808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpActiveBitMaskFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpPrefixCountBitsFn_new) as usize - ptr as usize },
        2816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpPrefixCountBitsFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpPrefixSumFn_new) as usize - ptr as usize },
        2824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpPrefixSumFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpPrefixProductFn_new) as usize - ptr as usize },
        2832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpPrefixProductFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpReadLaneAtFn_new) as usize - ptr as usize },
        2840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpReadLaneAtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).WarpReadFirstLaneFn_new) as usize - ptr as usize },
        2848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(WarpReadFirstLaneFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SynchronizeBlockFn_new) as usize - ptr as usize },
        2856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SynchronizeBlockFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicExchangeFn_new) as usize - ptr as usize },
        2864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicCompareExchangeFn_new) as usize - ptr as usize },
        2872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicCompareExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchAddFn_new) as usize - ptr as usize },
        2880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchAddFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchSubFn_new) as usize - ptr as usize },
        2888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchSubFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchAndFn_new) as usize - ptr as usize },
        2896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchAndFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchOrFn_new) as usize - ptr as usize },
        2904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchOrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchXorFn_new) as usize - ptr as usize },
        2912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchXorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchMinFn_new) as usize - ptr as usize },
        2920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchMinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AtomicFetchMaxFn_new) as usize - ptr as usize },
        2928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AtomicFetchMaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferWriteFn_new) as usize - ptr as usize },
        2936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferWriteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferReadFn_new) as usize - ptr as usize },
        2944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferSizeFn_new) as usize - ptr as usize },
        2952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteBufferWriteFn_new) as usize - ptr as usize },
        2960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ByteBufferWriteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteBufferReadFn_new) as usize - ptr as usize },
        2968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ByteBufferReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ByteBufferSizeFn_new) as usize - ptr as usize },
        2976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ByteBufferSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture2dReadFn_new) as usize - ptr as usize },
        2984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture2dReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture2dWriteFn_new) as usize - ptr as usize },
        2992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture2dWriteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture2dSizeFn_new) as usize - ptr as usize },
        3000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture2dSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture3dReadFn_new) as usize - ptr as usize },
        3008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture3dReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture3dWriteFn_new) as usize - ptr as usize },
        3016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture3dWriteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture3dSizeFn_new) as usize - ptr as usize },
        3024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture3dSizeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture2dSampleFn_new) as usize - ptr as usize
        },
        3032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSampleFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture2dSampleLevelFn_new) as usize - ptr as usize
        },
        3040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSampleLevelFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture2dSampleGradFn_new) as usize - ptr as usize
        },
        3048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSampleGradFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture2dSampleGradLevelFn_new) as usize
                - ptr as usize
        },
        3056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSampleGradLevelFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessTexture2dReadFn_new) as usize - ptr as usize },
        3064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessTexture2dSizeFn_new) as usize - ptr as usize },
        3072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSizeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture2dSizeLevelFn_new) as usize - ptr as usize
        },
        3080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture2dSizeLevelFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture3dSampleFn_new) as usize - ptr as usize
        },
        3088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSampleFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture3dSampleLevelFn_new) as usize - ptr as usize
        },
        3096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSampleLevelFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture3dSampleGradFn_new) as usize - ptr as usize
        },
        3104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSampleGradFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture3dSampleGradLevelFn_new) as usize
                - ptr as usize
        },
        3112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSampleGradLevelFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessTexture3dReadFn_new) as usize - ptr as usize },
        3120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessTexture3dSizeFn_new) as usize - ptr as usize },
        3128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSizeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessTexture3dSizeLevelFn_new) as usize - ptr as usize
        },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessTexture3dSizeLevelFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessBufferWriteFn_new) as usize - ptr as usize },
        3144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessBufferWriteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessBufferReadFn_new) as usize - ptr as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessBufferReadFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessBufferSizeFn_new) as usize - ptr as usize },
        3160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessBufferSizeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessByteBufferWriteFn_new) as usize - ptr as usize
        },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessByteBufferWriteFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessByteBufferReadFn_new) as usize - ptr as usize
        },
        3176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessByteBufferReadFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessByteBufferSizeFn_new) as usize - ptr as usize
        },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessByteBufferSizeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).VecFn_new) as usize - ptr as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(VecFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vec2Fn_new) as usize - ptr as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Vec2Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vec3Fn_new) as usize - ptr as usize },
        3208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Vec3Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vec4Fn_new) as usize - ptr as usize },
        3216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Vec4Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PermuteFn_new) as usize - ptr as usize },
        3224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PermuteFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GetElementPtrFn_new) as usize - ptr as usize },
        3232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GetElementPtrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ExtractElementFn_new) as usize - ptr as usize },
        3240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ExtractElementFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InsertElementFn_new) as usize - ptr as usize },
        3248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(InsertElementFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArrayFn_new) as usize - ptr as usize },
        3256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArrayFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StructFn_new) as usize - ptr as usize },
        3264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(StructFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MatFullFn_new) as usize - ptr as usize },
        3272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(MatFullFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mat2Fn_new) as usize - ptr as usize },
        3280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Mat2Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mat3Fn_new) as usize - ptr as usize },
        3288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Mat3Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mat4Fn_new) as usize - ptr as usize },
        3296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Mat4Fn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_ty) as usize - ptr as usize },
        3304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_set_ty) as usize - ptr as usize
        },
        3312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_new) as usize - ptr as usize
        },
        3320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_ty) as usize - ptr as usize
        },
        3328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_set_ty) as usize
                - ptr as usize
        },
        3336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_new) as usize - ptr as usize
        },
        3344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_ty) as usize - ptr as usize },
        3352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_set_ty) as usize - ptr as usize
        },
        3360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_new) as usize - ptr as usize
        },
        3368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_ty) as usize - ptr as usize },
        3376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_set_ty) as usize - ptr as usize
        },
        3384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_new) as usize - ptr as usize
        },
        3392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_ty) as usize - ptr as usize },
        3400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_set_ty) as usize - ptr as usize
        },
        3408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_new) as usize - ptr as usize
        },
        3416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_ty) as usize - ptr as usize },
        3424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_set_ty) as usize - ptr as usize
        },
        3432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_new) as usize - ptr as usize },
        3440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_ty) as usize - ptr as usize },
        3448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_set_ty) as usize - ptr as usize
        },
        3456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_new) as usize - ptr as usize
        },
        3464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_ty) as usize - ptr as usize },
        3472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_set_ty) as usize - ptr as usize
        },
        3480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_new) as usize - ptr as usize
        },
        3488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_ty) as usize - ptr as usize },
        3496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_set_ty) as usize - ptr as usize
        },
        3504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_new) as usize - ptr as usize
        },
        3512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_module) as usize - ptr as usize },
        3520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_set_module) as usize - ptr as usize },
        3528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_set_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_new) as usize - ptr as usize },
        3536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_f) as usize - ptr as usize },
        3544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_set_f) as usize - ptr as usize },
        3552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_set_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_new) as usize - ptr as usize },
        3560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).ShaderExecutionReorderFn_new) as usize - ptr as usize
        },
        3568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ShaderExecutionReorderFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_BufferInst) as usize - ptr as usize },
        3576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BufferInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_Texture2dInst) as usize - ptr as usize
        },
        3584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Texture2dInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_Texture3dInst) as usize - ptr as usize
        },
        3592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Texture3dInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_BindlessArrayInst) as usize - ptr as usize
        },
        3600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BindlessArrayInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_AccelInst) as usize - ptr as usize },
        3608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_AccelInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_SharedInst) as usize - ptr as usize },
        3616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_SharedInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_UniformInst) as usize - ptr as usize },
        3624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_UniformInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ArgumentInst) as usize - ptr as usize },
        3632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ArgumentInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ConstantInst) as usize - ptr as usize },
        3640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ConstantInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_CallInst) as usize - ptr as usize },
        3648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_CallInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_PhiInst) as usize - ptr as usize },
        3656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_PhiInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_BasicBlockSentinelInst) as usize
                - ptr as usize
        },
        3664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BasicBlockSentinelInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_IfInst) as usize - ptr as usize },
        3672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_IfInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_GenericLoopInst) as usize - ptr as usize
        },
        3680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_GenericLoopInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_SwitchInst) as usize - ptr as usize },
        3688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_SwitchInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_LocalInst) as usize - ptr as usize },
        3696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_LocalInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_BreakInst) as usize - ptr as usize },
        3704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BreakInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ContinueInst) as usize - ptr as usize },
        3712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ContinueInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ReturnInst) as usize - ptr as usize },
        3720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ReturnInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_PrintInst) as usize - ptr as usize },
        3728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_PrintInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_UpdateInst) as usize - ptr as usize },
        3736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_UpdateInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_RayQueryInst) as usize - ptr as usize },
        3744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RayQueryInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_RevAutodiffInst) as usize - ptr as usize
        },
        3752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RevAutodiffInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_FwdAutodiffInst) as usize - ptr as usize
        },
        3760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_FwdAutodiffInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_tag) as usize - ptr as usize },
        3768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferInst_new) as usize - ptr as usize },
        3776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture2dInst_new) as usize - ptr as usize },
        3784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture2dInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Texture3dInst_new) as usize - ptr as usize },
        3792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Texture3dInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayInst_new) as usize - ptr as usize },
        3800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelInst_new) as usize - ptr as usize },
        3808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SharedInst_new) as usize - ptr as usize },
        3816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SharedInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UniformInst_new) as usize - ptr as usize },
        3824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UniformInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_by_value) as usize - ptr as usize },
        3832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_set_by_value) as usize - ptr as usize },
        3840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_set_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_new) as usize - ptr as usize },
        3848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_ty) as usize - ptr as usize },
        3856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_value) as usize - ptr as usize },
        3864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_set_ty) as usize - ptr as usize },
        3872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_set_value) as usize - ptr as usize },
        3880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_new) as usize - ptr as usize },
        3888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_func) as usize - ptr as usize },
        3896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_args) as usize - ptr as usize },
        3904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_set_func) as usize - ptr as usize },
        3912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_set_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_set_args) as usize - ptr as usize },
        3920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_new) as usize - ptr as usize },
        3928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_incomings) as usize - ptr as usize },
        3936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_set_incomings) as usize - ptr as usize },
        3944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_set_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_new) as usize - ptr as usize },
        3952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BasicBlockSentinelInst_new) as usize - ptr as usize },
        3960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BasicBlockSentinelInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_cond) as usize - ptr as usize },
        3968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_true_branch) as usize - ptr as usize },
        3976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_false_branch) as usize - ptr as usize },
        3984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_cond) as usize - ptr as usize },
        3992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_true_branch) as usize - ptr as usize },
        4000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_false_branch) as usize - ptr as usize },
        4008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_new) as usize - ptr as usize },
        4016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_prepare) as usize - ptr as usize },
        4024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_cond) as usize - ptr as usize },
        4032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_body) as usize - ptr as usize },
        4040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_update) as usize - ptr as usize },
        4048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_prepare) as usize - ptr as usize },
        4056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_cond) as usize - ptr as usize },
        4064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_body) as usize - ptr as usize },
        4072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_update) as usize - ptr as usize },
        4080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_new) as usize - ptr as usize },
        4088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_value) as usize - ptr as usize },
        4096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_cases) as usize - ptr as usize },
        4104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_default_) as usize - ptr as usize },
        4112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_value) as usize - ptr as usize },
        4120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_cases) as usize - ptr as usize },
        4128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_default_) as usize - ptr as usize },
        4136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_new) as usize - ptr as usize },
        4144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_init) as usize - ptr as usize },
        4152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_set_init) as usize - ptr as usize },
        4160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_set_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_new) as usize - ptr as usize },
        4168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BreakInst_new) as usize - ptr as usize },
        4176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BreakInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContinueInst_new) as usize - ptr as usize },
        4184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ContinueInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_value) as usize - ptr as usize },
        4192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_set_value) as usize - ptr as usize },
        4200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_new) as usize - ptr as usize },
        4208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_fmt) as usize - ptr as usize },
        4216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_args) as usize - ptr as usize },
        4224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_set_fmt) as usize - ptr as usize },
        4232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_set_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_set_args) as usize - ptr as usize },
        4240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_new) as usize - ptr as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_var) as usize - ptr as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_value) as usize - ptr as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_set_var) as usize - ptr as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_set_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_set_value) as usize - ptr as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_new) as usize - ptr as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_query) as usize - ptr as usize },
        4296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_on_triangle_hit) as usize - ptr as usize
        },
        4304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_on_procedural_hit) as usize - ptr as usize
        },
        4312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_set_query) as usize - ptr as usize },
        4320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_set_on_triangle_hit) as usize - ptr as usize
        },
        4328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_set_on_procedural_hit) as usize - ptr as usize
        },
        4336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_new) as usize - ptr as usize },
        4344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_body) as usize - ptr as usize },
        4352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_set_body) as usize - ptr as usize },
        4360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_new) as usize - ptr as usize },
        4368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_body) as usize - ptr as usize },
        4376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_set_body) as usize - ptr as usize },
        4384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_new) as usize - ptr as usize },
        4392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_BufferBinding) as usize - ptr as usize },
        4400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BufferBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_TextureBinding) as usize - ptr as usize },
        4408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_TextureBinding)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Binding_as_BindlessArrayBinding) as usize - ptr as usize
        },
        4416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BindlessArrayBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_AccelBinding) as usize - ptr as usize },
        4424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_AccelBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_tag) as usize - ptr as usize },
        4432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_handle) as usize - ptr as usize },
        4440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_offset) as usize - ptr as usize },
        4448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_size) as usize - ptr as usize },
        4456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_handle) as usize - ptr as usize },
        4464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_offset) as usize - ptr as usize },
        4472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_size) as usize - ptr as usize },
        4480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_new) as usize - ptr as usize },
        4488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_handle) as usize - ptr as usize },
        4496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_level) as usize - ptr as usize },
        4504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_handle) as usize - ptr as usize },
        4512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_level) as usize - ptr as usize },
        4520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_new) as usize - ptr as usize },
        4528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_handle) as usize - ptr as usize },
        4536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_handle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_set_handle) as usize - ptr as usize
        },
        4544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_new) as usize - ptr as usize },
        4552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_handle) as usize - ptr as usize },
        4560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_set_handle) as usize - ptr as usize },
        4568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_new) as usize - ptr as usize },
        4576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_new)
        )
    );
}
extern "C" {
    pub fn lc_ir_v2_binding_table() -> IrV2BindingTable;
}
