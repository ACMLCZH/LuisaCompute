/* automatically generated by rust-bindgen 0.68.1 */

pub const NULL: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasicBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallableModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KernelModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pool {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct NodeRef(pub *const Node);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct NodeRefMut(pub *mut Node);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BasicBlockRef(pub *const BasicBlock);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BasicBlockRefMut(pub *mut BasicBlock);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct CallableModuleRef(pub *const CallableModule);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct CallableModuleRefMut(pub *mut CallableModule);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ModuleRef(pub *const Module);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct ModuleRefMut(pub *mut Module);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct KernelModuleRef(pub *const KernelModule);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct KernelModuleRefMut(pub *mut KernelModule);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct PoolRef(pub *const Pool);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct PoolRefMut(pub *mut Pool);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct TypeRef(pub *const Type);
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RustyTypeTag {
    Bool = 0,
    Int8 = 1,
    Uint8 = 2,
    Int16 = 3,
    Uint16 = 4,
    Int32 = 5,
    Uint32 = 6,
    Int64 = 7,
    Uint64 = 8,
    Float16 = 9,
    Float32 = 10,
    Float64 = 11,
    Vector = 12,
    Matrix = 13,
    Array = 14,
    Struct = 15,
    __HIDDEN_BUFFER = 16,
    __HIDDEN_TEXTURE = 17,
    __HIDDEN_BINDLESS_ARRAY = 18,
    __HIDDEN_ACCEL = 19,
    Custom = 20,
}
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(C)]
#[derive(Debug)]
pub struct IrBuilder {
    _unused: [u8; 0],
}
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct IrBuilderRef(pub *const IrBuilder);
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(transparent)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct IrBuilderRefMut(pub *mut IrBuilder);
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PhiIncoming {
    pub block: BasicBlockRef,
    pub value: NodeRef,
}
#[test]
fn bindgen_test_layout_PhiIncoming() {
    const UNINIT: ::std::mem::MaybeUninit<PhiIncoming> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhiIncoming>(),
        16usize,
        concat!("Size of: ", stringify!(PhiIncoming))
    );
    assert_eq!(
        ::std::mem::align_of::<PhiIncoming>(),
        8usize,
        concat!("Alignment of ", stringify!(PhiIncoming))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SwitchCase {
    pub value: i32,
    pub block: BasicBlockRef,
}
#[test]
fn bindgen_test_layout_SwitchCase() {
    const UNINIT: ::std::mem::MaybeUninit<SwitchCase> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SwitchCase>(),
        16usize,
        concat!("Size of: ", stringify!(SwitchCase))
    );
    assert_eq!(
        ::std::mem::align_of::<SwitchCase>(),
        8usize,
        concat!("Alignment of ", stringify!(SwitchCase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CpuExternFn {
    pub data: *mut ::std::os::raw::c_void,
    pub func: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, args: *mut ::std::os::raw::c_void),
    >,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    pub arg_ty: TypeRef,
}
#[test]
fn bindgen_test_layout_CpuExternFn() {
    const UNINIT: ::std::mem::MaybeUninit<CpuExternFn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CpuExternFn>(),
        32usize,
        concat!("Size of: ", stringify!(CpuExternFn))
    );
    assert_eq!(
        ::std::mem::align_of::<CpuExternFn>(),
        8usize,
        concat!("Alignment of ", stringify!(CpuExternFn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_ty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(arg_ty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FuncMetadata {
    pub has_side_effects: bool,
}
#[test]
fn bindgen_test_layout_FuncMetadata() {
    const UNINIT: ::std::mem::MaybeUninit<FuncMetadata> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FuncMetadata>(),
        1usize,
        concat!("Size of: ", stringify!(FuncMetadata))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncMetadata>(),
        1usize,
        concat!("Alignment of ", stringify!(FuncMetadata))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).has_side_effects) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FuncMetadata),
            "::",
            stringify!(has_side_effects)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Func {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FuncRef(pub *const CFunc);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FuncRefMut(pub *mut CFunc);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FuncTag {
    UNDEF = 0,
    ZERO = 1,
    ONE = 2,
    ASSUME = 3,
    UNREACHABLE = 4,
    THREAD_ID = 5,
    BLOCK_ID = 6,
    WARP_SIZE = 7,
    WARP_LANE_ID = 8,
    DISPATCH_ID = 9,
    DISPATCH_SIZE = 10,
    PROPAGATE_GRADIENT = 11,
    OUTPUT_GRADIENT = 12,
    REQUIRES_GRADIENT = 13,
    BACKWARD = 14,
    GRADIENT = 15,
    ACC_GRAD = 16,
    DETACH = 17,
    RAY_TRACING_INSTANCE_TRANSFORM = 18,
    RAY_TRACING_INSTANCE_VISIBILITY_MASK = 19,
    RAY_TRACING_INSTANCE_USER_ID = 20,
    RAY_TRACING_SET_INSTANCE_TRANSFORM = 21,
    RAY_TRACING_SET_INSTANCE_OPACITY = 22,
    RAY_TRACING_SET_INSTANCE_VISIBILITY = 23,
    RAY_TRACING_SET_INSTANCE_USER_ID = 24,
    RAY_TRACING_TRACE_CLOSEST = 25,
    RAY_TRACING_TRACE_ANY = 26,
    RAY_TRACING_QUERY_ALL = 27,
    RAY_TRACING_QUERY_ANY = 28,
    RAY_QUERY_WORLD_SPACE_RAY = 29,
    RAY_QUERY_PROCEDURAL_CANDIDATE_HIT = 30,
    RAY_QUERY_TRIANGLE_CANDIDATE_HIT = 31,
    RAY_QUERY_COMMITTED_HIT = 32,
    RAY_QUERY_COMMIT_TRIANGLE = 33,
    RAY_QUERY_COMMITD_PROCEDURAL = 34,
    RAY_QUERY_TERMINATE = 35,
    LOAD = 36,
    CAST = 37,
    BIT_CAST = 38,
    ADD = 39,
    SUB = 40,
    MUL = 41,
    DIV = 42,
    REM = 43,
    BIT_AND = 44,
    BIT_OR = 45,
    BIT_XOR = 46,
    SHL = 47,
    SHR = 48,
    ROT_RIGHT = 49,
    ROT_LEFT = 50,
    EQ = 51,
    NE = 52,
    LT = 53,
    LE = 54,
    GT = 55,
    GE = 56,
    MAT_COMP_MUL = 57,
    NEG = 58,
    NOT = 59,
    BIT_NOT = 60,
    ALL = 61,
    ANY = 62,
    SELECT = 63,
    CLAMP = 64,
    LERP = 65,
    STEP = 66,
    SATURATE = 67,
    SMOOTH_STEP = 68,
    ABS = 69,
    MIN = 70,
    MAX = 71,
    REDUCE_SUM = 72,
    REDUCE_PROD = 73,
    REDUCE_MIN = 74,
    REDUCE_MAX = 75,
    CLZ = 76,
    CTZ = 77,
    POP_COUNT = 78,
    REVERSE = 79,
    IS_INF = 80,
    IS_NAN = 81,
    ACOS = 82,
    ACOSH = 83,
    ASIN = 84,
    ASINH = 85,
    ATAN = 86,
    ATAN2 = 87,
    ATANH = 88,
    COS = 89,
    COSH = 90,
    SIN = 91,
    SINH = 92,
    TAN = 93,
    TANH = 94,
    EXP = 95,
    EXP2 = 96,
    EXP10 = 97,
    LOG = 98,
    LOG2 = 99,
    LOG10 = 100,
    POWI = 101,
    POWF = 102,
    SQRT = 103,
    RSQRT = 104,
    CEIL = 105,
    FLOOR = 106,
    FRACT = 107,
    TRUNC = 108,
    ROUND = 109,
    FMA = 110,
    COPYSIGN = 111,
    CROSS = 112,
    DOT = 113,
    OUTER_PRODUCT = 114,
    LENGTH = 115,
    LENGTH_SQUARED = 116,
    NORMALIZE = 117,
    FACEFORWARD = 118,
    DISTANCE = 119,
    REFLECT = 120,
    DETERMINANT = 121,
    TRANSPOSE = 122,
    INVERSE = 123,
    WARP_IS_FIRST_ACTIVE_LANE = 124,
    WARP_FIRST_ACTIVE_LANE = 125,
    WARP_ACTIVE_ALL_EQUAL = 126,
    WARP_ACTIVE_BIT_AND = 127,
    WARP_ACTIVE_BIT_OR = 128,
    WARP_ACTIVE_BIT_XOR = 129,
    WARP_ACTIVE_COUNT_BITS = 130,
    WARP_ACTIVE_MAX = 131,
    WARP_ACTIVE_MIN = 132,
    WARP_ACTIVE_PRODUCT = 133,
    WARP_ACTIVE_SUM = 134,
    WARP_ACTIVE_ALL = 135,
    WARP_ACTIVE_ANY = 136,
    WARP_ACTIVE_BIT_MASK = 137,
    WARP_PREFIX_COUNT_BITS = 138,
    WARP_PREFIX_SUM = 139,
    WARP_PREFIX_PRODUCT = 140,
    WARP_READ_LANE_AT = 141,
    WARP_READ_FIRST_LANE = 142,
    SYNCHRONIZE_BLOCK = 143,
    ATOMIC_EXCHANGE = 144,
    ATOMIC_COMPARE_EXCHANGE = 145,
    ATOMIC_FETCH_ADD = 146,
    ATOMIC_FETCH_SUB = 147,
    ATOMIC_FETCH_AND = 148,
    ATOMIC_FETCH_OR = 149,
    ATOMIC_FETCH_XOR = 150,
    ATOMIC_FETCH_MIN = 151,
    ATOMIC_FETCH_MAX = 152,
    BUFFER_WRITE = 153,
    BUFFER_READ = 154,
    BUFFER_SIZE = 155,
    BYTE_BUFFER_WRITE = 156,
    BYTE_BUFFER_READ = 157,
    BYTE_BUFFER_SIZE = 158,
    TEXTURE2D_READ = 159,
    TEXTURE2D_WRITE = 160,
    TEXTURE2D_SIZE = 161,
    TEXTURE3D_READ = 162,
    TEXTURE3D_WRITE = 163,
    TEXTURE3D_SIZE = 164,
    BINDLESS_TEXTURE2D_SAMPLE = 165,
    BINDLESS_TEXTURE2D_SAMPLE_LEVEL = 166,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD = 167,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL = 168,
    BINDLESS_TEXTURE2D_READ = 169,
    BINDLESS_TEXTURE2D_READ_LEVEL = 170,
    BINDLESS_TEXTURE2D_SIZE = 171,
    BINDLESS_TEXTURE2D_SIZE_LEVEL = 172,
    BINDLESS_TEXTURE3D_SAMPLE = 173,
    BINDLESS_TEXTURE3D_SAMPLE_LEVEL = 174,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD = 175,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL = 176,
    BINDLESS_TEXTURE3D_READ = 177,
    BINDLESS_TEXTURE3D_READ_LEVEL = 178,
    BINDLESS_TEXTURE3D_SIZE = 179,
    BINDLESS_TEXTURE3D_SIZE_LEVEL = 180,
    BINDLESS_BUFFER_WRITE = 181,
    BINDLESS_BUFFER_READ = 182,
    BINDLESS_BUFFER_SIZE = 183,
    BINDLESS_BUFFER_TYPE = 184,
    BINDLESS_BYTE_BUFFER_WRITE = 185,
    BINDLESS_BYTE_BUFFER_READ = 186,
    BINDLESS_BYTE_BUFFER_SIZE = 187,
    VEC = 188,
    VEC2 = 189,
    VEC3 = 190,
    VEC4 = 191,
    PERMUTE = 192,
    GET_ELEMENT_PTR = 193,
    EXTRACT_ELEMENT = 194,
    INSERT_ELEMENT = 195,
    ARRAY = 196,
    STRUCT = 197,
    MAT_FULL = 198,
    MAT2 = 199,
    MAT3 = 200,
    MAT4 = 201,
    BINDLESS_ATOMIC_EXCHANGE = 202,
    BINDLESS_ATOMIC_COMPARE_EXCHANGE = 203,
    BINDLESS_ATOMIC_FETCH_ADD = 204,
    BINDLESS_ATOMIC_FETCH_SUB = 205,
    BINDLESS_ATOMIC_FETCH_AND = 206,
    BINDLESS_ATOMIC_FETCH_OR = 207,
    BINDLESS_ATOMIC_FETCH_XOR = 208,
    BINDLESS_ATOMIC_FETCH_MIN = 209,
    BINDLESS_ATOMIC_FETCH_MAX = 210,
    CALLABLE = 211,
    CPU_EXT = 212,
    SHADER_EXECUTION_REORDER = 213,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RustyFuncTag {
    Undef = 0,
    Zero = 1,
    One = 2,
    Assume = 3,
    Unreachable = 4,
    ThreadId = 5,
    BlockId = 6,
    WarpSize = 7,
    WarpLaneId = 8,
    DispatchId = 9,
    DispatchSize = 10,
    PropagateGradient = 11,
    OutputGradient = 12,
    RequiresGradient = 13,
    Backward = 14,
    Gradient = 15,
    AccGrad = 16,
    Detach = 17,
    RayTracingInstanceTransform = 18,
    RayTracingInstanceVisibilityMask = 19,
    RayTracingInstanceUserId = 20,
    RayTracingSetInstanceTransform = 21,
    RayTracingSetInstanceOpacity = 22,
    RayTracingSetInstanceVisibility = 23,
    RayTracingSetInstanceUserId = 24,
    RayTracingTraceClosest = 25,
    RayTracingTraceAny = 26,
    RayTracingQueryAll = 27,
    RayTracingQueryAny = 28,
    RayQueryWorldSpaceRay = 29,
    RayQueryProceduralCandidateHit = 30,
    RayQueryTriangleCandidateHit = 31,
    RayQueryCommittedHit = 32,
    RayQueryCommitTriangle = 33,
    RayQueryCommitdProcedural = 34,
    RayQueryTerminate = 35,
    Load = 36,
    Cast = 37,
    BitCast = 38,
    Add = 39,
    Sub = 40,
    Mul = 41,
    Div = 42,
    Rem = 43,
    BitAnd = 44,
    BitOr = 45,
    BitXor = 46,
    Shl = 47,
    Shr = 48,
    RotRight = 49,
    RotLeft = 50,
    Eq = 51,
    Ne = 52,
    Lt = 53,
    Le = 54,
    Gt = 55,
    Ge = 56,
    MatCompMul = 57,
    Neg = 58,
    Not = 59,
    BitNot = 60,
    All = 61,
    Any = 62,
    Select = 63,
    Clamp = 64,
    Lerp = 65,
    Step = 66,
    Saturate = 67,
    SmoothStep = 68,
    Abs = 69,
    Min = 70,
    Max = 71,
    ReduceSum = 72,
    ReduceProd = 73,
    ReduceMin = 74,
    ReduceMax = 75,
    Clz = 76,
    Ctz = 77,
    PopCount = 78,
    Reverse = 79,
    IsInf = 80,
    IsNan = 81,
    Acos = 82,
    Acosh = 83,
    Asin = 84,
    Asinh = 85,
    Atan = 86,
    Atan2 = 87,
    Atanh = 88,
    Cos = 89,
    Cosh = 90,
    Sin = 91,
    Sinh = 92,
    Tan = 93,
    Tanh = 94,
    Exp = 95,
    Exp2 = 96,
    Exp10 = 97,
    Log = 98,
    Log2 = 99,
    Log10 = 100,
    Powi = 101,
    Powf = 102,
    Sqrt = 103,
    Rsqrt = 104,
    Ceil = 105,
    Floor = 106,
    Fract = 107,
    Trunc = 108,
    Round = 109,
    Fma = 110,
    Copysign = 111,
    Cross = 112,
    Dot = 113,
    OuterProduct = 114,
    Length = 115,
    LengthSquared = 116,
    Normalize = 117,
    Faceforward = 118,
    Distance = 119,
    Reflect = 120,
    Determinant = 121,
    Transpose = 122,
    Inverse = 123,
    WarpIsFirstActiveLane = 124,
    WarpFirstActiveLane = 125,
    WarpActiveAllEqual = 126,
    WarpActiveBitAnd = 127,
    WarpActiveBitOr = 128,
    WarpActiveBitXor = 129,
    WarpActiveCountBits = 130,
    WarpActiveMax = 131,
    WarpActiveMin = 132,
    WarpActiveProduct = 133,
    WarpActiveSum = 134,
    WarpActiveAll = 135,
    WarpActiveAny = 136,
    WarpActiveBitMask = 137,
    WarpPrefixCountBits = 138,
    WarpPrefixSum = 139,
    WarpPrefixProduct = 140,
    WarpReadLaneAt = 141,
    WarpReadFirstLane = 142,
    SynchronizeBlock = 143,
    AtomicExchange = 144,
    AtomicCompareExchange = 145,
    AtomicFetchAdd = 146,
    AtomicFetchSub = 147,
    AtomicFetchAnd = 148,
    AtomicFetchOr = 149,
    AtomicFetchXor = 150,
    AtomicFetchMin = 151,
    AtomicFetchMax = 152,
    BufferWrite = 153,
    BufferRead = 154,
    BufferSize = 155,
    ByteBufferWrite = 156,
    ByteBufferRead = 157,
    ByteBufferSize = 158,
    Texture2dRead = 159,
    Texture2dWrite = 160,
    Texture2dSize = 161,
    Texture3dRead = 162,
    Texture3dWrite = 163,
    Texture3dSize = 164,
    BindlessTexture2dSample = 165,
    BindlessTexture2dSampleLevel = 166,
    BindlessTexture2dSampleGrad = 167,
    BindlessTexture2dSampleGradLevel = 168,
    BindlessTexture2dRead = 169,
    BindlessTexture2dReadLevel = 170,
    BindlessTexture2dSize = 171,
    BindlessTexture2dSizeLevel = 172,
    BindlessTexture3dSample = 173,
    BindlessTexture3dSampleLevel = 174,
    BindlessTexture3dSampleGrad = 175,
    BindlessTexture3dSampleGradLevel = 176,
    BindlessTexture3dRead = 177,
    BindlessTexture3dReadLevel = 178,
    BindlessTexture3dSize = 179,
    BindlessTexture3dSizeLevel = 180,
    BindlessBufferWrite = 181,
    BindlessBufferRead = 182,
    BindlessBufferSize = 183,
    BindlessBufferType = 184,
    BindlessByteBufferWrite = 185,
    BindlessByteBufferRead = 186,
    BindlessByteBufferSize = 187,
    Vec = 188,
    Vec2 = 189,
    Vec3 = 190,
    Vec4 = 191,
    Permute = 192,
    GetElementPtr = 193,
    ExtractElement = 194,
    InsertElement = 195,
    Array = 196,
    Struct = 197,
    MatFull = 198,
    Mat2 = 199,
    Mat3 = 200,
    Mat4 = 201,
    BindlessAtomicExchange = 202,
    BindlessAtomicCompareExchange = 203,
    BindlessAtomicFetchAdd = 204,
    BindlessAtomicFetchSub = 205,
    BindlessAtomicFetchAnd = 206,
    BindlessAtomicFetchOr = 207,
    BindlessAtomicFetchXor = 208,
    BindlessAtomicFetchMin = 209,
    BindlessAtomicFetchMax = 210,
    Callable = 211,
    CpuExt = 212,
    ShaderExecutionReorder = 213,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FuncData {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_FuncData() {
    assert_eq!(
        ::std::mem::size_of::<FuncData>(),
        1usize,
        concat!("Size of: ", stringify!(FuncData))
    );
    assert_eq!(
        ::std::mem::align_of::<FuncData>(),
        1usize,
        concat!("Alignment of ", stringify!(FuncData))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AssumeFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AssumeFnRef(pub *const AssumeFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AssumeFnRefMut(pub *mut AssumeFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnreachableFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct UnreachableFnRef(pub *const UnreachableFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct UnreachableFnRefMut(pub *mut UnreachableFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicExchangeFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicExchangeFnRef(pub *const BindlessAtomicExchangeFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicExchangeFnRefMut(pub *mut BindlessAtomicExchangeFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicCompareExchangeFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicCompareExchangeFnRef(pub *const BindlessAtomicCompareExchangeFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicCompareExchangeFnRefMut(pub *mut BindlessAtomicCompareExchangeFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAddFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchAddFnRef(pub *const BindlessAtomicFetchAddFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchAddFnRefMut(pub *mut BindlessAtomicFetchAddFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchSubFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchSubFnRef(pub *const BindlessAtomicFetchSubFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchSubFnRefMut(pub *mut BindlessAtomicFetchSubFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAndFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchAndFnRef(pub *const BindlessAtomicFetchAndFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchAndFnRefMut(pub *mut BindlessAtomicFetchAndFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchOrFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchOrFnRef(pub *const BindlessAtomicFetchOrFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchOrFnRefMut(pub *mut BindlessAtomicFetchOrFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchXorFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchXorFnRef(pub *const BindlessAtomicFetchXorFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchXorFnRefMut(pub *mut BindlessAtomicFetchXorFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMinFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchMinFnRef(pub *const BindlessAtomicFetchMinFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchMinFnRefMut(pub *mut BindlessAtomicFetchMinFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMaxFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchMaxFnRef(pub *const BindlessAtomicFetchMaxFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessAtomicFetchMaxFnRefMut(pub *mut BindlessAtomicFetchMaxFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallableFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CallableFnRef(pub *const CallableFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CallableFnRefMut(pub *mut CallableFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuExtFn {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CpuExtFnRef(pub *const CpuExtFn);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CpuExtFnRefMut(pub *mut CpuExtFn);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Instruction {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InstructionRef(pub *const CInstruction);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InstructionRefMut(pub *mut CInstruction);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InstructionTag {
    BUFFER = 0,
    TEXTURE2D = 1,
    TEXTURE3D = 2,
    BINDLESS_ARRAY = 3,
    ACCEL = 4,
    SHARED = 5,
    UNIFORM = 6,
    ARGUMENT = 7,
    CONSTANT = 8,
    CALL = 9,
    PHI = 10,
    BASIC_BLOCK_SENTINEL = 11,
    IF = 12,
    GENERIC_LOOP = 13,
    SWITCH = 14,
    LOCAL = 15,
    BREAK = 16,
    CONTINUE = 17,
    RETURN = 18,
    PRINT = 19,
    UPDATE = 20,
    RAY_QUERY = 21,
    REV_AUTODIFF = 22,
    FWD_AUTODIFF = 23,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RustyInstructionTag {
    Buffer = 0,
    Texture2d = 1,
    Texture3d = 2,
    BindlessArray = 3,
    Accel = 4,
    Shared = 5,
    Uniform = 6,
    Argument = 7,
    Constant = 8,
    Call = 9,
    Phi = 10,
    BasicBlockSentinel = 11,
    If = 12,
    GenericLoop = 13,
    Switch = 14,
    Local = 15,
    Break = 16,
    Continue = 17,
    Return = 18,
    Print = 19,
    Update = 20,
    RayQuery = 21,
    RevAutodiff = 22,
    FwdAutodiff = 23,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InstructionData {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_InstructionData() {
    assert_eq!(
        ::std::mem::size_of::<InstructionData>(),
        1usize,
        concat!("Size of: ", stringify!(InstructionData))
    );
    assert_eq!(
        ::std::mem::align_of::<InstructionData>(),
        1usize,
        concat!("Alignment of ", stringify!(InstructionData))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArgumentInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArgumentInstRef(pub *const ArgumentInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArgumentInstRefMut(pub *mut ArgumentInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConstantInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ConstantInstRef(pub *const ConstantInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ConstantInstRefMut(pub *mut ConstantInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CallInstRef(pub *const CallInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct CallInstRefMut(pub *mut CallInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhiInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PhiInstRef(pub *const PhiInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PhiInstRefMut(pub *mut PhiInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IfInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IfInstRef(pub *const IfInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IfInstRefMut(pub *mut IfInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GenericLoopInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct GenericLoopInstRef(pub *const GenericLoopInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct GenericLoopInstRefMut(pub *mut GenericLoopInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwitchInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SwitchInstRef(pub *const SwitchInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct SwitchInstRefMut(pub *mut SwitchInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocalInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LocalInstRef(pub *const LocalInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct LocalInstRefMut(pub *mut LocalInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReturnInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ReturnInstRef(pub *const ReturnInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ReturnInstRefMut(pub *mut ReturnInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrintInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PrintInstRef(pub *const PrintInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct PrintInstRefMut(pub *mut PrintInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UpdateInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct UpdateInstRef(pub *const UpdateInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct UpdateInstRefMut(pub *mut UpdateInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct RayQueryInstRef(pub *const RayQueryInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct RayQueryInstRefMut(pub *mut RayQueryInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RevAutodiffInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct RevAutodiffInstRef(pub *const RevAutodiffInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct RevAutodiffInstRefMut(pub *mut RevAutodiffInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FwdAutodiffInst {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FwdAutodiffInstRef(pub *const FwdAutodiffInst);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct FwdAutodiffInstRefMut(pub *mut FwdAutodiffInst);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Binding {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindingRef(pub *const CBinding);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindingRefMut(pub *mut CBinding);
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BindingTag {
    BUFFER_BINDING = 0,
    TEXTURE_BINDING = 1,
    BINDLESS_ARRAY_BINDING = 2,
    ACCEL_BINDING = 3,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum RustyBindingTag {
    BufferBinding = 0,
    TextureBinding = 1,
    BindlessArrayBinding = 2,
    AccelBinding = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindingData {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_BindingData() {
    assert_eq!(
        ::std::mem::size_of::<BindingData>(),
        1usize,
        concat!("Size of: ", stringify!(BindingData))
    );
    assert_eq!(
        ::std::mem::align_of::<BindingData>(),
        1usize,
        concat!("Alignment of ", stringify!(BindingData))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferBinding {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BufferBindingRef(pub *const BufferBinding);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BufferBindingRefMut(pub *mut BufferBinding);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextureBinding {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct TextureBindingRef(pub *const TextureBinding);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct TextureBindingRefMut(pub *mut TextureBinding);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessArrayBinding {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessArrayBindingRef(pub *const BindlessArrayBinding);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct BindlessArrayBindingRefMut(pub *mut BindlessArrayBinding);
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelBinding {
    _unused: [u8; 0],
}
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AccelBindingRef(pub *const AccelBinding);
#[repr(transparent)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AccelBindingRefMut(pub *mut AccelBinding);
#[doc = " <div rustbindgen nodebug></div>"]
#[repr(C)]
#[derive(Copy, Clone, Hash, PartialEq, Eq)]
pub struct Slice<T> {
    pub data: *mut T,
    pub len: usize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct CFunc {
    pub data: *mut ::std::os::raw::c_void,
    pub tag: FuncTag,
}
#[test]
fn bindgen_test_layout_CFunc() {
    const UNINIT: ::std::mem::MaybeUninit<CFunc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CFunc>(),
        16usize,
        concat!("Size of: ", stringify!(CFunc))
    );
    assert_eq!(
        ::std::mem::align_of::<CFunc>(),
        8usize,
        concat!("Alignment of ", stringify!(CFunc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CFunc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CFunc),
            "::",
            stringify!(tag)
        )
    );
}
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct CInstruction {
    pub data: *mut ::std::os::raw::c_void,
    pub tag: InstructionTag,
}
#[test]
fn bindgen_test_layout_CInstruction() {
    const UNINIT: ::std::mem::MaybeUninit<CInstruction> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CInstruction>(),
        16usize,
        concat!("Size of: ", stringify!(CInstruction))
    );
    assert_eq!(
        ::std::mem::align_of::<CInstruction>(),
        8usize,
        concat!("Alignment of ", stringify!(CInstruction))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstruction),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CInstruction),
            "::",
            stringify!(tag)
        )
    );
}
#[doc = " <div rustbindgen nocopy></div>"]
#[repr(C)]
#[derive(Debug, Hash, PartialEq, Eq)]
pub struct CBinding {
    pub data: *mut ::std::os::raw::c_void,
    pub tag: BindingTag,
}
#[test]
fn bindgen_test_layout_CBinding() {
    const UNINIT: ::std::mem::MaybeUninit<CBinding> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CBinding>(),
        16usize,
        concat!("Size of: ", stringify!(CBinding))
    );
    assert_eq!(
        ::std::mem::align_of::<CBinding>(),
        8usize,
        concat!("Alignment of ", stringify!(CBinding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CBinding),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CBinding),
            "::",
            stringify!(tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct IrV2BindingTable {
    pub Func_as_AssumeFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CFunc) -> *mut AssumeFn>,
    pub Func_as_UnreachableFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CFunc) -> *mut UnreachableFn>,
    pub Func_as_BindlessAtomicExchangeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicExchangeFn,
    >,
    pub Func_as_BindlessAtomicCompareExchangeFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicCompareExchangeFn,
    >,
    pub Func_as_BindlessAtomicFetchAddFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchAddFn,
    >,
    pub Func_as_BindlessAtomicFetchSubFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchSubFn,
    >,
    pub Func_as_BindlessAtomicFetchAndFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchAndFn,
    >,
    pub Func_as_BindlessAtomicFetchOrFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchOrFn,
    >,
    pub Func_as_BindlessAtomicFetchXorFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchXorFn,
    >,
    pub Func_as_BindlessAtomicFetchMinFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchMinFn,
    >,
    pub Func_as_BindlessAtomicFetchMaxFn: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CFunc) -> *mut BindlessAtomicFetchMaxFn,
    >,
    pub Func_as_CallableFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CFunc) -> *mut CallableFn>,
    pub Func_as_CpuExtFn:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CFunc) -> *mut CpuExtFn>,
    pub Func_tag: ::std::option::Option<unsafe extern "C" fn(self_: *const CFunc) -> RustyFuncTag>,
    pub AssumeFn_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut AssumeFn) -> Slice<::std::os::raw::c_char>,
    >,
    pub AssumeFn_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut AssumeFn, value: Slice<::std::os::raw::c_char>),
    >,
    pub AssumeFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, msg: Slice<::std::os::raw::c_char>) -> CFunc,
    >,
    pub UnreachableFn_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut UnreachableFn) -> Slice<::std::os::raw::c_char>,
    >,
    pub UnreachableFn_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut UnreachableFn, value: Slice<::std::os::raw::c_char>),
    >,
    pub UnreachableFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, msg: Slice<::std::os::raw::c_char>) -> CFunc,
    >,
    pub BindlessAtomicExchangeFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchangeFn) -> *const Type,
    >,
    pub BindlessAtomicExchangeFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchangeFn, value: *const Type),
    >,
    pub BindlessAtomicExchangeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicCompareExchangeFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchangeFn) -> *const Type,
    >,
    pub BindlessAtomicCompareExchangeFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchangeFn, value: *const Type),
    >,
    pub BindlessAtomicCompareExchangeFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchAddFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAddFn) -> *const Type,
    >,
    pub BindlessAtomicFetchAddFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAddFn, value: *const Type),
    >,
    pub BindlessAtomicFetchAddFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchSubFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSubFn) -> *const Type,
    >,
    pub BindlessAtomicFetchSubFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSubFn, value: *const Type),
    >,
    pub BindlessAtomicFetchSubFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchAndFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAndFn) -> *const Type,
    >,
    pub BindlessAtomicFetchAndFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAndFn, value: *const Type),
    >,
    pub BindlessAtomicFetchAndFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchOrFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOrFn) -> *const Type,
    >,
    pub BindlessAtomicFetchOrFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOrFn, value: *const Type),
    >,
    pub BindlessAtomicFetchOrFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchXorFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXorFn) -> *const Type,
    >,
    pub BindlessAtomicFetchXorFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXorFn, value: *const Type),
    >,
    pub BindlessAtomicFetchXorFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchMinFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMinFn) -> *const Type,
    >,
    pub BindlessAtomicFetchMinFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMinFn, value: *const Type),
    >,
    pub BindlessAtomicFetchMinFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub BindlessAtomicFetchMaxFn_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMaxFn) -> *const Type,
    >,
    pub BindlessAtomicFetchMaxFn_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMaxFn, value: *const Type),
    >,
    pub BindlessAtomicFetchMaxFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, ty: *const Type) -> CFunc>,
    pub CallableFn_module:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallableFn) -> *mut CallableModule>,
    pub CallableFn_set_module: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CallableFn, value: *mut CallableModule),
    >,
    pub CallableFn_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, module: *mut CallableModule) -> CFunc,
    >,
    pub CpuExtFn_f:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExtFn) -> CpuExternFn>,
    pub CpuExtFn_set_f:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExtFn, value: CpuExternFn)>,
    pub CpuExtFn_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, f: CpuExternFn) -> CFunc>,
    pub Func_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, tag: RustyFuncTag) -> CFunc>,
    pub Instruction_as_ArgumentInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut ArgumentInst>,
    pub Instruction_as_ConstantInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut ConstantInst>,
    pub Instruction_as_CallInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut CallInst>,
    pub Instruction_as_PhiInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut PhiInst>,
    pub Instruction_as_IfInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut IfInst>,
    pub Instruction_as_GenericLoopInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CInstruction) -> *mut GenericLoopInst,
    >,
    pub Instruction_as_SwitchInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut SwitchInst>,
    pub Instruction_as_LocalInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut LocalInst>,
    pub Instruction_as_ReturnInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut ReturnInst>,
    pub Instruction_as_PrintInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut PrintInst>,
    pub Instruction_as_UpdateInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut UpdateInst>,
    pub Instruction_as_RayQueryInst:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CInstruction) -> *mut RayQueryInst>,
    pub Instruction_as_RevAutodiffInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CInstruction) -> *mut RevAutodiffInst,
    >,
    pub Instruction_as_FwdAutodiffInst: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CInstruction) -> *mut FwdAutodiffInst,
    >,
    pub Instruction_tag: ::std::option::Option<
        unsafe extern "C" fn(self_: *const CInstruction) -> RustyInstructionTag,
    >,
    pub ArgumentInst_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ArgumentInst) -> bool>,
    pub ArgumentInst_set_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ArgumentInst, value: bool)>,
    pub ArgumentInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, by_value: bool) -> CInstruction,
    >,
    pub ConstantInst_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst) -> *const Type>,
    pub ConstantInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst) -> Slice<u8>>,
    pub ConstantInst_set_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst, value: *const Type)>,
    pub ConstantInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ConstantInst, value: Slice<u8>)>,
    pub ConstantInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, ty: *const Type, value: Slice<u8>) -> CInstruction,
    >,
    pub CallInst_func:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst) -> *const CFunc>,
    pub CallInst_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst) -> Slice<*mut Node>>,
    pub CallInst_set_func:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst, value: CFunc)>,
    pub CallInst_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CallInst, value: Slice<*mut Node>)>,
    pub CallInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, func: CFunc, args: Slice<*mut Node>) -> CInstruction,
    >,
    pub PhiInst_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PhiInst) -> Slice<PhiIncoming>>,
    pub PhiInst_set_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PhiInst, value: Slice<PhiIncoming>)>,
    pub PhiInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, incomings: Slice<PhiIncoming>) -> CInstruction,
    >,
    pub IfInst_cond: ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *mut Node>,
    pub IfInst_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *const BasicBlock>,
    pub IfInst_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst) -> *const BasicBlock>,
    pub IfInst_set_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *mut Node)>,
    pub IfInst_set_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *const BasicBlock)>,
    pub IfInst_set_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut IfInst, value: *const BasicBlock)>,
    pub IfInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            cond: *mut Node,
            true_branch: *const BasicBlock,
            false_branch: *const BasicBlock,
        ) -> CInstruction,
    >,
    pub GenericLoopInst_prepare: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *const BasicBlock,
    >,
    pub GenericLoopInst_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *mut Node>,
    pub GenericLoopInst_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *const BasicBlock,
    >,
    pub GenericLoopInst_update: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst) -> *const BasicBlock,
    >,
    pub GenericLoopInst_set_prepare: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *const BasicBlock),
    >,
    pub GenericLoopInst_set_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *mut Node)>,
    pub GenericLoopInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *const BasicBlock),
    >,
    pub GenericLoopInst_set_update: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoopInst, value: *const BasicBlock),
    >,
    pub GenericLoopInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            prepare: *const BasicBlock,
            cond: *mut Node,
            body: *const BasicBlock,
            update: *const BasicBlock,
        ) -> CInstruction,
    >,
    pub SwitchInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> *mut Node>,
    pub SwitchInst_cases:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> Slice<SwitchCase>>,
    pub SwitchInst_default_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst) -> *const BasicBlock>,
    pub SwitchInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut SwitchInst, value: *mut Node)>,
    pub SwitchInst_set_cases: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut SwitchInst, value: Slice<SwitchCase>),
    >,
    pub SwitchInst_set_default_: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut SwitchInst, value: *const BasicBlock),
    >,
    pub SwitchInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            value: *mut Node,
            cases: Slice<SwitchCase>,
            default_: *const BasicBlock,
        ) -> CInstruction,
    >,
    pub LocalInst_init:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LocalInst) -> *mut Node>,
    pub LocalInst_set_init:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut LocalInst, value: *mut Node)>,
    pub LocalInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, init: *mut Node) -> CInstruction,
    >,
    pub ReturnInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ReturnInst) -> *mut Node>,
    pub ReturnInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut ReturnInst, value: *mut Node)>,
    pub ReturnInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, value: *mut Node) -> CInstruction,
    >,
    pub PrintInst_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut PrintInst) -> Slice<::std::os::raw::c_char>,
    >,
    pub PrintInst_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PrintInst) -> Slice<*mut Node>>,
    pub PrintInst_set_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut PrintInst, value: Slice<::std::os::raw::c_char>),
    >,
    pub PrintInst_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut PrintInst, value: Slice<*mut Node>)>,
    pub PrintInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            fmt: Slice<::std::os::raw::c_char>,
            args: Slice<*mut Node>,
        ) -> CInstruction,
    >,
    pub UpdateInst_var:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst) -> *mut Node>,
    pub UpdateInst_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst) -> *mut Node>,
    pub UpdateInst_set_var:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst, value: *mut Node)>,
    pub UpdateInst_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut UpdateInst, value: *mut Node)>,
    pub UpdateInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, var: *mut Node, value: *mut Node) -> CInstruction,
    >,
    pub RayQueryInst_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *mut Node>,
    pub RayQueryInst_on_triangle_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *const BasicBlock>,
    pub RayQueryInst_on_procedural_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst) -> *const BasicBlock>,
    pub RayQueryInst_set_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQueryInst, value: *mut Node)>,
    pub RayQueryInst_set_on_triangle_hit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RayQueryInst, value: *const BasicBlock),
    >,
    pub RayQueryInst_set_on_procedural_hit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RayQueryInst, value: *const BasicBlock),
    >,
    pub RayQueryInst_new: ::std::option::Option<
        unsafe extern "C" fn(
            pool: *mut Pool,
            query: *mut Node,
            on_triangle_hit: *const BasicBlock,
            on_procedural_hit: *const BasicBlock,
        ) -> CInstruction,
    >,
    pub RevAutodiffInst_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RevAutodiffInst) -> *const BasicBlock,
    >,
    pub RevAutodiffInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RevAutodiffInst, value: *const BasicBlock),
    >,
    pub RevAutodiffInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, body: *const BasicBlock) -> CInstruction,
    >,
    pub FwdAutodiffInst_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FwdAutodiffInst) -> *const BasicBlock,
    >,
    pub FwdAutodiffInst_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FwdAutodiffInst, value: *const BasicBlock),
    >,
    pub FwdAutodiffInst_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, body: *const BasicBlock) -> CInstruction,
    >,
    pub Instruction_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, tag: RustyInstructionTag) -> CInstruction,
    >,
    pub func_metadata: ::std::option::Option<unsafe extern "C" fn() -> *const FuncMetadata>,
    pub Binding_as_BufferBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CBinding) -> *mut BufferBinding>,
    pub Binding_as_TextureBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CBinding) -> *mut TextureBinding>,
    pub Binding_as_BindlessArrayBinding: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut CBinding) -> *mut BindlessArrayBinding,
    >,
    pub Binding_as_AccelBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CBinding) -> *mut AccelBinding>,
    pub Binding_tag:
        ::std::option::Option<unsafe extern "C" fn(self_: *const CBinding) -> RustyBindingTag>,
    pub BufferBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, handle: u64, offset: u64, size: u64) -> CBinding,
    >,
    pub TextureBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub TextureBinding_set_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub TextureBinding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, handle: u64, level: u64) -> CBinding,
    >,
    pub BindlessArrayBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding) -> u64>,
    pub BindlessArrayBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding, value: u64)>,
    pub BindlessArrayBinding_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, handle: u64) -> CBinding>,
    pub AccelBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding) -> u64>,
    pub AccelBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding, value: u64)>,
    pub AccelBinding_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool, handle: u64) -> CBinding>,
    pub Binding_new: ::std::option::Option<
        unsafe extern "C" fn(pool: *mut Pool, tag: RustyBindingTag) -> CBinding,
    >,
    pub type_extract:
        ::std::option::Option<unsafe extern "C" fn(ty: *const Type, index: u32) -> *const Type>,
    pub type_size: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> usize>,
    pub type_alignment: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> usize>,
    pub type_tag: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> RustyTypeTag>,
    pub type_is_scalar: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_bool: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_int16: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_int32: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_int64: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_uint16: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_uint32: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_uint64: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_float16: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_float32: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_array: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_vector: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_struct: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_custom: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_is_matrix: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> bool>,
    pub type_element: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> *const Type>,
    pub type_description: ::std::option::Option<
        unsafe extern "C" fn(ty: *const Type) -> Slice<::std::os::raw::c_char>,
    >,
    pub type_dimension: ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> usize>,
    pub type_members:
        ::std::option::Option<unsafe extern "C" fn(ty: *const Type) -> Slice<*const Type>>,
    pub make_struct: ::std::option::Option<
        unsafe extern "C" fn(alignment: usize, tys: *mut *const Type, count: u32) -> *const Type,
    >,
    pub make_array:
        ::std::option::Option<unsafe extern "C" fn(ty: *const Type, count: u32) -> *const Type>,
    pub make_vector:
        ::std::option::Option<unsafe extern "C" fn(ty: *const Type, count: u32) -> *const Type>,
    pub make_matrix: ::std::option::Option<unsafe extern "C" fn(dim: u32) -> *const Type>,
    pub make_custom: ::std::option::Option<
        unsafe extern "C" fn(name: Slice<::std::os::raw::c_char>) -> *const Type,
    >,
    pub from_desc: ::std::option::Option<
        unsafe extern "C" fn(desc: Slice<::std::os::raw::c_char>) -> *const Type,
    >,
    pub type_bool: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_int16: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_int32: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_int64: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_uint16: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_uint32: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_uint64: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_float16: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub type_float32: ::std::option::Option<unsafe extern "C" fn() -> *const Type>,
    pub node_prev: ::std::option::Option<unsafe extern "C" fn(node: *const Node) -> *const Node>,
    pub node_next: ::std::option::Option<unsafe extern "C" fn(node: *const Node) -> *const Node>,
    pub node_inst:
        ::std::option::Option<unsafe extern "C" fn(node: *const Node) -> *const CInstruction>,
    pub node_type: ::std::option::Option<unsafe extern "C" fn(node: *const Node) -> *const Type>,
    pub node_get_index: ::std::option::Option<unsafe extern "C" fn(node: *const Node) -> i32>,
    pub basic_block_first:
        ::std::option::Option<unsafe extern "C" fn(block: *const BasicBlock) -> *const Node>,
    pub basic_block_last:
        ::std::option::Option<unsafe extern "C" fn(block: *const BasicBlock) -> *const Node>,
    pub node_unlink: ::std::option::Option<unsafe extern "C" fn(node: *mut Node)>,
    pub node_set_next:
        ::std::option::Option<unsafe extern "C" fn(node: *mut Node, next: *mut Node)>,
    pub node_set_prev:
        ::std::option::Option<unsafe extern "C" fn(node: *mut Node, prev: *mut Node)>,
    pub node_replace:
        ::std::option::Option<unsafe extern "C" fn(node: *mut Node, new_node: *mut Node)>,
    pub pool_new: ::std::option::Option<unsafe extern "C" fn() -> *mut Pool>,
    pub pool_drop: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool)>,
    pub pool_clone: ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut Pool>,
    pub ir_builder_new:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut IrBuilder>,
    pub ir_builder_new_without_bb:
        ::std::option::Option<unsafe extern "C" fn(pool: *mut Pool) -> *mut IrBuilder>,
    pub ir_builder_drop: ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder)>,
    pub ir_builder_set_insert_point:
        ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder, node: *mut Node)>,
    pub ir_builder_insert_point:
        ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder) -> *mut Node>,
    pub ir_build_call: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *mut IrBuilder,
            func: *mut CFunc,
            args: Slice<*const Node>,
            ty: *const Type,
        ) -> *mut Node,
    >,
    pub ir_build_call_tag: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *mut IrBuilder,
            tag: RustyFuncTag,
            args: Slice<*const Node>,
            ty: *const Type,
        ) -> *mut Node,
    >,
    pub ir_build_if: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *mut IrBuilder,
            cond: *const Node,
            true_branch: *const BasicBlock,
            false_branch: *const BasicBlock,
        ) -> *mut Node,
    >,
    pub ir_build_generic_loop: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *mut IrBuilder,
            prepare: *const BasicBlock,
            cond: *const Node,
            body: *const BasicBlock,
            update: *const BasicBlock,
        ) -> *mut Node,
    >,
    pub ir_build_switch: ::std::option::Option<
        unsafe extern "C" fn(
            builder: *mut IrBuilder,
            value: *const Node,
            cases: Slice<SwitchCase>,
            default_: *const BasicBlock,
        ) -> *mut Node,
    >,
    pub ir_build_local: ::std::option::Option<
        unsafe extern "C" fn(builder: *mut IrBuilder, init: *const Node) -> *mut Node,
    >,
    pub ir_build_break:
        ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder) -> *mut Node>,
    pub ir_build_continue:
        ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder) -> *mut Node>,
    pub ir_build_return: ::std::option::Option<
        unsafe extern "C" fn(builder: *mut IrBuilder, value: *const Node) -> *mut Node,
    >,
    pub ir_builder_finish:
        ::std::option::Option<unsafe extern "C" fn(builder: *mut IrBuilder) -> *const BasicBlock>,
}
#[test]
fn bindgen_test_layout_IrV2BindingTable() {
    const UNINIT: ::std::mem::MaybeUninit<IrV2BindingTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IrV2BindingTable>(),
        1840usize,
        concat!("Size of: ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IrV2BindingTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AssumeFn) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AssumeFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_UnreachableFn) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_UnreachableFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicExchangeFn) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicExchangeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicCompareExchangeFn) as usize
                - ptr as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicCompareExchangeFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAddFn) as usize - ptr as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAddFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchSubFn) as usize - ptr as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchSubFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAndFn) as usize - ptr as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAndFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchOrFn) as usize - ptr as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchOrFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchXorFn) as usize - ptr as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchXorFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMinFn) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMinFn)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMaxFn) as usize - ptr as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMaxFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CallableFn) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CallableFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CpuExtFn) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CpuExtFn)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_tag) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_msg) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_set_msg) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AssumeFn_new) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AssumeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_msg) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_set_msg) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UnreachableFn_new) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UnreachableFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_ty) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_set_ty) as usize - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicExchangeFn_new) as usize - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_ty) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_set_ty) as usize
                - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchangeFn_new) as usize - ptr as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchangeFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_ty) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_set_ty) as usize - ptr as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAddFn_new) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAddFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_ty) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_set_ty) as usize - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSubFn_new) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSubFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_ty) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_set_ty) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAndFn_new) as usize - ptr as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAndFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_ty) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_set_ty) as usize - ptr as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOrFn_new) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOrFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_ty) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_set_ty) as usize - ptr as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXorFn_new) as usize - ptr as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXorFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_ty) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_set_ty) as usize - ptr as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMinFn_new) as usize - ptr as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMinFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_ty) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_set_ty) as usize - ptr as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMaxFn_new) as usize - ptr as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMaxFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_module) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_set_module) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_set_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallableFn_new) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallableFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_f) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_set_f) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_set_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExtFn_new) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExtFn_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_new) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ArgumentInst) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ArgumentInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ConstantInst) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ConstantInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_CallInst) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_CallInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_PhiInst) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_PhiInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_IfInst) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_IfInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_GenericLoopInst) as usize - ptr as usize
        },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_GenericLoopInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_SwitchInst) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_SwitchInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_LocalInst) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_LocalInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_ReturnInst) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_ReturnInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_PrintInst) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_PrintInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_UpdateInst) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_UpdateInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_RayQueryInst) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RayQueryInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_RevAutodiffInst) as usize - ptr as usize
        },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RevAutodiffInst)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_FwdAutodiffInst) as usize - ptr as usize
        },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_FwdAutodiffInst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_tag) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_by_value) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_set_by_value) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_set_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ArgumentInst_new) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ArgumentInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_ty) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_value) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_set_ty) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_set_value) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstantInst_new) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ConstantInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_func) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_args) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_set_func) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_set_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_set_args) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CallInst_new) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CallInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_incomings) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_set_incomings) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_set_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PhiInst_new) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PhiInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_cond) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_true_branch) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_false_branch) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_cond) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_true_branch) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_set_false_branch) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_set_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IfInst_new) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(IfInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_prepare) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_cond) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_body) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_update) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_prepare) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_cond) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_body) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_set_update) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_set_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoopInst_new) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoopInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_value) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_cases) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_default_) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_value) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_cases) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_set_default_) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_set_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SwitchInst_new) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(SwitchInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_init) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_set_init) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_set_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LocalInst_new) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(LocalInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_value) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_set_value) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReturnInst_new) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ReturnInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_fmt) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_args) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_set_fmt) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_set_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_set_args) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PrintInst_new) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(PrintInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_var) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_value) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_set_var) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_set_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_set_value) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UpdateInst_new) as usize - ptr as usize },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(UpdateInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_query) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_on_triangle_hit) as usize - ptr as usize
        },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_on_procedural_hit) as usize - ptr as usize
        },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_set_query) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_set_on_triangle_hit) as usize - ptr as usize
        },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQueryInst_set_on_procedural_hit) as usize - ptr as usize
        },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_set_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQueryInst_new) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQueryInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_body) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_set_body) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiffInst_new) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiffInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_body) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_set_body) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiffInst_new) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiffInst_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_new) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func_metadata) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(func_metadata)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_BufferBinding) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BufferBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_TextureBinding) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_TextureBinding)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Binding_as_BindlessArrayBinding) as usize - ptr as usize
        },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BindlessArrayBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_AccelBinding) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_AccelBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_tag) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_handle) as usize - ptr as usize },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_offset) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_size) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_handle) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_offset) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_size) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_new) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_handle) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_level) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_handle) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_level) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_new) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_handle) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_handle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_set_handle) as usize - ptr as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_new) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_handle) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_set_handle) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_new) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_new) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_extract) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_extract)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_size) as usize - ptr as usize },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_alignment) as usize - ptr as usize },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_tag) as usize - ptr as usize },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_scalar) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_scalar)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_bool) as usize - ptr as usize },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_bool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_int16) as usize - ptr as usize },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_int32) as usize - ptr as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_int64) as usize - ptr as usize },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_uint16) as usize - ptr as usize },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_uint32) as usize - ptr as usize },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_uint64) as usize - ptr as usize },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_float16) as usize - ptr as usize },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_float16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_float32) as usize - ptr as usize },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_array) as usize - ptr as usize },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_vector) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_struct) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_struct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_custom) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_is_matrix) as usize - ptr as usize },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_is_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_element) as usize - ptr as usize },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_description) as usize - ptr as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_description)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_dimension) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_dimension)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_members) as usize - ptr as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_members)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_struct) as usize - ptr as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(make_struct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_array) as usize - ptr as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(make_array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_vector) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(make_vector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_matrix) as usize - ptr as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(make_matrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).make_custom) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(make_custom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_desc) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(from_desc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_bool) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_bool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_int16) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_int16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_int32) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_int32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_int64) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_int64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_uint16) as usize - ptr as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_uint16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_uint32) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_uint32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_uint64) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_uint64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_float16) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_float16)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_float32) as usize - ptr as usize },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(type_float32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_prev) as usize - ptr as usize },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_next) as usize - ptr as usize },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_inst) as usize - ptr as usize },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_inst)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_type) as usize - ptr as usize },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_get_index) as usize - ptr as usize },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_get_index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basic_block_first) as usize - ptr as usize },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(basic_block_first)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).basic_block_last) as usize - ptr as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(basic_block_last)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_unlink) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_set_next) as usize - ptr as usize },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_set_next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_set_prev) as usize - ptr as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_set_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).node_replace) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(node_replace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_new) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(pool_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_drop) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(pool_drop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pool_clone) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(pool_clone)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_new) as usize - ptr as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_new)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_new_without_bb) as usize - ptr as usize },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_new_without_bb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_drop) as usize - ptr as usize },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_drop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_set_insert_point) as usize - ptr as usize },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_set_insert_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_insert_point) as usize - ptr as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_insert_point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_call) as usize - ptr as usize },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_call_tag) as usize - ptr as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_call_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_if) as usize - ptr as usize },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_if)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_generic_loop) as usize - ptr as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_generic_loop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_switch) as usize - ptr as usize },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_switch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_local) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_break) as usize - ptr as usize },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_break)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_continue) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_continue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_build_return) as usize - ptr as usize },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_build_return)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ir_builder_finish) as usize - ptr as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(ir_builder_finish)
        )
    );
}
