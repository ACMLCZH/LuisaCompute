/* automatically generated by rust-bindgen 0.68.1 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 1;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 143;
pub const _MSVC_STL_UPDATE: u32 = 202305;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 1;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 1;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & [u8 ; 167] = b"Unsupported facet specialization; see N4950 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this error.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_any: u32 = 201606;
pub const __cpp_lib_apply: u32 = 201603;
pub const __cpp_lib_atomic_is_always_lock_free: u32 = 201603;
pub const __cpp_lib_boyer_moore_searcher: u32 = 201603;
pub const __cpp_lib_byte: u32 = 201603;
pub const __cpp_lib_clamp: u32 = 201603;
pub const __cpp_lib_filesystem: u32 = 201703;
pub const __cpp_lib_gcd_lcm: u32 = 201606;
pub const __cpp_lib_hardware_interference_size: u32 = 201703;
pub const __cpp_lib_has_unique_object_representations: u32 = 201606;
pub const __cpp_lib_hypot: u32 = 201603;
pub const __cpp_lib_is_aggregate: u32 = 201703;
pub const __cpp_lib_is_invocable: u32 = 201703;
pub const __cpp_lib_is_swappable: u32 = 201603;
pub const __cpp_lib_launder: u32 = 201606;
pub const __cpp_lib_make_from_tuple: u32 = 201606;
pub const __cpp_lib_math_special_functions: u32 = 201603;
pub const __cpp_lib_memory_resource: u32 = 201603;
pub const __cpp_lib_node_extract: u32 = 201606;
pub const __cpp_lib_not_fn: u32 = 201603;
pub const __cpp_lib_parallel_algorithm: u32 = 201603;
pub const __cpp_lib_raw_memory_algorithms: u32 = 201606;
pub const __cpp_lib_sample: u32 = 201603;
pub const __cpp_lib_scoped_lock: u32 = 201703;
pub const __cpp_lib_shared_ptr_weak_type: u32 = 201606;
pub const __cpp_lib_string_view: u32 = 201803;
pub const __cpp_lib_to_chars: u32 = 201611;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_array_constexpr: u32 = 201803;
pub const __cpp_lib_chrono: u32 = 201611;
pub const __cpp_lib_execution: u32 = 201603;
pub const __cpp_lib_optional: u32 = 201606;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_variant: u32 = 202102;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN7: u32 = 1537;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1537;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    false;
pub type __vcrt_va_list_is_reference__bindgen_ty_1 = bool;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Type {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Node {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasicBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CallableModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Module {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KernelModule {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PhiIncoming {
    pub block: *mut BasicBlock,
    pub value: *mut Node,
}
#[test]
fn bindgen_test_layout_PhiIncoming() {
    const UNINIT: ::std::mem::MaybeUninit<PhiIncoming> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PhiIncoming>(),
        16usize,
        concat!("Size of: ", stringify!(PhiIncoming))
    );
    assert_eq!(
        ::std::mem::align_of::<PhiIncoming>(),
        8usize,
        concat!("Alignment of ", stringify!(PhiIncoming))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(block)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PhiIncoming),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SwitchCase {
    pub value: i32,
    pub block: *mut BasicBlock,
}
#[test]
fn bindgen_test_layout_SwitchCase() {
    const UNINIT: ::std::mem::MaybeUninit<SwitchCase> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SwitchCase>(),
        16usize,
        concat!("Size of: ", stringify!(SwitchCase))
    );
    assert_eq!(
        ::std::mem::align_of::<SwitchCase>(),
        8usize,
        concat!("Alignment of ", stringify!(SwitchCase))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).block) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SwitchCase),
            "::",
            stringify!(block)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuExternFn {
    pub data: *mut ::std::os::raw::c_void,
    pub func: ::std::option::Option<
        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, args: *mut ::std::os::raw::c_void),
    >,
    pub dtor: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    pub arg_ty: *const Type,
}
#[test]
fn bindgen_test_layout_CpuExternFn() {
    const UNINIT: ::std::mem::MaybeUninit<CpuExternFn> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<CpuExternFn>(),
        32usize,
        concat!("Size of: ", stringify!(CpuExternFn))
    );
    assert_eq!(
        ::std::mem::align_of::<CpuExternFn>(),
        8usize,
        concat!("Alignment of ", stringify!(CpuExternFn))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).func) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dtor) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(dtor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).arg_ty) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(CpuExternFn),
            "::",
            stringify!(arg_ty)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Func {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Zero {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct One {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Assume {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Unreachable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ThreadId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BlockId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpLaneId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropagateGradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OutputGradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RequiresGradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Backward {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gradient {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccGrad {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Detach {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceTransform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceVisibilityMask {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingInstanceUserId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceTransform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceOpacity {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceVisibility {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingSetInstanceUserId {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingTraceClosest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingTraceAny {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingQueryAll {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayTracingQueryAny {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryWorldSpaceRay {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryProceduralCandidateHit {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryTriangleCandidateHit {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommittedHit {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommitTriangle {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryCommitdProcedural {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQueryTerminate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Load {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cast {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitCast {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Add {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sub {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mul {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Div {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rem {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitAnd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitOr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitXor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Shl {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Shr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RotRight {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RotLeft {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Eq {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ne {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Lt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Le {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ge {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatCompMul {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Neg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Not {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BitNot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct All {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Any {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Select {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clamp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Lerp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Step {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Saturate {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SmoothStep {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Abs {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Min {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Max {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceSum {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceProd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceMin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReduceMax {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clz {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ctz {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PopCount {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Reverse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IsInf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IsNan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Acos {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Acosh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Asin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Asinh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Atan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Atan2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Atanh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cos {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cosh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sinh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tanh {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Exp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Exp2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Exp10 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Log10 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Powi {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Powf {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Sqrt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rsqrt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Ceil {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Floor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fract {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Trunc {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Round {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Fma {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Copysign {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cross {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Dot {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OuterProduct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Length {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LengthSquared {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Normalize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Faceforward {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Distance {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Reflect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Determinant {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Transpose {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Inverse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpIsFirstActiveLane {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpFirstActiveLane {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAllEqual {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitAnd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitOr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitXor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveCountBits {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveMax {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveMin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveProduct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveSum {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAll {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveAny {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpActiveBitMask {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixCountBits {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixSum {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpPrefixProduct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpReadLaneAt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WarpReadFirstLane {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SynchronizeBlock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicExchange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicCompareExchange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchAdd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchSub {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchAnd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchOr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchXor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchMin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AtomicFetchMax {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ByteBufferSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2dSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3dSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSample {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleGrad {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSampleGradLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture2dSizeLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSample {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleGrad {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSampleGradLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessTexture3dSizeLevel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessBufferSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferWrite {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferRead {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessByteBufferSize {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec3 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Vec4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Permute {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GetElementPtr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtractElement {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InsertElement {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Array {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Struct {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatFull {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat2 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat3 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Mat4 {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicExchange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicCompareExchange {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAdd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchSub {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchAnd {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchOr {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchXor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMin {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessAtomicFetchMax {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Callable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CpuExt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ShaderExecutionReorder {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum FuncTag {
    ZERO = 0,
    ONE = 1,
    ASSUME = 2,
    UNREACHABLE = 3,
    THREAD_ID = 4,
    BLOCK_ID = 5,
    WARP_SIZE = 6,
    WARP_LANE_ID = 7,
    DISPATCH_ID = 8,
    DISPATCH_SIZE = 9,
    PROPAGATE_GRADIENT = 10,
    OUTPUT_GRADIENT = 11,
    REQUIRES_GRADIENT = 12,
    BACKWARD = 13,
    GRADIENT = 14,
    ACC_GRAD = 15,
    DETACH = 16,
    RAY_TRACING_INSTANCE_TRANSFORM = 17,
    RAY_TRACING_INSTANCE_VISIBILITY_MASK = 18,
    RAY_TRACING_INSTANCE_USER_ID = 19,
    RAY_TRACING_SET_INSTANCE_TRANSFORM = 20,
    RAY_TRACING_SET_INSTANCE_OPACITY = 21,
    RAY_TRACING_SET_INSTANCE_VISIBILITY = 22,
    RAY_TRACING_SET_INSTANCE_USER_ID = 23,
    RAY_TRACING_TRACE_CLOSEST = 24,
    RAY_TRACING_TRACE_ANY = 25,
    RAY_TRACING_QUERY_ALL = 26,
    RAY_TRACING_QUERY_ANY = 27,
    RAY_QUERY_WORLD_SPACE_RAY = 28,
    RAY_QUERY_PROCEDURAL_CANDIDATE_HIT = 29,
    RAY_QUERY_TRIANGLE_CANDIDATE_HIT = 30,
    RAY_QUERY_COMMITTED_HIT = 31,
    RAY_QUERY_COMMIT_TRIANGLE = 32,
    RAY_QUERY_COMMITD_PROCEDURAL = 33,
    RAY_QUERY_TERMINATE = 34,
    LOAD = 35,
    CAST = 36,
    BIT_CAST = 37,
    ADD = 38,
    SUB = 39,
    MUL = 40,
    DIV = 41,
    REM = 42,
    BIT_AND = 43,
    BIT_OR = 44,
    BIT_XOR = 45,
    SHL = 46,
    SHR = 47,
    ROT_RIGHT = 48,
    ROT_LEFT = 49,
    EQ = 50,
    NE = 51,
    LT = 52,
    LE = 53,
    GT = 54,
    GE = 55,
    MAT_COMP_MUL = 56,
    NEG = 57,
    NOT = 58,
    BIT_NOT = 59,
    ALL = 60,
    ANY = 61,
    SELECT = 62,
    CLAMP = 63,
    LERP = 64,
    STEP = 65,
    SATURATE = 66,
    SMOOTH_STEP = 67,
    ABS = 68,
    MIN = 69,
    MAX = 70,
    REDUCE_SUM = 71,
    REDUCE_PROD = 72,
    REDUCE_MIN = 73,
    REDUCE_MAX = 74,
    CLZ = 75,
    CTZ = 76,
    POP_COUNT = 77,
    REVERSE = 78,
    IS_INF = 79,
    IS_NAN = 80,
    ACOS = 81,
    ACOSH = 82,
    ASIN = 83,
    ASINH = 84,
    ATAN = 85,
    ATAN2 = 86,
    ATANH = 87,
    COS = 88,
    COSH = 89,
    SIN = 90,
    SINH = 91,
    TAN = 92,
    TANH = 93,
    EXP = 94,
    EXP2 = 95,
    EXP10 = 96,
    LOG = 97,
    LOG2 = 98,
    LOG10 = 99,
    POWI = 100,
    POWF = 101,
    SQRT = 102,
    RSQRT = 103,
    CEIL = 104,
    FLOOR = 105,
    FRACT = 106,
    TRUNC = 107,
    ROUND = 108,
    FMA = 109,
    COPYSIGN = 110,
    CROSS = 111,
    DOT = 112,
    OUTER_PRODUCT = 113,
    LENGTH = 114,
    LENGTH_SQUARED = 115,
    NORMALIZE = 116,
    FACEFORWARD = 117,
    DISTANCE = 118,
    REFLECT = 119,
    DETERMINANT = 120,
    TRANSPOSE = 121,
    INVERSE = 122,
    WARP_IS_FIRST_ACTIVE_LANE = 123,
    WARP_FIRST_ACTIVE_LANE = 124,
    WARP_ACTIVE_ALL_EQUAL = 125,
    WARP_ACTIVE_BIT_AND = 126,
    WARP_ACTIVE_BIT_OR = 127,
    WARP_ACTIVE_BIT_XOR = 128,
    WARP_ACTIVE_COUNT_BITS = 129,
    WARP_ACTIVE_MAX = 130,
    WARP_ACTIVE_MIN = 131,
    WARP_ACTIVE_PRODUCT = 132,
    WARP_ACTIVE_SUM = 133,
    WARP_ACTIVE_ALL = 134,
    WARP_ACTIVE_ANY = 135,
    WARP_ACTIVE_BIT_MASK = 136,
    WARP_PREFIX_COUNT_BITS = 137,
    WARP_PREFIX_SUM = 138,
    WARP_PREFIX_PRODUCT = 139,
    WARP_READ_LANE_AT = 140,
    WARP_READ_FIRST_LANE = 141,
    SYNCHRONIZE_BLOCK = 142,
    ATOMIC_EXCHANGE = 143,
    ATOMIC_COMPARE_EXCHANGE = 144,
    ATOMIC_FETCH_ADD = 145,
    ATOMIC_FETCH_SUB = 146,
    ATOMIC_FETCH_AND = 147,
    ATOMIC_FETCH_OR = 148,
    ATOMIC_FETCH_XOR = 149,
    ATOMIC_FETCH_MIN = 150,
    ATOMIC_FETCH_MAX = 151,
    BUFFER_WRITE = 152,
    BUFFER_READ = 153,
    BUFFER_SIZE = 154,
    BYTE_BUFFER_WRITE = 155,
    BYTE_BUFFER_READ = 156,
    BYTE_BUFFER_SIZE = 157,
    TEXTURE2D_READ = 158,
    TEXTURE2D_WRITE = 159,
    TEXTURE2D_SIZE = 160,
    TEXTURE3D_READ = 161,
    TEXTURE3D_WRITE = 162,
    TEXTURE3D_SIZE = 163,
    BINDLESS_TEXTURE2D_SAMPLE = 164,
    BINDLESS_TEXTURE2D_SAMPLE_LEVEL = 165,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD = 166,
    BINDLESS_TEXTURE2D_SAMPLE_GRAD_LEVEL = 167,
    BINDLESS_TEXTURE2D_READ = 168,
    BINDLESS_TEXTURE2D_SIZE = 169,
    BINDLESS_TEXTURE2D_SIZE_LEVEL = 170,
    BINDLESS_TEXTURE3D_SAMPLE = 171,
    BINDLESS_TEXTURE3D_SAMPLE_LEVEL = 172,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD = 173,
    BINDLESS_TEXTURE3D_SAMPLE_GRAD_LEVEL = 174,
    BINDLESS_TEXTURE3D_READ = 175,
    BINDLESS_TEXTURE3D_SIZE = 176,
    BINDLESS_TEXTURE3D_SIZE_LEVEL = 177,
    BINDLESS_BUFFER_WRITE = 178,
    BINDLESS_BUFFER_READ = 179,
    BINDLESS_BUFFER_SIZE = 180,
    BINDLESS_BYTE_BUFFER_WRITE = 181,
    BINDLESS_BYTE_BUFFER_READ = 182,
    BINDLESS_BYTE_BUFFER_SIZE = 183,
    VEC = 184,
    VEC2 = 185,
    VEC3 = 186,
    VEC4 = 187,
    PERMUTE = 188,
    GET_ELEMENT_PTR = 189,
    EXTRACT_ELEMENT = 190,
    INSERT_ELEMENT = 191,
    ARRAY = 192,
    STRUCT = 193,
    MAT_FULL = 194,
    MAT2 = 195,
    MAT3 = 196,
    MAT4 = 197,
    BINDLESS_ATOMIC_EXCHANGE = 198,
    BINDLESS_ATOMIC_COMPARE_EXCHANGE = 199,
    BINDLESS_ATOMIC_FETCH_ADD = 200,
    BINDLESS_ATOMIC_FETCH_SUB = 201,
    BINDLESS_ATOMIC_FETCH_AND = 202,
    BINDLESS_ATOMIC_FETCH_OR = 203,
    BINDLESS_ATOMIC_FETCH_XOR = 204,
    BINDLESS_ATOMIC_FETCH_MIN = 205,
    BINDLESS_ATOMIC_FETCH_MAX = 206,
    CALLABLE = 207,
    CPU_EXT = 208,
    SHADER_EXECUTION_REORDER = 209,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Instruction {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Buffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture2d {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Texture3d {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessArray {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Accel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Shared {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Uniform {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Argument {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Constant {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Call {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Phi {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BasicBlockSentinel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct If {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GenericLoop {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Switch {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Local {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Break {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Continue {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Return {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Print {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Update {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RayQuery {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RevAutodiff {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FwdAutodiff {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum InstructionTag {
    BUFFER = 0,
    TEXTURE2D = 1,
    TEXTURE3D = 2,
    BINDLESS_ARRAY = 3,
    ACCEL = 4,
    SHARED = 5,
    UNIFORM = 6,
    ARGUMENT = 7,
    CONSTANT = 8,
    CALL = 9,
    PHI = 10,
    BASIC_BLOCK_SENTINEL = 11,
    IF = 12,
    GENERIC_LOOP = 13,
    SWITCH = 14,
    LOCAL = 15,
    BREAK = 16,
    CONTINUE = 17,
    RETURN = 18,
    PRINT = 19,
    UPDATE = 20,
    RAY_QUERY = 21,
    REV_AUTODIFF = 22,
    FWD_AUTODIFF = 23,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Binding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TextureBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BindlessArrayBinding {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AccelBinding {
    _unused: [u8; 0],
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BindingTag {
    BUFFER_BINDING = 0,
    TEXTURE_BINDING = 1,
    BINDLESS_ARRAY_BINDING = 2,
    ACCEL_BINDING = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slice<T> {
    pub data: *mut T,
    pub len: usize,
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<T>>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IrV2BindingTable {
    pub Func_as_Zero: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Zero>,
    pub Func_as_One: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut One>,
    pub Func_as_Assume:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Assume>,
    pub Func_as_Unreachable:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Unreachable>,
    pub Func_as_ThreadId:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ThreadId>,
    pub Func_as_BlockId:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BlockId>,
    pub Func_as_WarpSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpSize>,
    pub Func_as_WarpLaneId:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpLaneId>,
    pub Func_as_DispatchId:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DispatchId>,
    pub Func_as_DispatchSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut DispatchSize>,
    pub Func_as_PropagateGradient:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PropagateGradient>,
    pub Func_as_OutputGradient:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut OutputGradient>,
    pub Func_as_RequiresGradient:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RequiresGradient>,
    pub Func_as_Backward:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Backward>,
    pub Func_as_Gradient:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Gradient>,
    pub Func_as_AccGrad:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AccGrad>,
    pub Func_as_Detach:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Detach>,
    pub Func_as_RayTracingInstanceTransform: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceTransform,
    >,
    pub Func_as_RayTracingInstanceVisibilityMask: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceVisibilityMask,
    >,
    pub Func_as_RayTracingInstanceUserId: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingInstanceUserId,
    >,
    pub Func_as_RayTracingSetInstanceTransform: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceTransform,
    >,
    pub Func_as_RayTracingSetInstanceOpacity: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceOpacity,
    >,
    pub Func_as_RayTracingSetInstanceVisibility: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceVisibility,
    >,
    pub Func_as_RayTracingSetInstanceUserId: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingSetInstanceUserId,
    >,
    pub Func_as_RayTracingTraceClosest: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingTraceClosest,
    >,
    pub Func_as_RayTracingTraceAny:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingTraceAny>,
    pub Func_as_RayTracingQueryAll:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingQueryAll>,
    pub Func_as_RayTracingQueryAny:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayTracingQueryAny>,
    pub Func_as_RayQueryWorldSpaceRay:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryWorldSpaceRay>,
    pub Func_as_RayQueryProceduralCandidateHit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryProceduralCandidateHit,
    >,
    pub Func_as_RayQueryTriangleCandidateHit: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryTriangleCandidateHit,
    >,
    pub Func_as_RayQueryCommittedHit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommittedHit>,
    pub Func_as_RayQueryCommitTriangle: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommitTriangle,
    >,
    pub Func_as_RayQueryCommitdProcedural: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryCommitdProcedural,
    >,
    pub Func_as_RayQueryTerminate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RayQueryTerminate>,
    pub Func_as_Load: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Load>,
    pub Func_as_Cast: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Cast>,
    pub Func_as_BitCast:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitCast>,
    pub Func_as_Add: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Add>,
    pub Func_as_Sub: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Sub>,
    pub Func_as_Mul: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mul>,
    pub Func_as_Div: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Div>,
    pub Func_as_Rem: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Rem>,
    pub Func_as_BitAnd:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitAnd>,
    pub Func_as_BitOr: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitOr>,
    pub Func_as_BitXor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitXor>,
    pub Func_as_Shl: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Shl>,
    pub Func_as_Shr: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Shr>,
    pub Func_as_RotRight:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RotRight>,
    pub Func_as_RotLeft:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut RotLeft>,
    pub Func_as_Eq: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Eq>,
    pub Func_as_Ne: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Ne>,
    pub Func_as_Lt: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Lt>,
    pub Func_as_Le: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Le>,
    pub Func_as_Gt: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Gt>,
    pub Func_as_Ge: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Ge>,
    pub Func_as_MatCompMul:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MatCompMul>,
    pub Func_as_Neg: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Neg>,
    pub Func_as_Not: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Not>,
    pub Func_as_BitNot:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BitNot>,
    pub Func_as_All: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut All>,
    pub Func_as_Any: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Any>,
    pub Func_as_Select:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Select>,
    pub Func_as_Clamp: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Clamp>,
    pub Func_as_Lerp: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Lerp>,
    pub Func_as_Step: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Step>,
    pub Func_as_Saturate:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Saturate>,
    pub Func_as_SmoothStep:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SmoothStep>,
    pub Func_as_Abs: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Abs>,
    pub Func_as_Min: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Min>,
    pub Func_as_Max: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Max>,
    pub Func_as_ReduceSum:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceSum>,
    pub Func_as_ReduceProd:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceProd>,
    pub Func_as_ReduceMin:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceMin>,
    pub Func_as_ReduceMax:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ReduceMax>,
    pub Func_as_Clz: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Clz>,
    pub Func_as_Ctz: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Ctz>,
    pub Func_as_PopCount:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut PopCount>,
    pub Func_as_Reverse:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Reverse>,
    pub Func_as_IsInf: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut IsInf>,
    pub Func_as_IsNan: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut IsNan>,
    pub Func_as_Acos: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Acos>,
    pub Func_as_Acosh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Acosh>,
    pub Func_as_Asin: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Asin>,
    pub Func_as_Asinh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Asinh>,
    pub Func_as_Atan: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Atan>,
    pub Func_as_Atan2: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Atan2>,
    pub Func_as_Atanh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Atanh>,
    pub Func_as_Cos: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Cos>,
    pub Func_as_Cosh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Cosh>,
    pub Func_as_Sin: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Sin>,
    pub Func_as_Sinh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Sinh>,
    pub Func_as_Tan: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Tan>,
    pub Func_as_Tanh: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Tanh>,
    pub Func_as_Exp: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Exp>,
    pub Func_as_Exp2: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Exp2>,
    pub Func_as_Exp10: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Exp10>,
    pub Func_as_Log: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Log>,
    pub Func_as_Log2: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Log2>,
    pub Func_as_Log10: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Log10>,
    pub Func_as_Powi: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Powi>,
    pub Func_as_Powf: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Powf>,
    pub Func_as_Sqrt: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Sqrt>,
    pub Func_as_Rsqrt: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Rsqrt>,
    pub Func_as_Ceil: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Ceil>,
    pub Func_as_Floor: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Floor>,
    pub Func_as_Fract: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Fract>,
    pub Func_as_Trunc: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Trunc>,
    pub Func_as_Round: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Round>,
    pub Func_as_Fma: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Fma>,
    pub Func_as_Copysign:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Copysign>,
    pub Func_as_Cross: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Cross>,
    pub Func_as_Dot: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Dot>,
    pub Func_as_OuterProduct:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut OuterProduct>,
    pub Func_as_Length:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Length>,
    pub Func_as_LengthSquared:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut LengthSquared>,
    pub Func_as_Normalize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Normalize>,
    pub Func_as_Faceforward:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Faceforward>,
    pub Func_as_Distance:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Distance>,
    pub Func_as_Reflect:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Reflect>,
    pub Func_as_Determinant:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Determinant>,
    pub Func_as_Transpose:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Transpose>,
    pub Func_as_Inverse:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Inverse>,
    pub Func_as_WarpIsFirstActiveLane:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpIsFirstActiveLane>,
    pub Func_as_WarpFirstActiveLane:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpFirstActiveLane>,
    pub Func_as_WarpActiveAllEqual:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAllEqual>,
    pub Func_as_WarpActiveBitAnd:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitAnd>,
    pub Func_as_WarpActiveBitOr:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitOr>,
    pub Func_as_WarpActiveBitXor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitXor>,
    pub Func_as_WarpActiveCountBits:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveCountBits>,
    pub Func_as_WarpActiveMax:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveMax>,
    pub Func_as_WarpActiveMin:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveMin>,
    pub Func_as_WarpActiveProduct:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveProduct>,
    pub Func_as_WarpActiveSum:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveSum>,
    pub Func_as_WarpActiveAll:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAll>,
    pub Func_as_WarpActiveAny:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveAny>,
    pub Func_as_WarpActiveBitMask:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpActiveBitMask>,
    pub Func_as_WarpPrefixCountBits:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixCountBits>,
    pub Func_as_WarpPrefixSum:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixSum>,
    pub Func_as_WarpPrefixProduct:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpPrefixProduct>,
    pub Func_as_WarpReadLaneAt:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpReadLaneAt>,
    pub Func_as_WarpReadFirstLane:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut WarpReadFirstLane>,
    pub Func_as_SynchronizeBlock:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut SynchronizeBlock>,
    pub Func_as_AtomicExchange:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicExchange>,
    pub Func_as_AtomicCompareExchange:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicCompareExchange>,
    pub Func_as_AtomicFetchAdd:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchAdd>,
    pub Func_as_AtomicFetchSub:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchSub>,
    pub Func_as_AtomicFetchAnd:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchAnd>,
    pub Func_as_AtomicFetchOr:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchOr>,
    pub Func_as_AtomicFetchXor:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchXor>,
    pub Func_as_AtomicFetchMin:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchMin>,
    pub Func_as_AtomicFetchMax:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut AtomicFetchMax>,
    pub Func_as_BufferWrite:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferWrite>,
    pub Func_as_BufferRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferRead>,
    pub Func_as_BufferSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BufferSize>,
    pub Func_as_ByteBufferWrite:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferWrite>,
    pub Func_as_ByteBufferRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferRead>,
    pub Func_as_ByteBufferSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ByteBufferSize>,
    pub Func_as_Texture2dRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dRead>,
    pub Func_as_Texture2dWrite:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dWrite>,
    pub Func_as_Texture2dSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture2dSize>,
    pub Func_as_Texture3dRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dRead>,
    pub Func_as_Texture3dWrite:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dWrite>,
    pub Func_as_Texture3dSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Texture3dSize>,
    pub Func_as_BindlessTexture2dSample: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSample,
    >,
    pub Func_as_BindlessTexture2dSampleLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleLevel,
    >,
    pub Func_as_BindlessTexture2dSampleGrad: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleGrad,
    >,
    pub Func_as_BindlessTexture2dSampleGradLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSampleGradLevel,
    >,
    pub Func_as_BindlessTexture2dRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dRead>,
    pub Func_as_BindlessTexture2dSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSize>,
    pub Func_as_BindlessTexture2dSizeLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture2dSizeLevel,
    >,
    pub Func_as_BindlessTexture3dSample: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSample,
    >,
    pub Func_as_BindlessTexture3dSampleLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleLevel,
    >,
    pub Func_as_BindlessTexture3dSampleGrad: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleGrad,
    >,
    pub Func_as_BindlessTexture3dSampleGradLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSampleGradLevel,
    >,
    pub Func_as_BindlessTexture3dRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dRead>,
    pub Func_as_BindlessTexture3dSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSize>,
    pub Func_as_BindlessTexture3dSizeLevel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessTexture3dSizeLevel,
    >,
    pub Func_as_BindlessBufferWrite:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferWrite>,
    pub Func_as_BindlessBufferRead:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferRead>,
    pub Func_as_BindlessBufferSize:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessBufferSize>,
    pub Func_as_BindlessByteBufferWrite: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferWrite,
    >,
    pub Func_as_BindlessByteBufferRead: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferRead,
    >,
    pub Func_as_BindlessByteBufferSize: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessByteBufferSize,
    >,
    pub Func_as_Vec: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec>,
    pub Func_as_Vec2: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec2>,
    pub Func_as_Vec3: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec3>,
    pub Func_as_Vec4: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Vec4>,
    pub Func_as_Permute:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Permute>,
    pub Func_as_GetElementPtr:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut GetElementPtr>,
    pub Func_as_ExtractElement:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut ExtractElement>,
    pub Func_as_InsertElement:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut InsertElement>,
    pub Func_as_Array: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Array>,
    pub Func_as_Struct:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Struct>,
    pub Func_as_MatFull:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut MatFull>,
    pub Func_as_Mat2: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat2>,
    pub Func_as_Mat3: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat3>,
    pub Func_as_Mat4: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Mat4>,
    pub Func_as_BindlessAtomicExchange: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicExchange,
    >,
    pub Func_as_BindlessAtomicCompareExchange: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicCompareExchange,
    >,
    pub Func_as_BindlessAtomicFetchAdd: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchAdd,
    >,
    pub Func_as_BindlessAtomicFetchSub: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchSub,
    >,
    pub Func_as_BindlessAtomicFetchAnd: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchAnd,
    >,
    pub Func_as_BindlessAtomicFetchOr:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchOr>,
    pub Func_as_BindlessAtomicFetchXor: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchXor,
    >,
    pub Func_as_BindlessAtomicFetchMin: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchMin,
    >,
    pub Func_as_BindlessAtomicFetchMax: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut BindlessAtomicFetchMax,
    >,
    pub Func_as_Callable:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut Callable>,
    pub Func_as_CpuExt:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> *mut CpuExt>,
    pub Func_as_ShaderExecutionReorder: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Func) -> *mut ShaderExecutionReorder,
    >,
    pub Func_tag: ::std::option::Option<unsafe extern "C" fn(self_: *mut Func) -> FuncTag>,
    pub Assume_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Assume) -> Slice<::std::os::raw::c_char>,
    >,
    pub Assume_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Assume, value: Slice<::std::os::raw::c_char>),
    >,
    pub Unreachable_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Unreachable) -> Slice<::std::os::raw::c_char>,
    >,
    pub Unreachable_set_msg: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Unreachable, value: Slice<::std::os::raw::c_char>),
    >,
    pub BindlessAtomicExchange_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchange) -> *const Type,
    >,
    pub BindlessAtomicExchange_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicExchange, value: *const Type),
    >,
    pub BindlessAtomicCompareExchange_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchange) -> *const Type,
    >,
    pub BindlessAtomicCompareExchange_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicCompareExchange, value: *const Type),
    >,
    pub BindlessAtomicFetchAdd_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAdd) -> *const Type,
    >,
    pub BindlessAtomicFetchAdd_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAdd, value: *const Type),
    >,
    pub BindlessAtomicFetchSub_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSub) -> *const Type,
    >,
    pub BindlessAtomicFetchSub_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchSub, value: *const Type),
    >,
    pub BindlessAtomicFetchAnd_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAnd) -> *const Type,
    >,
    pub BindlessAtomicFetchAnd_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchAnd, value: *const Type),
    >,
    pub BindlessAtomicFetchOr_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOr) -> *const Type,
    >,
    pub BindlessAtomicFetchOr_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchOr, value: *const Type),
    >,
    pub BindlessAtomicFetchXor_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXor) -> *const Type,
    >,
    pub BindlessAtomicFetchXor_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchXor, value: *const Type),
    >,
    pub BindlessAtomicFetchMin_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMin) -> *const Type,
    >,
    pub BindlessAtomicFetchMin_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMin, value: *const Type),
    >,
    pub BindlessAtomicFetchMax_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMax) -> *const Type,
    >,
    pub BindlessAtomicFetchMax_set_ty: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut BindlessAtomicFetchMax, value: *const Type),
    >,
    pub Callable_module:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Callable) -> *mut CallableModule>,
    pub Callable_set_module: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Callable, value: *mut CallableModule),
    >,
    pub CpuExt_f: ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExt) -> CpuExternFn>,
    pub CpuExt_set_f:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut CpuExt, value: CpuExternFn)>,
    pub Instruction_as_Buffer:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Buffer>,
    pub Instruction_as_Texture2d:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Texture2d>,
    pub Instruction_as_Texture3d:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Texture3d>,
    pub Instruction_as_BindlessArray:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut BindlessArray>,
    pub Instruction_as_Accel:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Accel>,
    pub Instruction_as_Shared:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Shared>,
    pub Instruction_as_Uniform:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Uniform>,
    pub Instruction_as_Argument:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Argument>,
    pub Instruction_as_Constant:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Constant>,
    pub Instruction_as_Call:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Call>,
    pub Instruction_as_Phi:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Phi>,
    pub Instruction_as_BasicBlockSentinel: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Instruction) -> *mut BasicBlockSentinel,
    >,
    pub Instruction_as_If:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut If>,
    pub Instruction_as_GenericLoop:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut GenericLoop>,
    pub Instruction_as_Switch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Switch>,
    pub Instruction_as_Local:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Local>,
    pub Instruction_as_Break:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Break>,
    pub Instruction_as_Continue:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Continue>,
    pub Instruction_as_Return:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Return>,
    pub Instruction_as_Print:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Print>,
    pub Instruction_as_Update:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut Update>,
    pub Instruction_as_RayQuery:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut RayQuery>,
    pub Instruction_as_RevAutodiff:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut RevAutodiff>,
    pub Instruction_as_FwdAutodiff:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> *mut FwdAutodiff>,
    pub Instruction_tag:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Instruction) -> InstructionTag>,
    pub Argument_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Argument) -> bool>,
    pub Argument_set_by_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Argument, value: bool)>,
    pub Constant_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Constant) -> *const Type>,
    pub Constant_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Constant) -> Slice<u8>>,
    pub Constant_set_ty:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Constant, value: *const Type)>,
    pub Constant_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Constant, value: Slice<u8>)>,
    pub Call_func: ::std::option::Option<unsafe extern "C" fn(self_: *mut Call) -> *const Func>,
    pub Call_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Call) -> Slice<*mut Node>>,
    pub Call_set_func:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Call, value: *const Func)>,
    pub Call_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Call, value: Slice<*mut Node>)>,
    pub Phi_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Phi) -> Slice<PhiIncoming>>,
    pub Phi_set_incomings:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Phi, value: Slice<PhiIncoming>)>,
    pub If_cond: ::std::option::Option<unsafe extern "C" fn(self_: *mut If) -> *mut Node>,
    pub If_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut If) -> *mut BasicBlock>,
    pub If_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut If) -> *mut BasicBlock>,
    pub If_set_cond: ::std::option::Option<unsafe extern "C" fn(self_: *mut If, value: *mut Node)>,
    pub If_set_true_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut If, value: *mut BasicBlock)>,
    pub If_set_false_branch:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut If, value: *mut BasicBlock)>,
    pub GenericLoop_prepare:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoop) -> *mut BasicBlock>,
    pub GenericLoop_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoop) -> *mut Node>,
    pub GenericLoop_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoop) -> *mut BasicBlock>,
    pub GenericLoop_update:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoop) -> *mut BasicBlock>,
    pub GenericLoop_set_prepare: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoop, value: *mut BasicBlock),
    >,
    pub GenericLoop_set_cond:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut GenericLoop, value: *mut Node)>,
    pub GenericLoop_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoop, value: *mut BasicBlock),
    >,
    pub GenericLoop_set_update: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut GenericLoop, value: *mut BasicBlock),
    >,
    pub Switch_value: ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch) -> *mut Node>,
    pub Switch_cases:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch) -> Slice<SwitchCase>>,
    pub Switch_default_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch) -> *mut BasicBlock>,
    pub Switch_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch, value: *mut Node)>,
    pub Switch_set_cases:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch, value: Slice<SwitchCase>)>,
    pub Switch_set_default_:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Switch, value: *mut BasicBlock)>,
    pub Local_init: ::std::option::Option<unsafe extern "C" fn(self_: *mut Local) -> *mut Node>,
    pub Local_set_init:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Local, value: *mut Node)>,
    pub Return_value: ::std::option::Option<unsafe extern "C" fn(self_: *mut Return) -> *mut Node>,
    pub Return_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Return, value: *mut Node)>,
    pub Print_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Print) -> Slice<::std::os::raw::c_char>,
    >,
    pub Print_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Print) -> Slice<*mut Node>>,
    pub Print_set_fmt: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Print, value: Slice<::std::os::raw::c_char>),
    >,
    pub Print_set_args:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Print, value: Slice<*mut Node>)>,
    pub Update_var: ::std::option::Option<unsafe extern "C" fn(self_: *mut Update) -> *mut Node>,
    pub Update_value: ::std::option::Option<unsafe extern "C" fn(self_: *mut Update) -> *mut Node>,
    pub Update_set_var:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Update, value: *mut Node)>,
    pub Update_set_value:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Update, value: *mut Node)>,
    pub RayQuery_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery) -> *mut Node>,
    pub RayQuery_on_triangle_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery) -> *mut BasicBlock>,
    pub RayQuery_on_procedural_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery) -> *mut BasicBlock>,
    pub RayQuery_set_query:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery, value: *mut Node)>,
    pub RayQuery_set_on_triangle_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery, value: *mut BasicBlock)>,
    pub RayQuery_set_on_procedural_hit:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RayQuery, value: *mut BasicBlock)>,
    pub RevAutodiff_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut RevAutodiff) -> *mut BasicBlock>,
    pub RevAutodiff_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut RevAutodiff, value: *mut BasicBlock),
    >,
    pub FwdAutodiff_body:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut FwdAutodiff) -> *mut BasicBlock>,
    pub FwdAutodiff_set_body: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut FwdAutodiff, value: *mut BasicBlock),
    >,
    pub Binding_as_BufferBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut BufferBinding>,
    pub Binding_as_TextureBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut TextureBinding>,
    pub Binding_as_BindlessArrayBinding: ::std::option::Option<
        unsafe extern "C" fn(self_: *mut Binding) -> *mut BindlessArrayBinding,
    >,
    pub Binding_as_AccelBinding:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> *mut AccelBinding>,
    pub Binding_tag: ::std::option::Option<unsafe extern "C" fn(self_: *mut Binding) -> BindingTag>,
    pub BufferBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding) -> u64>,
    pub BufferBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_offset:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub BufferBinding_set_size:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BufferBinding, value: u64)>,
    pub TextureBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding) -> u64>,
    pub TextureBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub TextureBinding_set_level:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut TextureBinding, value: u64)>,
    pub BindlessArrayBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding) -> u64>,
    pub BindlessArrayBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut BindlessArrayBinding, value: u64)>,
    pub AccelBinding_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding) -> u64>,
    pub AccelBinding_set_handle:
        ::std::option::Option<unsafe extern "C" fn(self_: *mut AccelBinding, value: u64)>,
}
#[test]
fn bindgen_test_layout_IrV2BindingTable() {
    const UNINIT: ::std::mem::MaybeUninit<IrV2BindingTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<IrV2BindingTable>(),
        2680usize,
        concat!("Size of: ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        ::std::mem::align_of::<IrV2BindingTable>(),
        8usize,
        concat!("Alignment of ", stringify!(IrV2BindingTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Zero) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Zero)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_One) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_One)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Assume) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Assume)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Unreachable) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Unreachable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ThreadId) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ThreadId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BlockId) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BlockId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpLaneId) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpLaneId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DispatchId) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DispatchId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_DispatchSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_DispatchSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PropagateGradient) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PropagateGradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_OutputGradient) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_OutputGradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RequiresGradient) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RequiresGradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Backward) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Backward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Gradient) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Gradient)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AccGrad) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AccGrad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Detach) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Detach)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceTransform) as usize - ptr as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceTransform)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceVisibilityMask) as usize
                - ptr as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceVisibilityMask)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingInstanceUserId) as usize - ptr as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingInstanceUserId)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceTransform) as usize
                - ptr as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceTransform)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceOpacity) as usize
                - ptr as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceOpacity)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceVisibility) as usize
                - ptr as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceVisibility)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingSetInstanceUserId) as usize - ptr as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingSetInstanceUserId)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayTracingTraceClosest) as usize - ptr as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingTraceClosest)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RayTracingTraceAny) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingTraceAny)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RayTracingQueryAll) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingQueryAll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RayTracingQueryAny) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayTracingQueryAny)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryWorldSpaceRay) as usize - ptr as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryWorldSpaceRay)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryProceduralCandidateHit) as usize
                - ptr as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryProceduralCandidateHit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryTriangleCandidateHit) as usize
                - ptr as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryTriangleCandidateHit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommittedHit) as usize - ptr as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommittedHit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommitTriangle) as usize - ptr as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommitTriangle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_RayQueryCommitdProcedural) as usize - ptr as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryCommitdProcedural)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RayQueryTerminate) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RayQueryTerminate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Load) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Load)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Cast) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Cast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitCast) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitCast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Add) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Add)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Sub) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Sub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mul) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Div) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Div)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Rem) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Rem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitAnd) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitAnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitOr) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitOr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitXor) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitXor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Shl) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Shl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Shr) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Shr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RotRight) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RotRight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_RotLeft) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_RotLeft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Eq) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Eq)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Ne) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Ne)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Lt) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Lt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Le) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Le)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Gt) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Gt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Ge) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Ge)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MatCompMul) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MatCompMul)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Neg) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Not) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Not)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BitNot) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BitNot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_All) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_All)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Any) as usize - ptr as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Any)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Select) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Select)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Clamp) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Clamp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Lerp) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Lerp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Step) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Saturate) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Saturate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SmoothStep) as usize - ptr as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SmoothStep)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Abs) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Abs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Min) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Max) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceSum) as usize - ptr as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceProd) as usize - ptr as usize },
        576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceProd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceMin) as usize - ptr as usize },
        584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ReduceMax) as usize - ptr as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ReduceMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Clz) as usize - ptr as usize },
        600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Clz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Ctz) as usize - ptr as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Ctz)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_PopCount) as usize - ptr as usize },
        616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_PopCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Reverse) as usize - ptr as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Reverse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_IsInf) as usize - ptr as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_IsInf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_IsNan) as usize - ptr as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_IsNan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Acos) as usize - ptr as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Acos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Acosh) as usize - ptr as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Acosh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Asin) as usize - ptr as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Asin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Asinh) as usize - ptr as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Asinh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Atan) as usize - ptr as usize },
        680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Atan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Atan2) as usize - ptr as usize },
        688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Atan2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Atanh) as usize - ptr as usize },
        696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Atanh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Cos) as usize - ptr as usize },
        704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Cos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Cosh) as usize - ptr as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Cosh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Sin) as usize - ptr as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Sin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Sinh) as usize - ptr as usize },
        728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Sinh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Tan) as usize - ptr as usize },
        736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Tan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Tanh) as usize - ptr as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Tanh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Exp) as usize - ptr as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Exp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Exp2) as usize - ptr as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Exp2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Exp10) as usize - ptr as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Exp10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Log) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Log)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Log2) as usize - ptr as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Log2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Log10) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Log10)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Powi) as usize - ptr as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Powi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Powf) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Powf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Sqrt) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Sqrt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Rsqrt) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Rsqrt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Ceil) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Ceil)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Floor) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Floor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Fract) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Fract)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Trunc) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Trunc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Round) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Round)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Fma) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Fma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Copysign) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Copysign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Cross) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Cross)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Dot) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Dot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_OuterProduct) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_OuterProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Length) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_LengthSquared) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_LengthSquared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Normalize) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Normalize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Faceforward) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Faceforward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Distance) as usize - ptr as usize },
        944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Reflect) as usize - ptr as usize },
        952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Reflect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Determinant) as usize - ptr as usize },
        960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Determinant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Transpose) as usize - ptr as usize },
        968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Transpose)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Inverse) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Inverse)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_WarpIsFirstActiveLane) as usize - ptr as usize
        },
        984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpIsFirstActiveLane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpFirstActiveLane) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpFirstActiveLane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAllEqual) as usize - ptr as usize },
        1000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAllEqual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitAnd) as usize - ptr as usize },
        1008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitAnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitOr) as usize - ptr as usize },
        1016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitOr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitXor) as usize - ptr as usize },
        1024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitXor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveCountBits) as usize - ptr as usize },
        1032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveCountBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveMax) as usize - ptr as usize },
        1040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveMin) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveProduct) as usize - ptr as usize },
        1056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveSum) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAll) as usize - ptr as usize },
        1072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveAny) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveAny)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpActiveBitMask) as usize - ptr as usize },
        1088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpActiveBitMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixCountBits) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixCountBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixSum) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixSum)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpPrefixProduct) as usize - ptr as usize },
        1112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpPrefixProduct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpReadLaneAt) as usize - ptr as usize },
        1120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpReadLaneAt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_WarpReadFirstLane) as usize - ptr as usize },
        1128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_WarpReadFirstLane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_SynchronizeBlock) as usize - ptr as usize },
        1136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_SynchronizeBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicExchange) as usize - ptr as usize },
        1144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicExchange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_AtomicCompareExchange) as usize - ptr as usize
        },
        1152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicCompareExchange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchAdd) as usize - ptr as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchAdd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchSub) as usize - ptr as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchSub)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchAnd) as usize - ptr as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchAnd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchOr) as usize - ptr as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchOr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchXor) as usize - ptr as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchXor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchMin) as usize - ptr as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_AtomicFetchMax) as usize - ptr as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_AtomicFetchMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferWrite) as usize - ptr as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferRead) as usize - ptr as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BufferSize) as usize - ptr as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferWrite) as usize - ptr as usize },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferRead) as usize - ptr as usize },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ByteBufferSize) as usize - ptr as usize },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ByteBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dRead) as usize - ptr as usize },
        1264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dWrite) as usize - ptr as usize },
        1272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture2dSize) as usize - ptr as usize },
        1280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture2dSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dRead) as usize - ptr as usize },
        1288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dWrite) as usize - ptr as usize },
        1296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Texture3dSize) as usize - ptr as usize },
        1304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Texture3dSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSample) as usize - ptr as usize
        },
        1312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSample)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleLevel) as usize
                - ptr as usize
        },
        1320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleGrad) as usize - ptr as usize
        },
        1328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleGrad)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSampleGradLevel) as usize
                - ptr as usize
        },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSampleGradLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dRead) as usize - ptr as usize
        },
        1344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dRead)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSize) as usize - ptr as usize
        },
        1352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture2dSizeLevel) as usize - ptr as usize
        },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture2dSizeLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSample) as usize - ptr as usize
        },
        1368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSample)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleLevel) as usize
                - ptr as usize
        },
        1376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleGrad) as usize - ptr as usize
        },
        1384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleGrad)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSampleGradLevel) as usize
                - ptr as usize
        },
        1392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSampleGradLevel)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dRead) as usize - ptr as usize
        },
        1400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dRead)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSize) as usize - ptr as usize
        },
        1408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessTexture3dSizeLevel) as usize - ptr as usize
        },
        1416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessTexture3dSizeLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferWrite) as usize - ptr as usize },
        1424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferWrite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferRead) as usize - ptr as usize },
        1432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferRead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_BindlessBufferSize) as usize - ptr as usize },
        1440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessBufferSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferWrite) as usize - ptr as usize
        },
        1448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferWrite)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferRead) as usize - ptr as usize
        },
        1456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferRead)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessByteBufferSize) as usize - ptr as usize
        },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessByteBufferSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec) as usize - ptr as usize },
        1472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec2) as usize - ptr as usize },
        1480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec3) as usize - ptr as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Vec4) as usize - ptr as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Vec4)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Permute) as usize - ptr as usize },
        1504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Permute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_GetElementPtr) as usize - ptr as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_GetElementPtr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_ExtractElement) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ExtractElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_InsertElement) as usize - ptr as usize },
        1528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_InsertElement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Array) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Array)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Struct) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Struct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_MatFull) as usize - ptr as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_MatFull)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat2) as usize - ptr as usize },
        1560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat3) as usize - ptr as usize },
        1568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Mat4) as usize - ptr as usize },
        1576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Mat4)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicExchange) as usize - ptr as usize
        },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicExchange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicCompareExchange) as usize
                - ptr as usize
        },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicCompareExchange)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAdd) as usize - ptr as usize
        },
        1600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAdd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchSub) as usize - ptr as usize
        },
        1608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchSub)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchAnd) as usize - ptr as usize
        },
        1616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchAnd)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchOr) as usize - ptr as usize
        },
        1624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchOr)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchXor) as usize - ptr as usize
        },
        1632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchXor)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMin) as usize - ptr as usize
        },
        1640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMin)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_BindlessAtomicFetchMax) as usize - ptr as usize
        },
        1648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_BindlessAtomicFetchMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_Callable) as usize - ptr as usize },
        1656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_Callable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_as_CpuExt) as usize - ptr as usize },
        1664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_CpuExt)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Func_as_ShaderExecutionReorder) as usize - ptr as usize
        },
        1672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_as_ShaderExecutionReorder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Func_tag) as usize - ptr as usize },
        1680usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Func_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Assume_msg) as usize - ptr as usize },
        1688usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Assume_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Assume_set_msg) as usize - ptr as usize },
        1696usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Assume_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unreachable_msg) as usize - ptr as usize },
        1704usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Unreachable_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Unreachable_set_msg) as usize - ptr as usize },
        1712usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Unreachable_set_msg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicExchange_ty) as usize - ptr as usize },
        1720usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchange_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicExchange_set_ty) as usize - ptr as usize
        },
        1728usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicExchange_set_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchange_ty) as usize - ptr as usize
        },
        1736usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchange_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicCompareExchange_set_ty) as usize
                - ptr as usize
        },
        1744usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicCompareExchange_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAdd_ty) as usize - ptr as usize },
        1752usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAdd_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAdd_set_ty) as usize - ptr as usize
        },
        1760usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAdd_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSub_ty) as usize - ptr as usize },
        1768usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSub_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchSub_set_ty) as usize - ptr as usize
        },
        1776usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchSub_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAnd_ty) as usize - ptr as usize },
        1784usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAnd_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchAnd_set_ty) as usize - ptr as usize
        },
        1792usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchAnd_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOr_ty) as usize - ptr as usize },
        1800usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOr_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchOr_set_ty) as usize - ptr as usize
        },
        1808usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchOr_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXor_ty) as usize - ptr as usize },
        1816usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXor_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchXor_set_ty) as usize - ptr as usize
        },
        1824usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchXor_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMin_ty) as usize - ptr as usize },
        1832usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMin_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMin_set_ty) as usize - ptr as usize
        },
        1840usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMin_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMax_ty) as usize - ptr as usize },
        1848usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMax_ty)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessAtomicFetchMax_set_ty) as usize - ptr as usize
        },
        1856usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessAtomicFetchMax_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Callable_module) as usize - ptr as usize },
        1864usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Callable_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Callable_set_module) as usize - ptr as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Callable_set_module)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExt_f) as usize - ptr as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExt_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CpuExt_set_f) as usize - ptr as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(CpuExt_set_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Buffer) as usize - ptr as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Texture2d) as usize - ptr as usize },
        1904usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Texture2d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Texture3d) as usize - ptr as usize },
        1912usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Texture3d)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_BindlessArray) as usize - ptr as usize
        },
        1920usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BindlessArray)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Accel) as usize - ptr as usize },
        1928usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Accel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Shared) as usize - ptr as usize },
        1936usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Shared)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Uniform) as usize - ptr as usize },
        1944usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Uniform)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Argument) as usize - ptr as usize },
        1952usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Argument)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Constant) as usize - ptr as usize },
        1960usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Constant)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Call) as usize - ptr as usize },
        1968usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Call)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Phi) as usize - ptr as usize },
        1976usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Phi)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Instruction_as_BasicBlockSentinel) as usize - ptr as usize
        },
        1984usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_BasicBlockSentinel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_If) as usize - ptr as usize },
        1992usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_If)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_GenericLoop) as usize - ptr as usize },
        2000usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_GenericLoop)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Switch) as usize - ptr as usize },
        2008usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Switch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Local) as usize - ptr as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Local)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Break) as usize - ptr as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Break)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Continue) as usize - ptr as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Continue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Return) as usize - ptr as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Return)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Print) as usize - ptr as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Print)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_Update) as usize - ptr as usize },
        2056usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_Update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_RayQuery) as usize - ptr as usize },
        2064usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RayQuery)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_RevAutodiff) as usize - ptr as usize },
        2072usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_RevAutodiff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_as_FwdAutodiff) as usize - ptr as usize },
        2080usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_as_FwdAutodiff)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Instruction_tag) as usize - ptr as usize },
        2088usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Instruction_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Argument_by_value) as usize - ptr as usize },
        2096usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Argument_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Argument_set_by_value) as usize - ptr as usize },
        2104usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Argument_set_by_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Constant_ty) as usize - ptr as usize },
        2112usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Constant_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Constant_value) as usize - ptr as usize },
        2120usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Constant_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Constant_set_ty) as usize - ptr as usize },
        2128usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Constant_set_ty)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Constant_set_value) as usize - ptr as usize },
        2136usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Constant_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Call_func) as usize - ptr as usize },
        2144usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Call_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Call_args) as usize - ptr as usize },
        2152usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Call_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Call_set_func) as usize - ptr as usize },
        2160usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Call_set_func)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Call_set_args) as usize - ptr as usize },
        2168usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Call_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Phi_incomings) as usize - ptr as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Phi_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Phi_set_incomings) as usize - ptr as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Phi_set_incomings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_cond) as usize - ptr as usize },
        2192usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_true_branch) as usize - ptr as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_false_branch) as usize - ptr as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_set_cond) as usize - ptr as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_set_true_branch) as usize - ptr as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_set_true_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).If_set_false_branch) as usize - ptr as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(If_set_false_branch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_prepare) as usize - ptr as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_cond) as usize - ptr as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_body) as usize - ptr as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_update) as usize - ptr as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_set_prepare) as usize - ptr as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_set_prepare)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_set_cond) as usize - ptr as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_set_cond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_set_body) as usize - ptr as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GenericLoop_set_update) as usize - ptr as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(GenericLoop_set_update)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_value) as usize - ptr as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_cases) as usize - ptr as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_default_) as usize - ptr as usize },
        2320usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_set_value) as usize - ptr as usize },
        2328usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_set_cases) as usize - ptr as usize },
        2336usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_set_cases)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Switch_set_default_) as usize - ptr as usize },
        2344usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Switch_set_default_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Local_init) as usize - ptr as usize },
        2352usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Local_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Local_set_init) as usize - ptr as usize },
        2360usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Local_set_init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Return_value) as usize - ptr as usize },
        2368usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Return_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Return_set_value) as usize - ptr as usize },
        2376usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Return_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Print_fmt) as usize - ptr as usize },
        2384usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Print_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Print_args) as usize - ptr as usize },
        2392usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Print_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Print_set_fmt) as usize - ptr as usize },
        2400usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Print_set_fmt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Print_set_args) as usize - ptr as usize },
        2408usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Print_set_args)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update_var) as usize - ptr as usize },
        2416usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Update_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update_value) as usize - ptr as usize },
        2424usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Update_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update_set_var) as usize - ptr as usize },
        2432usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Update_set_var)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Update_set_value) as usize - ptr as usize },
        2440usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Update_set_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQuery_query) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_query)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQuery_on_triangle_hit) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQuery_on_procedural_hit) as usize - ptr as usize },
        2464usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RayQuery_set_query) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_set_query)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQuery_set_on_triangle_hit) as usize - ptr as usize
        },
        2480usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_set_on_triangle_hit)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).RayQuery_set_on_procedural_hit) as usize - ptr as usize
        },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RayQuery_set_on_procedural_hit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiff_body) as usize - ptr as usize },
        2496usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiff_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RevAutodiff_set_body) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(RevAutodiff_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiff_body) as usize - ptr as usize },
        2512usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiff_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FwdAutodiff_set_body) as usize - ptr as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(FwdAutodiff_set_body)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_BufferBinding) as usize - ptr as usize },
        2528usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BufferBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_TextureBinding) as usize - ptr as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_TextureBinding)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).Binding_as_BindlessArrayBinding) as usize - ptr as usize
        },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_BindlessArrayBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_as_AccelBinding) as usize - ptr as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_as_AccelBinding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Binding_tag) as usize - ptr as usize },
        2560usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(Binding_tag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_handle) as usize - ptr as usize },
        2568usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_offset) as usize - ptr as usize },
        2576usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_size) as usize - ptr as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_handle) as usize - ptr as usize },
        2592usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_offset) as usize - ptr as usize },
        2600usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BufferBinding_set_size) as usize - ptr as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BufferBinding_set_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_handle) as usize - ptr as usize },
        2616usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_level) as usize - ptr as usize },
        2624usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_handle) as usize - ptr as usize },
        2632usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextureBinding_set_level) as usize - ptr as usize },
        2640usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(TextureBinding_set_level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_handle) as usize - ptr as usize },
        2648usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_handle)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).BindlessArrayBinding_set_handle) as usize - ptr as usize
        },
        2656usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(BindlessArrayBinding_set_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_handle) as usize - ptr as usize },
        2664usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_handle)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AccelBinding_set_handle) as usize - ptr as usize },
        2672usize,
        concat!(
            "Offset of field: ",
            stringify!(IrV2BindingTable),
            "::",
            stringify!(AccelBinding_set_handle)
        )
    );
}
extern "C" {
    pub fn lc_ir_v2_binding_table() -> IrV2BindingTable;
}
